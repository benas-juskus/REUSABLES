generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id             Int              @id @default(autoincrement()) @db.UnsignedInt
  username       String
  email          String           @unique
  password       String
  role           role             @relation(fields: [roleId], references: [id])
  roleId         Int              @db.UnsignedTinyInt
  createdAt      DateTime         @default(now())
  favouriteItems favouriteItems[]
  items          items[]
  locations      locations[]
  notifications  notifications[]
  tokens         tokens[]

  @@unique([username, email])
  @@unique([username, password])
}

model role {
  id    Int     @id @default(autoincrement()) @db.UnsignedTinyInt
  title String
  users users[]
}

model locations {
  user_id    users  @relation(fields: [usersId], references: [id])
  usersId    Int    @id @db.UnsignedInt
  longtitude String
  latitude   String
}

model favouriteItems {
  user_id users @relation(fields: [userId], references: [id])
  item_id items @relation(fields: [itemsId], references: [id])
  userId  Int   @db.UnsignedInt
  itemsId Int   @db.UnsignedInt

  @@id([userId, itemsId])
}

model items {
  id               Int              @id @default(autoincrement()) @db.UnsignedInt
  favouriteItems   favouriteItems[]
  user_id          users            @relation(fields: [userId], references: [id])
  userId           Int              @db.UnsignedInt
  subCategories_id subCategories    @relation(fields: [subCategoriesId], references: [id])
  subCategoriesId  Int              @db.UnsignedMediumInt
  exchangeTo       exchangeTo[]
  name             String
  description      String
  photo            String
  price            Decimal          @db.Decimal(10, 2)
  for_sale         Boolean
  exchange         Boolean
  visibility       Boolean
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  notifications    notifications[]
}

model subCategories {
  id           Int          @id @default(autoincrement()) @db.UnsignedMediumInt
  category_id  categories   @relation(fields: [categoriesId], references: [id])
  categoriesId Int          @db.UnsignedTinyInt
  title        String
  nr           Int?
  items        items[]
  exchangeTo   exchangeTo[]
}

model categories {
  id            Int             @id @default(autoincrement()) @db.UnsignedTinyInt
  subCategories subCategories[]
  title         String
  nr            Int
}

model exchangeTo {
  id               Int           @id @default(autoincrement()) @db.UnsignedInt
  item_id          items         @relation(fields: [itemsId], references: [id])
  subCategories_id subCategories @relation(fields: [subCategoriesId], references: [id])
  itemsId          Int           @db.UnsignedInt
  subCategoriesId  Int           @db.UnsignedMediumInt
}

model notifications {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id    users    @relation(fields: [usersId], references: [id])
  item_id    items?   @relation(fields: [itemsId], references: [id])
  data       String
  seen       Boolean
  created_at DateTime @default(now())
  usersId    Int      @db.UnsignedInt
  itemsId    Int?     @db.UnsignedInt
}

model tokens {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  user    users  @relation(fields: [usersId], references: [id])
  token   String @unique
  usersId Int    @db.UnsignedInt
}
