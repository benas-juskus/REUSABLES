generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id             Int              @id @default(autoincrement()) @db.UnsignedInt
  username       String
  email          String           @unique
  password       String
  Role           Roles            @relation(fields: [role_id], references: [id])
  role_id        Int              @db.UnsignedTinyInt
  createdAt      DateTime         @default(now())
  FavouriteItems FavouriteItems[]
  Items          Items[]
  Location       Locations[]
  Notifications  Notifications[]
  Tokens         Tokens[]
  Image          Gallery[]

  @@unique([username, email])
  @@unique([username, password])
}

model Roles {
  id    Int     @id @default(autoincrement()) @db.UnsignedTinyInt
  title String
  Users Users[]
}

model Locations {
  User       Users  @relation(fields: [user_id], references: [id])
  user_id    Int    @id @db.UnsignedInt
  longtitude String
  latitude   String
}

model FavouriteItems {
  User     Users @relation(fields: [user_id], references: [id])
  user_id  Int   @db.UnsignedInt
  Items    Items @relation(fields: [items_id], references: [id])
  items_id Int   @db.UnsignedInt

  @@id([user_id, items_id])
}

model Items {
  id               Int              @id @default(autoincrement()) @db.UnsignedInt
  Users            Users            @relation(fields: [users_id], references: [id])
  users_id         Int              @db.UnsignedInt
  SubCategories    SubCategories    @relation(fields: [subCategories_id], references: [id])
  subCategories_id Int              @db.UnsignedMediumInt
  name             String
  description      String
  photo            Gallery          @relation(fields: [photo_id], references: [id])
  photo_id         Int              @db.UnsignedInt
  price            Decimal          @db.Decimal(10, 2)
  for_sale         Boolean
  exchange         Boolean
  visibility       Boolean
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  ExchangeTo       ExchangeTo[]
  FavouriteItems   FavouriteItems[]
  Notifications    Notifications[]
}

model SubCategories {
  id          Int          @id @default(autoincrement()) @db.UnsignedMediumInt
  Category    Categories   @relation(fields: [category_id], references: [id])
  category_id Int          @db.UnsignedTinyInt
  title       String
  nr          Int?
  Items       Items[]
  ExchangeTo  ExchangeTo[]
}

model Categories {
  id            Int             @id @default(autoincrement()) @db.UnsignedTinyInt
  title         String
  nr            Int
  SubCategories SubCategories[]
}

model ExchangeTo {
  id               Int           @id @default(autoincrement()) @db.UnsignedInt
  Item             Items         @relation(fields: [items_id], references: [id])
  items_id         Int           @db.UnsignedInt
  SubCategories    SubCategories @relation(fields: [subCategories_id], references: [id])
  subCategories_id Int           @db.UnsignedMediumInt
}

model Notifications {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  User       Users    @relation(fields: [user_id], references: [id])
  user_id    Int      @db.UnsignedInt
  Item       Items?   @relation(fields: [item_id], references: [id])
  item_id    Int?     @db.UnsignedInt
  data       String
  seen       Boolean
  created_at DateTime @default(now())
}

model Tokens {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  User    Users  @relation(fields: [user_id], references: [id])
  user_id Int    @db.UnsignedInt
  token   String @unique
  device  String
}

model Gallery {
  id      Int     @id @default(autoincrement()) @db.UnsignedInt
  user    Users   @relation(fields: [user_id], references: [id])
  user_id Int     @db.UnsignedInt
  photo   String
  Items   Items[]
}

model Censorship {
  string String @id
}
