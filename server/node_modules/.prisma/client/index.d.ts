
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Roles
 * 
 */
export type Roles = $Result.DefaultSelection<Prisma.$RolesPayload>
/**
 * Model Locations
 * 
 */
export type Locations = $Result.DefaultSelection<Prisma.$LocationsPayload>
/**
 * Model FavouriteItems
 * 
 */
export type FavouriteItems = $Result.DefaultSelection<Prisma.$FavouriteItemsPayload>
/**
 * Model Items
 * 
 */
export type Items = $Result.DefaultSelection<Prisma.$ItemsPayload>
/**
 * Model SubCategories
 * 
 */
export type SubCategories = $Result.DefaultSelection<Prisma.$SubCategoriesPayload>
/**
 * Model Categories
 * 
 */
export type Categories = $Result.DefaultSelection<Prisma.$CategoriesPayload>
/**
 * Model ExchangeTo
 * 
 */
export type ExchangeTo = $Result.DefaultSelection<Prisma.$ExchangeToPayload>
/**
 * Model Notifications
 * 
 */
export type Notifications = $Result.DefaultSelection<Prisma.$NotificationsPayload>
/**
 * Model Tokens
 * 
 */
export type Tokens = $Result.DefaultSelection<Prisma.$TokensPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.roles`: Exposes CRUD operations for the **Roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.roles.findMany()
    * ```
    */
  get roles(): Prisma.RolesDelegate<ExtArgs>;

  /**
   * `prisma.locations`: Exposes CRUD operations for the **Locations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.locations.findMany()
    * ```
    */
  get locations(): Prisma.LocationsDelegate<ExtArgs>;

  /**
   * `prisma.favouriteItems`: Exposes CRUD operations for the **FavouriteItems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavouriteItems
    * const favouriteItems = await prisma.favouriteItems.findMany()
    * ```
    */
  get favouriteItems(): Prisma.FavouriteItemsDelegate<ExtArgs>;

  /**
   * `prisma.items`: Exposes CRUD operations for the **Items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.items.findMany()
    * ```
    */
  get items(): Prisma.ItemsDelegate<ExtArgs>;

  /**
   * `prisma.subCategories`: Exposes CRUD operations for the **SubCategories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubCategories
    * const subCategories = await prisma.subCategories.findMany()
    * ```
    */
  get subCategories(): Prisma.SubCategoriesDelegate<ExtArgs>;

  /**
   * `prisma.categories`: Exposes CRUD operations for the **Categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.CategoriesDelegate<ExtArgs>;

  /**
   * `prisma.exchangeTo`: Exposes CRUD operations for the **ExchangeTo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExchangeTos
    * const exchangeTos = await prisma.exchangeTo.findMany()
    * ```
    */
  get exchangeTo(): Prisma.ExchangeToDelegate<ExtArgs>;

  /**
   * `prisma.notifications`: Exposes CRUD operations for the **Notifications** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notifications.findMany()
    * ```
    */
  get notifications(): Prisma.NotificationsDelegate<ExtArgs>;

  /**
   * `prisma.tokens`: Exposes CRUD operations for the **Tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.tokens.findMany()
    * ```
    */
  get tokens(): Prisma.TokensDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.2
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Roles: 'Roles',
    Locations: 'Locations',
    FavouriteItems: 'FavouriteItems',
    Items: 'Items',
    SubCategories: 'SubCategories',
    Categories: 'Categories',
    ExchangeTo: 'ExchangeTo',
    Notifications: 'Notifications',
    Tokens: 'Tokens'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'roles' | 'locations' | 'favouriteItems' | 'items' | 'subCategories' | 'categories' | 'exchangeTo' | 'notifications' | 'tokens'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Roles: {
        payload: Prisma.$RolesPayload<ExtArgs>
        fields: Prisma.RolesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          findFirst: {
            args: Prisma.RolesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          findMany: {
            args: Prisma.RolesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>[]
          }
          create: {
            args: Prisma.RolesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          createMany: {
            args: Prisma.RolesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RolesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          update: {
            args: Prisma.RolesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          deleteMany: {
            args: Prisma.RolesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RolesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RolesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          aggregate: {
            args: Prisma.RolesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRoles>
          }
          groupBy: {
            args: Prisma.RolesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RolesGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolesCountArgs<ExtArgs>,
            result: $Utils.Optional<RolesCountAggregateOutputType> | number
          }
        }
      }
      Locations: {
        payload: Prisma.$LocationsPayload<ExtArgs>
        fields: Prisma.LocationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationsPayload>
          }
          findFirst: {
            args: Prisma.LocationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationsPayload>
          }
          findMany: {
            args: Prisma.LocationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationsPayload>[]
          }
          create: {
            args: Prisma.LocationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationsPayload>
          }
          createMany: {
            args: Prisma.LocationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LocationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationsPayload>
          }
          update: {
            args: Prisma.LocationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationsPayload>
          }
          deleteMany: {
            args: Prisma.LocationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LocationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LocationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationsPayload>
          }
          aggregate: {
            args: Prisma.LocationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLocations>
          }
          groupBy: {
            args: Prisma.LocationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LocationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationsCountArgs<ExtArgs>,
            result: $Utils.Optional<LocationsCountAggregateOutputType> | number
          }
        }
      }
      FavouriteItems: {
        payload: Prisma.$FavouriteItemsPayload<ExtArgs>
        fields: Prisma.FavouriteItemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavouriteItemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavouriteItemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteItemsPayload>
          }
          findFirst: {
            args: Prisma.FavouriteItemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavouriteItemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteItemsPayload>
          }
          findMany: {
            args: Prisma.FavouriteItemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteItemsPayload>[]
          }
          create: {
            args: Prisma.FavouriteItemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteItemsPayload>
          }
          createMany: {
            args: Prisma.FavouriteItemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FavouriteItemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteItemsPayload>
          }
          update: {
            args: Prisma.FavouriteItemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteItemsPayload>
          }
          deleteMany: {
            args: Prisma.FavouriteItemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FavouriteItemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FavouriteItemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteItemsPayload>
          }
          aggregate: {
            args: Prisma.FavouriteItemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFavouriteItems>
          }
          groupBy: {
            args: Prisma.FavouriteItemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FavouriteItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavouriteItemsCountArgs<ExtArgs>,
            result: $Utils.Optional<FavouriteItemsCountAggregateOutputType> | number
          }
        }
      }
      Items: {
        payload: Prisma.$ItemsPayload<ExtArgs>
        fields: Prisma.ItemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          findFirst: {
            args: Prisma.ItemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          findMany: {
            args: Prisma.ItemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>[]
          }
          create: {
            args: Prisma.ItemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          createMany: {
            args: Prisma.ItemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ItemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          update: {
            args: Prisma.ItemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          deleteMany: {
            args: Prisma.ItemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ItemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ItemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          aggregate: {
            args: Prisma.ItemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateItems>
          }
          groupBy: {
            args: Prisma.ItemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemsCountArgs<ExtArgs>,
            result: $Utils.Optional<ItemsCountAggregateOutputType> | number
          }
        }
      }
      SubCategories: {
        payload: Prisma.$SubCategoriesPayload<ExtArgs>
        fields: Prisma.SubCategoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubCategoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubCategoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload>
          }
          findFirst: {
            args: Prisma.SubCategoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubCategoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload>
          }
          findMany: {
            args: Prisma.SubCategoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload>[]
          }
          create: {
            args: Prisma.SubCategoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload>
          }
          createMany: {
            args: Prisma.SubCategoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubCategoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload>
          }
          update: {
            args: Prisma.SubCategoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload>
          }
          deleteMany: {
            args: Prisma.SubCategoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubCategoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubCategoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload>
          }
          aggregate: {
            args: Prisma.SubCategoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubCategories>
          }
          groupBy: {
            args: Prisma.SubCategoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubCategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubCategoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<SubCategoriesCountAggregateOutputType> | number
          }
        }
      }
      Categories: {
        payload: Prisma.$CategoriesPayload<ExtArgs>
        fields: Prisma.CategoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          findFirst: {
            args: Prisma.CategoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          findMany: {
            args: Prisma.CategoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>[]
          }
          create: {
            args: Prisma.CategoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          createMany: {
            args: Prisma.CategoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          update: {
            args: Prisma.CategoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          deleteMany: {
            args: Prisma.CategoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          aggregate: {
            args: Prisma.CategoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategories>
          }
          groupBy: {
            args: Prisma.CategoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesCountAggregateOutputType> | number
          }
        }
      }
      ExchangeTo: {
        payload: Prisma.$ExchangeToPayload<ExtArgs>
        fields: Prisma.ExchangeToFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExchangeToFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExchangeToPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExchangeToFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExchangeToPayload>
          }
          findFirst: {
            args: Prisma.ExchangeToFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExchangeToPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExchangeToFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExchangeToPayload>
          }
          findMany: {
            args: Prisma.ExchangeToFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExchangeToPayload>[]
          }
          create: {
            args: Prisma.ExchangeToCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExchangeToPayload>
          }
          createMany: {
            args: Prisma.ExchangeToCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExchangeToDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExchangeToPayload>
          }
          update: {
            args: Prisma.ExchangeToUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExchangeToPayload>
          }
          deleteMany: {
            args: Prisma.ExchangeToDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExchangeToUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExchangeToUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExchangeToPayload>
          }
          aggregate: {
            args: Prisma.ExchangeToAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExchangeTo>
          }
          groupBy: {
            args: Prisma.ExchangeToGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExchangeToGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExchangeToCountArgs<ExtArgs>,
            result: $Utils.Optional<ExchangeToCountAggregateOutputType> | number
          }
        }
      }
      Notifications: {
        payload: Prisma.$NotificationsPayload<ExtArgs>
        fields: Prisma.NotificationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          findFirst: {
            args: Prisma.NotificationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          findMany: {
            args: Prisma.NotificationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>[]
          }
          create: {
            args: Prisma.NotificationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          createMany: {
            args: Prisma.NotificationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          update: {
            args: Prisma.NotificationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          deleteMany: {
            args: Prisma.NotificationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          aggregate: {
            args: Prisma.NotificationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotifications>
          }
          groupBy: {
            args: Prisma.NotificationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationsCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationsCountAggregateOutputType> | number
          }
        }
      }
      Tokens: {
        payload: Prisma.$TokensPayload<ExtArgs>
        fields: Prisma.TokensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokensFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokensFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          findFirst: {
            args: Prisma.TokensFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokensFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          findMany: {
            args: Prisma.TokensFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>[]
          }
          create: {
            args: Prisma.TokensCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          createMany: {
            args: Prisma.TokensCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TokensDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          update: {
            args: Prisma.TokensUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          deleteMany: {
            args: Prisma.TokensDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TokensUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TokensUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          aggregate: {
            args: Prisma.TokensAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTokens>
          }
          groupBy: {
            args: Prisma.TokensGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TokensGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokensCountArgs<ExtArgs>,
            result: $Utils.Optional<TokensCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    FavouriteItems: number
    Items: number
    Location: number
    Notifications: number
    Tokens: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    FavouriteItems?: boolean | UsersCountOutputTypeCountFavouriteItemsArgs
    Items?: boolean | UsersCountOutputTypeCountItemsArgs
    Location?: boolean | UsersCountOutputTypeCountLocationArgs
    Notifications?: boolean | UsersCountOutputTypeCountNotificationsArgs
    Tokens?: boolean | UsersCountOutputTypeCountTokensArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountFavouriteItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavouriteItemsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokensWhereInput
  }



  /**
   * Count Type RolesCountOutputType
   */

  export type RolesCountOutputType = {
    Users: number
  }

  export type RolesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | RolesCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolesCountOutputType
     */
    select?: RolesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }



  /**
   * Count Type ItemsCountOutputType
   */

  export type ItemsCountOutputType = {
    ExchangeTo: number
    FavouriteItems: number
    Notifications: number
  }

  export type ItemsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ExchangeTo?: boolean | ItemsCountOutputTypeCountExchangeToArgs
    FavouriteItems?: boolean | ItemsCountOutputTypeCountFavouriteItemsArgs
    Notifications?: boolean | ItemsCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes

  /**
   * ItemsCountOutputType without action
   */
  export type ItemsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCountOutputType
     */
    select?: ItemsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ItemsCountOutputType without action
   */
  export type ItemsCountOutputTypeCountExchangeToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExchangeToWhereInput
  }


  /**
   * ItemsCountOutputType without action
   */
  export type ItemsCountOutputTypeCountFavouriteItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavouriteItemsWhereInput
  }


  /**
   * ItemsCountOutputType without action
   */
  export type ItemsCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationsWhereInput
  }



  /**
   * Count Type SubCategoriesCountOutputType
   */

  export type SubCategoriesCountOutputType = {
    Items: number
    ExchangeTo: number
  }

  export type SubCategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Items?: boolean | SubCategoriesCountOutputTypeCountItemsArgs
    ExchangeTo?: boolean | SubCategoriesCountOutputTypeCountExchangeToArgs
  }

  // Custom InputTypes

  /**
   * SubCategoriesCountOutputType without action
   */
  export type SubCategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoriesCountOutputType
     */
    select?: SubCategoriesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SubCategoriesCountOutputType without action
   */
  export type SubCategoriesCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemsWhereInput
  }


  /**
   * SubCategoriesCountOutputType without action
   */
  export type SubCategoriesCountOutputTypeCountExchangeToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExchangeToWhereInput
  }



  /**
   * Count Type CategoriesCountOutputType
   */

  export type CategoriesCountOutputType = {
    SubCategories: number
  }

  export type CategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SubCategories?: boolean | CategoriesCountOutputTypeCountSubCategoriesArgs
  }

  // Custom InputTypes

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     */
    select?: CategoriesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountSubCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubCategoriesWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    role_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    role_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    role_id: number | null
    createdAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    role_id: number | null
    createdAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    role_id: number
    createdAt: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    role_id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    role_id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role_id?: true
    createdAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role_id?: true
    createdAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role_id?: true
    createdAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    username: string
    email: string
    password: string
    role_id: number
    createdAt: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role_id?: boolean
    createdAt?: boolean
    Role?: boolean | RolesDefaultArgs<ExtArgs>
    FavouriteItems?: boolean | Users$FavouriteItemsArgs<ExtArgs>
    Items?: boolean | Users$ItemsArgs<ExtArgs>
    Location?: boolean | Users$LocationArgs<ExtArgs>
    Notifications?: boolean | Users$NotificationsArgs<ExtArgs>
    Tokens?: boolean | Users$TokensArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role_id?: boolean
    createdAt?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Role?: boolean | RolesDefaultArgs<ExtArgs>
    FavouriteItems?: boolean | Users$FavouriteItemsArgs<ExtArgs>
    Items?: boolean | Users$ItemsArgs<ExtArgs>
    Location?: boolean | Users$LocationArgs<ExtArgs>
    Notifications?: boolean | Users$NotificationsArgs<ExtArgs>
    Tokens?: boolean | Users$TokensArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      Role: Prisma.$RolesPayload<ExtArgs>
      FavouriteItems: Prisma.$FavouriteItemsPayload<ExtArgs>[]
      Items: Prisma.$ItemsPayload<ExtArgs>[]
      Location: Prisma.$LocationsPayload<ExtArgs>[]
      Notifications: Prisma.$NotificationsPayload<ExtArgs>[]
      Tokens: Prisma.$TokensPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      email: string
      password: string
      role_id: number
      createdAt: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Role<T extends RolesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RolesDefaultArgs<ExtArgs>>): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    FavouriteItems<T extends Users$FavouriteItemsArgs<ExtArgs> = {}>(args?: Subset<T, Users$FavouriteItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavouriteItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Items<T extends Users$ItemsArgs<ExtArgs> = {}>(args?: Subset<T, Users$ItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Location<T extends Users$LocationArgs<ExtArgs> = {}>(args?: Subset<T, Users$LocationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Notifications<T extends Users$NotificationsArgs<ExtArgs> = {}>(args?: Subset<T, Users$NotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Tokens<T extends Users$TokensArgs<ExtArgs> = {}>(args?: Subset<T, Users$TokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'Int'>
    readonly username: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly role_id: FieldRef<"Users", 'Int'>
    readonly createdAt: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users.FavouriteItems
   */
  export type Users$FavouriteItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteItems
     */
    select?: FavouriteItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteItemsInclude<ExtArgs> | null
    where?: FavouriteItemsWhereInput
    orderBy?: FavouriteItemsOrderByWithRelationInput | FavouriteItemsOrderByWithRelationInput[]
    cursor?: FavouriteItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavouriteItemsScalarFieldEnum | FavouriteItemsScalarFieldEnum[]
  }


  /**
   * Users.Items
   */
  export type Users$ItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    where?: ItemsWhereInput
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    cursor?: ItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }


  /**
   * Users.Location
   */
  export type Users$LocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locations
     */
    select?: LocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationsInclude<ExtArgs> | null
    where?: LocationsWhereInput
    orderBy?: LocationsOrderByWithRelationInput | LocationsOrderByWithRelationInput[]
    cursor?: LocationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationsScalarFieldEnum | LocationsScalarFieldEnum[]
  }


  /**
   * Users.Notifications
   */
  export type Users$NotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    where?: NotificationsWhereInput
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    cursor?: NotificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Users.Tokens
   */
  export type Users$TokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    where?: TokensWhereInput
    orderBy?: TokensOrderByWithRelationInput | TokensOrderByWithRelationInput[]
    cursor?: TokensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }


  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
  }



  /**
   * Model Roles
   */

  export type AggregateRoles = {
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  export type RolesAvgAggregateOutputType = {
    id: number | null
  }

  export type RolesSumAggregateOutputType = {
    id: number | null
  }

  export type RolesMinAggregateOutputType = {
    id: number | null
    title: string | null
  }

  export type RolesMaxAggregateOutputType = {
    id: number | null
    title: string | null
  }

  export type RolesCountAggregateOutputType = {
    id: number
    title: number
    _all: number
  }


  export type RolesAvgAggregateInputType = {
    id?: true
  }

  export type RolesSumAggregateInputType = {
    id?: true
  }

  export type RolesMinAggregateInputType = {
    id?: true
    title?: true
  }

  export type RolesMaxAggregateInputType = {
    id?: true
    title?: true
  }

  export type RolesCountAggregateInputType = {
    id?: true
    title?: true
    _all?: true
  }

  export type RolesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to aggregate.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RolesOrderByWithRelationInput | RolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolesMaxAggregateInputType
  }

  export type GetRolesAggregateType<T extends RolesAggregateArgs> = {
        [P in keyof T & keyof AggregateRoles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoles[P]>
      : GetScalarType<T[P], AggregateRoles[P]>
  }




  export type RolesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolesWhereInput
    orderBy?: RolesOrderByWithAggregationInput | RolesOrderByWithAggregationInput[]
    by: RolesScalarFieldEnum[] | RolesScalarFieldEnum
    having?: RolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolesCountAggregateInputType | true
    _avg?: RolesAvgAggregateInputType
    _sum?: RolesSumAggregateInputType
    _min?: RolesMinAggregateInputType
    _max?: RolesMaxAggregateInputType
  }

  export type RolesGroupByOutputType = {
    id: number
    title: string
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  type GetRolesGroupByPayload<T extends RolesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolesGroupByOutputType[P]>
            : GetScalarType<T[P], RolesGroupByOutputType[P]>
        }
      >
    >


  export type RolesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    Users?: boolean | Roles$UsersArgs<ExtArgs>
    _count?: boolean | RolesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roles"]>

  export type RolesSelectScalar = {
    id?: boolean
    title?: boolean
  }

  export type RolesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | Roles$UsersArgs<ExtArgs>
    _count?: boolean | RolesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RolesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Roles"
    objects: {
      Users: Prisma.$UsersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
    }, ExtArgs["result"]["roles"]>
    composites: {}
  }


  type RolesGetPayload<S extends boolean | null | undefined | RolesDefaultArgs> = $Result.GetResult<Prisma.$RolesPayload, S>

  type RolesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RolesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RolesCountAggregateInputType | true
    }

  export interface RolesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Roles'], meta: { name: 'Roles' } }
    /**
     * Find zero or one Roles that matches the filter.
     * @param {RolesFindUniqueArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RolesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RolesFindUniqueArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Roles that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RolesFindUniqueOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RolesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindFirstArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RolesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesFindFirstArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Roles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindFirstOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RolesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.roles.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.roles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolesWithIdOnly = await prisma.roles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RolesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Roles.
     * @param {RolesCreateArgs} args - Arguments to create a Roles.
     * @example
     * // Create one Roles
     * const Roles = await prisma.roles.create({
     *   data: {
     *     // ... data to create a Roles
     *   }
     * })
     * 
    **/
    create<T extends RolesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RolesCreateArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Roles.
     *     @param {RolesCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const roles = await prisma.roles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RolesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Roles.
     * @param {RolesDeleteArgs} args - Arguments to delete one Roles.
     * @example
     * // Delete one Roles
     * const Roles = await prisma.roles.delete({
     *   where: {
     *     // ... filter to delete one Roles
     *   }
     * })
     * 
    **/
    delete<T extends RolesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RolesDeleteArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Roles.
     * @param {RolesUpdateArgs} args - Arguments to update one Roles.
     * @example
     * // Update one Roles
     * const roles = await prisma.roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RolesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RolesUpdateArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RolesDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RolesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const roles = await prisma.roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RolesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RolesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Roles.
     * @param {RolesUpsertArgs} args - Arguments to update or create a Roles.
     * @example
     * // Update or create a Roles
     * const roles = await prisma.roles.upsert({
     *   create: {
     *     // ... data to create a Roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roles we want to update
     *   }
     * })
    **/
    upsert<T extends RolesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RolesUpsertArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.roles.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RolesCountArgs>(
      args?: Subset<T, RolesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolesAggregateArgs>(args: Subset<T, RolesAggregateArgs>): Prisma.PrismaPromise<GetRolesAggregateType<T>>

    /**
     * Group by Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolesGroupByArgs['orderBy'] }
        : { orderBy?: RolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Roles model
   */
  readonly fields: RolesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Users<T extends Roles$UsersArgs<ExtArgs> = {}>(args?: Subset<T, Roles$UsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Roles model
   */ 
  interface RolesFieldRefs {
    readonly id: FieldRef<"Roles", 'Int'>
    readonly title: FieldRef<"Roles", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Roles findUnique
   */
  export type RolesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where: RolesWhereUniqueInput
  }


  /**
   * Roles findUniqueOrThrow
   */
  export type RolesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where: RolesWhereUniqueInput
  }


  /**
   * Roles findFirst
   */
  export type RolesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RolesOrderByWithRelationInput | RolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }


  /**
   * Roles findFirstOrThrow
   */
  export type RolesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RolesOrderByWithRelationInput | RolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }


  /**
   * Roles findMany
   */
  export type RolesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RolesOrderByWithRelationInput | RolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }


  /**
   * Roles create
   */
  export type RolesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * The data needed to create a Roles.
     */
    data: XOR<RolesCreateInput, RolesUncheckedCreateInput>
  }


  /**
   * Roles createMany
   */
  export type RolesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RolesCreateManyInput | RolesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Roles update
   */
  export type RolesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * The data needed to update a Roles.
     */
    data: XOR<RolesUpdateInput, RolesUncheckedUpdateInput>
    /**
     * Choose, which Roles to update.
     */
    where: RolesWhereUniqueInput
  }


  /**
   * Roles updateMany
   */
  export type RolesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RolesUpdateManyMutationInput, RolesUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RolesWhereInput
  }


  /**
   * Roles upsert
   */
  export type RolesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * The filter to search for the Roles to update in case it exists.
     */
    where: RolesWhereUniqueInput
    /**
     * In case the Roles found by the `where` argument doesn't exist, create a new Roles with this data.
     */
    create: XOR<RolesCreateInput, RolesUncheckedCreateInput>
    /**
     * In case the Roles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolesUpdateInput, RolesUncheckedUpdateInput>
  }


  /**
   * Roles delete
   */
  export type RolesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter which Roles to delete.
     */
    where: RolesWhereUniqueInput
  }


  /**
   * Roles deleteMany
   */
  export type RolesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RolesWhereInput
  }


  /**
   * Roles.Users
   */
  export type Roles$UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Roles without action
   */
  export type RolesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
  }



  /**
   * Model Locations
   */

  export type AggregateLocations = {
    _count: LocationsCountAggregateOutputType | null
    _avg: LocationsAvgAggregateOutputType | null
    _sum: LocationsSumAggregateOutputType | null
    _min: LocationsMinAggregateOutputType | null
    _max: LocationsMaxAggregateOutputType | null
  }

  export type LocationsAvgAggregateOutputType = {
    user_id: number | null
  }

  export type LocationsSumAggregateOutputType = {
    user_id: number | null
  }

  export type LocationsMinAggregateOutputType = {
    user_id: number | null
    longtitude: string | null
    latitude: string | null
  }

  export type LocationsMaxAggregateOutputType = {
    user_id: number | null
    longtitude: string | null
    latitude: string | null
  }

  export type LocationsCountAggregateOutputType = {
    user_id: number
    longtitude: number
    latitude: number
    _all: number
  }


  export type LocationsAvgAggregateInputType = {
    user_id?: true
  }

  export type LocationsSumAggregateInputType = {
    user_id?: true
  }

  export type LocationsMinAggregateInputType = {
    user_id?: true
    longtitude?: true
    latitude?: true
  }

  export type LocationsMaxAggregateInputType = {
    user_id?: true
    longtitude?: true
    latitude?: true
  }

  export type LocationsCountAggregateInputType = {
    user_id?: true
    longtitude?: true
    latitude?: true
    _all?: true
  }

  export type LocationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to aggregate.
     */
    where?: LocationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationsOrderByWithRelationInput | LocationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationsMaxAggregateInputType
  }

  export type GetLocationsAggregateType<T extends LocationsAggregateArgs> = {
        [P in keyof T & keyof AggregateLocations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocations[P]>
      : GetScalarType<T[P], AggregateLocations[P]>
  }




  export type LocationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationsWhereInput
    orderBy?: LocationsOrderByWithAggregationInput | LocationsOrderByWithAggregationInput[]
    by: LocationsScalarFieldEnum[] | LocationsScalarFieldEnum
    having?: LocationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationsCountAggregateInputType | true
    _avg?: LocationsAvgAggregateInputType
    _sum?: LocationsSumAggregateInputType
    _min?: LocationsMinAggregateInputType
    _max?: LocationsMaxAggregateInputType
  }

  export type LocationsGroupByOutputType = {
    user_id: number
    longtitude: string
    latitude: string
    _count: LocationsCountAggregateOutputType | null
    _avg: LocationsAvgAggregateOutputType | null
    _sum: LocationsSumAggregateOutputType | null
    _min: LocationsMinAggregateOutputType | null
    _max: LocationsMaxAggregateOutputType | null
  }

  type GetLocationsGroupByPayload<T extends LocationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationsGroupByOutputType[P]>
            : GetScalarType<T[P], LocationsGroupByOutputType[P]>
        }
      >
    >


  export type LocationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    longtitude?: boolean
    latitude?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locations"]>

  export type LocationsSelectScalar = {
    user_id?: boolean
    longtitude?: boolean
    latitude?: boolean
  }

  export type LocationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $LocationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Locations"
    objects: {
      User: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      longtitude: string
      latitude: string
    }, ExtArgs["result"]["locations"]>
    composites: {}
  }


  type LocationsGetPayload<S extends boolean | null | undefined | LocationsDefaultArgs> = $Result.GetResult<Prisma.$LocationsPayload, S>

  type LocationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationsCountAggregateInputType | true
    }

  export interface LocationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Locations'], meta: { name: 'Locations' } }
    /**
     * Find zero or one Locations that matches the filter.
     * @param {LocationsFindUniqueArgs} args - Arguments to find a Locations
     * @example
     * // Get one Locations
     * const locations = await prisma.locations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LocationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LocationsFindUniqueArgs<ExtArgs>>
    ): Prisma__LocationsClient<$Result.GetResult<Prisma.$LocationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Locations that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LocationsFindUniqueOrThrowArgs} args - Arguments to find a Locations
     * @example
     * // Get one Locations
     * const locations = await prisma.locations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LocationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LocationsClient<$Result.GetResult<Prisma.$LocationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationsFindFirstArgs} args - Arguments to find a Locations
     * @example
     * // Get one Locations
     * const locations = await prisma.locations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LocationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationsFindFirstArgs<ExtArgs>>
    ): Prisma__LocationsClient<$Result.GetResult<Prisma.$LocationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Locations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationsFindFirstOrThrowArgs} args - Arguments to find a Locations
     * @example
     * // Get one Locations
     * const locations = await prisma.locations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LocationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LocationsClient<$Result.GetResult<Prisma.$LocationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.locations.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.locations.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const locationsWithUser_idOnly = await prisma.locations.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends LocationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Locations.
     * @param {LocationsCreateArgs} args - Arguments to create a Locations.
     * @example
     * // Create one Locations
     * const Locations = await prisma.locations.create({
     *   data: {
     *     // ... data to create a Locations
     *   }
     * })
     * 
    **/
    create<T extends LocationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LocationsCreateArgs<ExtArgs>>
    ): Prisma__LocationsClient<$Result.GetResult<Prisma.$LocationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Locations.
     *     @param {LocationsCreateManyArgs} args - Arguments to create many Locations.
     *     @example
     *     // Create many Locations
     *     const locations = await prisma.locations.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LocationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Locations.
     * @param {LocationsDeleteArgs} args - Arguments to delete one Locations.
     * @example
     * // Delete one Locations
     * const Locations = await prisma.locations.delete({
     *   where: {
     *     // ... filter to delete one Locations
     *   }
     * })
     * 
    **/
    delete<T extends LocationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LocationsDeleteArgs<ExtArgs>>
    ): Prisma__LocationsClient<$Result.GetResult<Prisma.$LocationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Locations.
     * @param {LocationsUpdateArgs} args - Arguments to update one Locations.
     * @example
     * // Update one Locations
     * const locations = await prisma.locations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LocationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LocationsUpdateArgs<ExtArgs>>
    ): Prisma__LocationsClient<$Result.GetResult<Prisma.$LocationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {LocationsDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.locations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LocationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const locations = await prisma.locations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LocationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LocationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Locations.
     * @param {LocationsUpsertArgs} args - Arguments to update or create a Locations.
     * @example
     * // Update or create a Locations
     * const locations = await prisma.locations.upsert({
     *   create: {
     *     // ... data to create a Locations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Locations we want to update
     *   }
     * })
    **/
    upsert<T extends LocationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LocationsUpsertArgs<ExtArgs>>
    ): Prisma__LocationsClient<$Result.GetResult<Prisma.$LocationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationsCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.locations.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationsCountArgs>(
      args?: Subset<T, LocationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationsAggregateArgs>(args: Subset<T, LocationsAggregateArgs>): Prisma.PrismaPromise<GetLocationsAggregateType<T>>

    /**
     * Group by Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationsGroupByArgs['orderBy'] }
        : { orderBy?: LocationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Locations model
   */
  readonly fields: LocationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Locations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Locations model
   */ 
  interface LocationsFieldRefs {
    readonly user_id: FieldRef<"Locations", 'Int'>
    readonly longtitude: FieldRef<"Locations", 'String'>
    readonly latitude: FieldRef<"Locations", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Locations findUnique
   */
  export type LocationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locations
     */
    select?: LocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationsInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where: LocationsWhereUniqueInput
  }


  /**
   * Locations findUniqueOrThrow
   */
  export type LocationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locations
     */
    select?: LocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationsInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where: LocationsWhereUniqueInput
  }


  /**
   * Locations findFirst
   */
  export type LocationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locations
     */
    select?: LocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationsInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationsOrderByWithRelationInput | LocationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationsScalarFieldEnum | LocationsScalarFieldEnum[]
  }


  /**
   * Locations findFirstOrThrow
   */
  export type LocationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locations
     */
    select?: LocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationsInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationsOrderByWithRelationInput | LocationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationsScalarFieldEnum | LocationsScalarFieldEnum[]
  }


  /**
   * Locations findMany
   */
  export type LocationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locations
     */
    select?: LocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationsInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationsOrderByWithRelationInput | LocationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationsScalarFieldEnum | LocationsScalarFieldEnum[]
  }


  /**
   * Locations create
   */
  export type LocationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locations
     */
    select?: LocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationsInclude<ExtArgs> | null
    /**
     * The data needed to create a Locations.
     */
    data: XOR<LocationsCreateInput, LocationsUncheckedCreateInput>
  }


  /**
   * Locations createMany
   */
  export type LocationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationsCreateManyInput | LocationsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Locations update
   */
  export type LocationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locations
     */
    select?: LocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationsInclude<ExtArgs> | null
    /**
     * The data needed to update a Locations.
     */
    data: XOR<LocationsUpdateInput, LocationsUncheckedUpdateInput>
    /**
     * Choose, which Locations to update.
     */
    where: LocationsWhereUniqueInput
  }


  /**
   * Locations updateMany
   */
  export type LocationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationsUpdateManyMutationInput, LocationsUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationsWhereInput
  }


  /**
   * Locations upsert
   */
  export type LocationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locations
     */
    select?: LocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationsInclude<ExtArgs> | null
    /**
     * The filter to search for the Locations to update in case it exists.
     */
    where: LocationsWhereUniqueInput
    /**
     * In case the Locations found by the `where` argument doesn't exist, create a new Locations with this data.
     */
    create: XOR<LocationsCreateInput, LocationsUncheckedCreateInput>
    /**
     * In case the Locations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationsUpdateInput, LocationsUncheckedUpdateInput>
  }


  /**
   * Locations delete
   */
  export type LocationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locations
     */
    select?: LocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationsInclude<ExtArgs> | null
    /**
     * Filter which Locations to delete.
     */
    where: LocationsWhereUniqueInput
  }


  /**
   * Locations deleteMany
   */
  export type LocationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationsWhereInput
  }


  /**
   * Locations without action
   */
  export type LocationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locations
     */
    select?: LocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationsInclude<ExtArgs> | null
  }



  /**
   * Model FavouriteItems
   */

  export type AggregateFavouriteItems = {
    _count: FavouriteItemsCountAggregateOutputType | null
    _avg: FavouriteItemsAvgAggregateOutputType | null
    _sum: FavouriteItemsSumAggregateOutputType | null
    _min: FavouriteItemsMinAggregateOutputType | null
    _max: FavouriteItemsMaxAggregateOutputType | null
  }

  export type FavouriteItemsAvgAggregateOutputType = {
    user_id: number | null
    items_id: number | null
  }

  export type FavouriteItemsSumAggregateOutputType = {
    user_id: number | null
    items_id: number | null
  }

  export type FavouriteItemsMinAggregateOutputType = {
    user_id: number | null
    items_id: number | null
  }

  export type FavouriteItemsMaxAggregateOutputType = {
    user_id: number | null
    items_id: number | null
  }

  export type FavouriteItemsCountAggregateOutputType = {
    user_id: number
    items_id: number
    _all: number
  }


  export type FavouriteItemsAvgAggregateInputType = {
    user_id?: true
    items_id?: true
  }

  export type FavouriteItemsSumAggregateInputType = {
    user_id?: true
    items_id?: true
  }

  export type FavouriteItemsMinAggregateInputType = {
    user_id?: true
    items_id?: true
  }

  export type FavouriteItemsMaxAggregateInputType = {
    user_id?: true
    items_id?: true
  }

  export type FavouriteItemsCountAggregateInputType = {
    user_id?: true
    items_id?: true
    _all?: true
  }

  export type FavouriteItemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavouriteItems to aggregate.
     */
    where?: FavouriteItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavouriteItems to fetch.
     */
    orderBy?: FavouriteItemsOrderByWithRelationInput | FavouriteItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavouriteItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavouriteItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavouriteItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FavouriteItems
    **/
    _count?: true | FavouriteItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavouriteItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavouriteItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavouriteItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavouriteItemsMaxAggregateInputType
  }

  export type GetFavouriteItemsAggregateType<T extends FavouriteItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateFavouriteItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavouriteItems[P]>
      : GetScalarType<T[P], AggregateFavouriteItems[P]>
  }




  export type FavouriteItemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavouriteItemsWhereInput
    orderBy?: FavouriteItemsOrderByWithAggregationInput | FavouriteItemsOrderByWithAggregationInput[]
    by: FavouriteItemsScalarFieldEnum[] | FavouriteItemsScalarFieldEnum
    having?: FavouriteItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavouriteItemsCountAggregateInputType | true
    _avg?: FavouriteItemsAvgAggregateInputType
    _sum?: FavouriteItemsSumAggregateInputType
    _min?: FavouriteItemsMinAggregateInputType
    _max?: FavouriteItemsMaxAggregateInputType
  }

  export type FavouriteItemsGroupByOutputType = {
    user_id: number
    items_id: number
    _count: FavouriteItemsCountAggregateOutputType | null
    _avg: FavouriteItemsAvgAggregateOutputType | null
    _sum: FavouriteItemsSumAggregateOutputType | null
    _min: FavouriteItemsMinAggregateOutputType | null
    _max: FavouriteItemsMaxAggregateOutputType | null
  }

  type GetFavouriteItemsGroupByPayload<T extends FavouriteItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavouriteItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavouriteItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavouriteItemsGroupByOutputType[P]>
            : GetScalarType<T[P], FavouriteItemsGroupByOutputType[P]>
        }
      >
    >


  export type FavouriteItemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    items_id?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Items?: boolean | ItemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favouriteItems"]>

  export type FavouriteItemsSelectScalar = {
    user_id?: boolean
    items_id?: boolean
  }

  export type FavouriteItemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Items?: boolean | ItemsDefaultArgs<ExtArgs>
  }


  export type $FavouriteItemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FavouriteItems"
    objects: {
      User: Prisma.$UsersPayload<ExtArgs>
      Items: Prisma.$ItemsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      items_id: number
    }, ExtArgs["result"]["favouriteItems"]>
    composites: {}
  }


  type FavouriteItemsGetPayload<S extends boolean | null | undefined | FavouriteItemsDefaultArgs> = $Result.GetResult<Prisma.$FavouriteItemsPayload, S>

  type FavouriteItemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavouriteItemsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavouriteItemsCountAggregateInputType | true
    }

  export interface FavouriteItemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FavouriteItems'], meta: { name: 'FavouriteItems' } }
    /**
     * Find zero or one FavouriteItems that matches the filter.
     * @param {FavouriteItemsFindUniqueArgs} args - Arguments to find a FavouriteItems
     * @example
     * // Get one FavouriteItems
     * const favouriteItems = await prisma.favouriteItems.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FavouriteItemsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FavouriteItemsFindUniqueArgs<ExtArgs>>
    ): Prisma__FavouriteItemsClient<$Result.GetResult<Prisma.$FavouriteItemsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FavouriteItems that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FavouriteItemsFindUniqueOrThrowArgs} args - Arguments to find a FavouriteItems
     * @example
     * // Get one FavouriteItems
     * const favouriteItems = await prisma.favouriteItems.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FavouriteItemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouriteItemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FavouriteItemsClient<$Result.GetResult<Prisma.$FavouriteItemsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FavouriteItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteItemsFindFirstArgs} args - Arguments to find a FavouriteItems
     * @example
     * // Get one FavouriteItems
     * const favouriteItems = await prisma.favouriteItems.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FavouriteItemsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouriteItemsFindFirstArgs<ExtArgs>>
    ): Prisma__FavouriteItemsClient<$Result.GetResult<Prisma.$FavouriteItemsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FavouriteItems that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteItemsFindFirstOrThrowArgs} args - Arguments to find a FavouriteItems
     * @example
     * // Get one FavouriteItems
     * const favouriteItems = await prisma.favouriteItems.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FavouriteItemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouriteItemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FavouriteItemsClient<$Result.GetResult<Prisma.$FavouriteItemsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FavouriteItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteItemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavouriteItems
     * const favouriteItems = await prisma.favouriteItems.findMany()
     * 
     * // Get first 10 FavouriteItems
     * const favouriteItems = await prisma.favouriteItems.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const favouriteItemsWithUser_idOnly = await prisma.favouriteItems.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends FavouriteItemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouriteItemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavouriteItemsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FavouriteItems.
     * @param {FavouriteItemsCreateArgs} args - Arguments to create a FavouriteItems.
     * @example
     * // Create one FavouriteItems
     * const FavouriteItems = await prisma.favouriteItems.create({
     *   data: {
     *     // ... data to create a FavouriteItems
     *   }
     * })
     * 
    **/
    create<T extends FavouriteItemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FavouriteItemsCreateArgs<ExtArgs>>
    ): Prisma__FavouriteItemsClient<$Result.GetResult<Prisma.$FavouriteItemsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FavouriteItems.
     *     @param {FavouriteItemsCreateManyArgs} args - Arguments to create many FavouriteItems.
     *     @example
     *     // Create many FavouriteItems
     *     const favouriteItems = await prisma.favouriteItems.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FavouriteItemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouriteItemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FavouriteItems.
     * @param {FavouriteItemsDeleteArgs} args - Arguments to delete one FavouriteItems.
     * @example
     * // Delete one FavouriteItems
     * const FavouriteItems = await prisma.favouriteItems.delete({
     *   where: {
     *     // ... filter to delete one FavouriteItems
     *   }
     * })
     * 
    **/
    delete<T extends FavouriteItemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FavouriteItemsDeleteArgs<ExtArgs>>
    ): Prisma__FavouriteItemsClient<$Result.GetResult<Prisma.$FavouriteItemsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FavouriteItems.
     * @param {FavouriteItemsUpdateArgs} args - Arguments to update one FavouriteItems.
     * @example
     * // Update one FavouriteItems
     * const favouriteItems = await prisma.favouriteItems.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FavouriteItemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FavouriteItemsUpdateArgs<ExtArgs>>
    ): Prisma__FavouriteItemsClient<$Result.GetResult<Prisma.$FavouriteItemsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FavouriteItems.
     * @param {FavouriteItemsDeleteManyArgs} args - Arguments to filter FavouriteItems to delete.
     * @example
     * // Delete a few FavouriteItems
     * const { count } = await prisma.favouriteItems.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FavouriteItemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouriteItemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavouriteItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavouriteItems
     * const favouriteItems = await prisma.favouriteItems.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FavouriteItemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FavouriteItemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FavouriteItems.
     * @param {FavouriteItemsUpsertArgs} args - Arguments to update or create a FavouriteItems.
     * @example
     * // Update or create a FavouriteItems
     * const favouriteItems = await prisma.favouriteItems.upsert({
     *   create: {
     *     // ... data to create a FavouriteItems
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavouriteItems we want to update
     *   }
     * })
    **/
    upsert<T extends FavouriteItemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FavouriteItemsUpsertArgs<ExtArgs>>
    ): Prisma__FavouriteItemsClient<$Result.GetResult<Prisma.$FavouriteItemsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FavouriteItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteItemsCountArgs} args - Arguments to filter FavouriteItems to count.
     * @example
     * // Count the number of FavouriteItems
     * const count = await prisma.favouriteItems.count({
     *   where: {
     *     // ... the filter for the FavouriteItems we want to count
     *   }
     * })
    **/
    count<T extends FavouriteItemsCountArgs>(
      args?: Subset<T, FavouriteItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavouriteItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavouriteItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavouriteItemsAggregateArgs>(args: Subset<T, FavouriteItemsAggregateArgs>): Prisma.PrismaPromise<GetFavouriteItemsAggregateType<T>>

    /**
     * Group by FavouriteItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavouriteItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavouriteItemsGroupByArgs['orderBy'] }
        : { orderBy?: FavouriteItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavouriteItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavouriteItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FavouriteItems model
   */
  readonly fields: FavouriteItemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FavouriteItems.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavouriteItemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Items<T extends ItemsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemsDefaultArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FavouriteItems model
   */ 
  interface FavouriteItemsFieldRefs {
    readonly user_id: FieldRef<"FavouriteItems", 'Int'>
    readonly items_id: FieldRef<"FavouriteItems", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * FavouriteItems findUnique
   */
  export type FavouriteItemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteItems
     */
    select?: FavouriteItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteItemsInclude<ExtArgs> | null
    /**
     * Filter, which FavouriteItems to fetch.
     */
    where: FavouriteItemsWhereUniqueInput
  }


  /**
   * FavouriteItems findUniqueOrThrow
   */
  export type FavouriteItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteItems
     */
    select?: FavouriteItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteItemsInclude<ExtArgs> | null
    /**
     * Filter, which FavouriteItems to fetch.
     */
    where: FavouriteItemsWhereUniqueInput
  }


  /**
   * FavouriteItems findFirst
   */
  export type FavouriteItemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteItems
     */
    select?: FavouriteItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteItemsInclude<ExtArgs> | null
    /**
     * Filter, which FavouriteItems to fetch.
     */
    where?: FavouriteItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavouriteItems to fetch.
     */
    orderBy?: FavouriteItemsOrderByWithRelationInput | FavouriteItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavouriteItems.
     */
    cursor?: FavouriteItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavouriteItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavouriteItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavouriteItems.
     */
    distinct?: FavouriteItemsScalarFieldEnum | FavouriteItemsScalarFieldEnum[]
  }


  /**
   * FavouriteItems findFirstOrThrow
   */
  export type FavouriteItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteItems
     */
    select?: FavouriteItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteItemsInclude<ExtArgs> | null
    /**
     * Filter, which FavouriteItems to fetch.
     */
    where?: FavouriteItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavouriteItems to fetch.
     */
    orderBy?: FavouriteItemsOrderByWithRelationInput | FavouriteItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavouriteItems.
     */
    cursor?: FavouriteItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavouriteItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavouriteItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavouriteItems.
     */
    distinct?: FavouriteItemsScalarFieldEnum | FavouriteItemsScalarFieldEnum[]
  }


  /**
   * FavouriteItems findMany
   */
  export type FavouriteItemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteItems
     */
    select?: FavouriteItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteItemsInclude<ExtArgs> | null
    /**
     * Filter, which FavouriteItems to fetch.
     */
    where?: FavouriteItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavouriteItems to fetch.
     */
    orderBy?: FavouriteItemsOrderByWithRelationInput | FavouriteItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FavouriteItems.
     */
    cursor?: FavouriteItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavouriteItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavouriteItems.
     */
    skip?: number
    distinct?: FavouriteItemsScalarFieldEnum | FavouriteItemsScalarFieldEnum[]
  }


  /**
   * FavouriteItems create
   */
  export type FavouriteItemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteItems
     */
    select?: FavouriteItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteItemsInclude<ExtArgs> | null
    /**
     * The data needed to create a FavouriteItems.
     */
    data: XOR<FavouriteItemsCreateInput, FavouriteItemsUncheckedCreateInput>
  }


  /**
   * FavouriteItems createMany
   */
  export type FavouriteItemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FavouriteItems.
     */
    data: FavouriteItemsCreateManyInput | FavouriteItemsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * FavouriteItems update
   */
  export type FavouriteItemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteItems
     */
    select?: FavouriteItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteItemsInclude<ExtArgs> | null
    /**
     * The data needed to update a FavouriteItems.
     */
    data: XOR<FavouriteItemsUpdateInput, FavouriteItemsUncheckedUpdateInput>
    /**
     * Choose, which FavouriteItems to update.
     */
    where: FavouriteItemsWhereUniqueInput
  }


  /**
   * FavouriteItems updateMany
   */
  export type FavouriteItemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FavouriteItems.
     */
    data: XOR<FavouriteItemsUpdateManyMutationInput, FavouriteItemsUncheckedUpdateManyInput>
    /**
     * Filter which FavouriteItems to update
     */
    where?: FavouriteItemsWhereInput
  }


  /**
   * FavouriteItems upsert
   */
  export type FavouriteItemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteItems
     */
    select?: FavouriteItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteItemsInclude<ExtArgs> | null
    /**
     * The filter to search for the FavouriteItems to update in case it exists.
     */
    where: FavouriteItemsWhereUniqueInput
    /**
     * In case the FavouriteItems found by the `where` argument doesn't exist, create a new FavouriteItems with this data.
     */
    create: XOR<FavouriteItemsCreateInput, FavouriteItemsUncheckedCreateInput>
    /**
     * In case the FavouriteItems was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavouriteItemsUpdateInput, FavouriteItemsUncheckedUpdateInput>
  }


  /**
   * FavouriteItems delete
   */
  export type FavouriteItemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteItems
     */
    select?: FavouriteItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteItemsInclude<ExtArgs> | null
    /**
     * Filter which FavouriteItems to delete.
     */
    where: FavouriteItemsWhereUniqueInput
  }


  /**
   * FavouriteItems deleteMany
   */
  export type FavouriteItemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavouriteItems to delete
     */
    where?: FavouriteItemsWhereInput
  }


  /**
   * FavouriteItems without action
   */
  export type FavouriteItemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteItems
     */
    select?: FavouriteItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteItemsInclude<ExtArgs> | null
  }



  /**
   * Model Items
   */

  export type AggregateItems = {
    _count: ItemsCountAggregateOutputType | null
    _avg: ItemsAvgAggregateOutputType | null
    _sum: ItemsSumAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  export type ItemsAvgAggregateOutputType = {
    id: number | null
    users_id: number | null
    subCategories_id: number | null
    price: Decimal | null
  }

  export type ItemsSumAggregateOutputType = {
    id: number | null
    users_id: number | null
    subCategories_id: number | null
    price: Decimal | null
  }

  export type ItemsMinAggregateOutputType = {
    id: number | null
    users_id: number | null
    subCategories_id: number | null
    name: string | null
    description: string | null
    photo: string | null
    price: Decimal | null
    for_sale: boolean | null
    exchange: boolean | null
    visibility: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ItemsMaxAggregateOutputType = {
    id: number | null
    users_id: number | null
    subCategories_id: number | null
    name: string | null
    description: string | null
    photo: string | null
    price: Decimal | null
    for_sale: boolean | null
    exchange: boolean | null
    visibility: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ItemsCountAggregateOutputType = {
    id: number
    users_id: number
    subCategories_id: number
    name: number
    description: number
    photo: number
    price: number
    for_sale: number
    exchange: number
    visibility: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ItemsAvgAggregateInputType = {
    id?: true
    users_id?: true
    subCategories_id?: true
    price?: true
  }

  export type ItemsSumAggregateInputType = {
    id?: true
    users_id?: true
    subCategories_id?: true
    price?: true
  }

  export type ItemsMinAggregateInputType = {
    id?: true
    users_id?: true
    subCategories_id?: true
    name?: true
    description?: true
    photo?: true
    price?: true
    for_sale?: true
    exchange?: true
    visibility?: true
    created_at?: true
    updated_at?: true
  }

  export type ItemsMaxAggregateInputType = {
    id?: true
    users_id?: true
    subCategories_id?: true
    name?: true
    description?: true
    photo?: true
    price?: true
    for_sale?: true
    exchange?: true
    visibility?: true
    created_at?: true
    updated_at?: true
  }

  export type ItemsCountAggregateInputType = {
    id?: true
    users_id?: true
    subCategories_id?: true
    name?: true
    description?: true
    photo?: true
    price?: true
    for_sale?: true
    exchange?: true
    visibility?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ItemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to aggregate.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemsMaxAggregateInputType
  }

  export type GetItemsAggregateType<T extends ItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItems[P]>
      : GetScalarType<T[P], AggregateItems[P]>
  }




  export type ItemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemsWhereInput
    orderBy?: ItemsOrderByWithAggregationInput | ItemsOrderByWithAggregationInput[]
    by: ItemsScalarFieldEnum[] | ItemsScalarFieldEnum
    having?: ItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemsCountAggregateInputType | true
    _avg?: ItemsAvgAggregateInputType
    _sum?: ItemsSumAggregateInputType
    _min?: ItemsMinAggregateInputType
    _max?: ItemsMaxAggregateInputType
  }

  export type ItemsGroupByOutputType = {
    id: number
    users_id: number
    subCategories_id: number
    name: string
    description: string
    photo: string
    price: Decimal
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at: Date
    updated_at: Date
    _count: ItemsCountAggregateOutputType | null
    _avg: ItemsAvgAggregateOutputType | null
    _sum: ItemsSumAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  type GetItemsGroupByPayload<T extends ItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemsGroupByOutputType[P]>
            : GetScalarType<T[P], ItemsGroupByOutputType[P]>
        }
      >
    >


  export type ItemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    users_id?: boolean
    subCategories_id?: boolean
    name?: boolean
    description?: boolean
    photo?: boolean
    price?: boolean
    for_sale?: boolean
    exchange?: boolean
    visibility?: boolean
    created_at?: boolean
    updated_at?: boolean
    Users?: boolean | UsersDefaultArgs<ExtArgs>
    SubCategories?: boolean | SubCategoriesDefaultArgs<ExtArgs>
    ExchangeTo?: boolean | Items$ExchangeToArgs<ExtArgs>
    FavouriteItems?: boolean | Items$FavouriteItemsArgs<ExtArgs>
    Notifications?: boolean | Items$NotificationsArgs<ExtArgs>
    _count?: boolean | ItemsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["items"]>

  export type ItemsSelectScalar = {
    id?: boolean
    users_id?: boolean
    subCategories_id?: boolean
    name?: boolean
    description?: boolean
    photo?: boolean
    price?: boolean
    for_sale?: boolean
    exchange?: boolean
    visibility?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ItemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | UsersDefaultArgs<ExtArgs>
    SubCategories?: boolean | SubCategoriesDefaultArgs<ExtArgs>
    ExchangeTo?: boolean | Items$ExchangeToArgs<ExtArgs>
    FavouriteItems?: boolean | Items$FavouriteItemsArgs<ExtArgs>
    Notifications?: boolean | Items$NotificationsArgs<ExtArgs>
    _count?: boolean | ItemsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ItemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Items"
    objects: {
      Users: Prisma.$UsersPayload<ExtArgs>
      SubCategories: Prisma.$SubCategoriesPayload<ExtArgs>
      ExchangeTo: Prisma.$ExchangeToPayload<ExtArgs>[]
      FavouriteItems: Prisma.$FavouriteItemsPayload<ExtArgs>[]
      Notifications: Prisma.$NotificationsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      users_id: number
      subCategories_id: number
      name: string
      description: string
      photo: string
      price: Prisma.Decimal
      for_sale: boolean
      exchange: boolean
      visibility: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["items"]>
    composites: {}
  }


  type ItemsGetPayload<S extends boolean | null | undefined | ItemsDefaultArgs> = $Result.GetResult<Prisma.$ItemsPayload, S>

  type ItemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ItemsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ItemsCountAggregateInputType | true
    }

  export interface ItemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Items'], meta: { name: 'Items' } }
    /**
     * Find zero or one Items that matches the filter.
     * @param {ItemsFindUniqueArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ItemsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ItemsFindUniqueArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Items that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ItemsFindUniqueOrThrowArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ItemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindFirstArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ItemsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemsFindFirstArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Items that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindFirstOrThrowArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ItemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.items.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemsWithIdOnly = await prisma.items.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ItemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Items.
     * @param {ItemsCreateArgs} args - Arguments to create a Items.
     * @example
     * // Create one Items
     * const Items = await prisma.items.create({
     *   data: {
     *     // ... data to create a Items
     *   }
     * })
     * 
    **/
    create<T extends ItemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ItemsCreateArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Items.
     *     @param {ItemsCreateManyArgs} args - Arguments to create many Items.
     *     @example
     *     // Create many Items
     *     const items = await prisma.items.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ItemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Items.
     * @param {ItemsDeleteArgs} args - Arguments to delete one Items.
     * @example
     * // Delete one Items
     * const Items = await prisma.items.delete({
     *   where: {
     *     // ... filter to delete one Items
     *   }
     * })
     * 
    **/
    delete<T extends ItemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ItemsDeleteArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Items.
     * @param {ItemsUpdateArgs} args - Arguments to update one Items.
     * @example
     * // Update one Items
     * const items = await prisma.items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ItemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ItemsUpdateArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Items.
     * @param {ItemsDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ItemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const items = await prisma.items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ItemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ItemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Items.
     * @param {ItemsUpsertArgs} args - Arguments to update or create a Items.
     * @example
     * // Update or create a Items
     * const items = await prisma.items.upsert({
     *   create: {
     *     // ... data to create a Items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Items we want to update
     *   }
     * })
    **/
    upsert<T extends ItemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ItemsUpsertArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.items.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemsCountArgs>(
      args?: Subset<T, ItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemsAggregateArgs>(args: Subset<T, ItemsAggregateArgs>): Prisma.PrismaPromise<GetItemsAggregateType<T>>

    /**
     * Group by Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemsGroupByArgs['orderBy'] }
        : { orderBy?: ItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Items model
   */
  readonly fields: ItemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    SubCategories<T extends SubCategoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubCategoriesDefaultArgs<ExtArgs>>): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    ExchangeTo<T extends Items$ExchangeToArgs<ExtArgs> = {}>(args?: Subset<T, Items$ExchangeToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExchangeToPayload<ExtArgs>, T, 'findMany'> | Null>;

    FavouriteItems<T extends Items$FavouriteItemsArgs<ExtArgs> = {}>(args?: Subset<T, Items$FavouriteItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavouriteItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Notifications<T extends Items$NotificationsArgs<ExtArgs> = {}>(args?: Subset<T, Items$NotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Items model
   */ 
  interface ItemsFieldRefs {
    readonly id: FieldRef<"Items", 'Int'>
    readonly users_id: FieldRef<"Items", 'Int'>
    readonly subCategories_id: FieldRef<"Items", 'Int'>
    readonly name: FieldRef<"Items", 'String'>
    readonly description: FieldRef<"Items", 'String'>
    readonly photo: FieldRef<"Items", 'String'>
    readonly price: FieldRef<"Items", 'Decimal'>
    readonly for_sale: FieldRef<"Items", 'Boolean'>
    readonly exchange: FieldRef<"Items", 'Boolean'>
    readonly visibility: FieldRef<"Items", 'Boolean'>
    readonly created_at: FieldRef<"Items", 'DateTime'>
    readonly updated_at: FieldRef<"Items", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Items findUnique
   */
  export type ItemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where: ItemsWhereUniqueInput
  }


  /**
   * Items findUniqueOrThrow
   */
  export type ItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where: ItemsWhereUniqueInput
  }


  /**
   * Items findFirst
   */
  export type ItemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }


  /**
   * Items findFirstOrThrow
   */
  export type ItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }


  /**
   * Items findMany
   */
  export type ItemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }


  /**
   * Items create
   */
  export type ItemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * The data needed to create a Items.
     */
    data: XOR<ItemsCreateInput, ItemsUncheckedCreateInput>
  }


  /**
   * Items createMany
   */
  export type ItemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemsCreateManyInput | ItemsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Items update
   */
  export type ItemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * The data needed to update a Items.
     */
    data: XOR<ItemsUpdateInput, ItemsUncheckedUpdateInput>
    /**
     * Choose, which Items to update.
     */
    where: ItemsWhereUniqueInput
  }


  /**
   * Items updateMany
   */
  export type ItemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemsUpdateManyMutationInput, ItemsUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemsWhereInput
  }


  /**
   * Items upsert
   */
  export type ItemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * The filter to search for the Items to update in case it exists.
     */
    where: ItemsWhereUniqueInput
    /**
     * In case the Items found by the `where` argument doesn't exist, create a new Items with this data.
     */
    create: XOR<ItemsCreateInput, ItemsUncheckedCreateInput>
    /**
     * In case the Items was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemsUpdateInput, ItemsUncheckedUpdateInput>
  }


  /**
   * Items delete
   */
  export type ItemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter which Items to delete.
     */
    where: ItemsWhereUniqueInput
  }


  /**
   * Items deleteMany
   */
  export type ItemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemsWhereInput
  }


  /**
   * Items.ExchangeTo
   */
  export type Items$ExchangeToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeTo
     */
    select?: ExchangeToSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExchangeToInclude<ExtArgs> | null
    where?: ExchangeToWhereInput
    orderBy?: ExchangeToOrderByWithRelationInput | ExchangeToOrderByWithRelationInput[]
    cursor?: ExchangeToWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExchangeToScalarFieldEnum | ExchangeToScalarFieldEnum[]
  }


  /**
   * Items.FavouriteItems
   */
  export type Items$FavouriteItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteItems
     */
    select?: FavouriteItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteItemsInclude<ExtArgs> | null
    where?: FavouriteItemsWhereInput
    orderBy?: FavouriteItemsOrderByWithRelationInput | FavouriteItemsOrderByWithRelationInput[]
    cursor?: FavouriteItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavouriteItemsScalarFieldEnum | FavouriteItemsScalarFieldEnum[]
  }


  /**
   * Items.Notifications
   */
  export type Items$NotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    where?: NotificationsWhereInput
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    cursor?: NotificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Items without action
   */
  export type ItemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
  }



  /**
   * Model SubCategories
   */

  export type AggregateSubCategories = {
    _count: SubCategoriesCountAggregateOutputType | null
    _avg: SubCategoriesAvgAggregateOutputType | null
    _sum: SubCategoriesSumAggregateOutputType | null
    _min: SubCategoriesMinAggregateOutputType | null
    _max: SubCategoriesMaxAggregateOutputType | null
  }

  export type SubCategoriesAvgAggregateOutputType = {
    id: number | null
    category_id: number | null
    nr: number | null
  }

  export type SubCategoriesSumAggregateOutputType = {
    id: number | null
    category_id: number | null
    nr: number | null
  }

  export type SubCategoriesMinAggregateOutputType = {
    id: number | null
    category_id: number | null
    title: string | null
    nr: number | null
  }

  export type SubCategoriesMaxAggregateOutputType = {
    id: number | null
    category_id: number | null
    title: string | null
    nr: number | null
  }

  export type SubCategoriesCountAggregateOutputType = {
    id: number
    category_id: number
    title: number
    nr: number
    _all: number
  }


  export type SubCategoriesAvgAggregateInputType = {
    id?: true
    category_id?: true
    nr?: true
  }

  export type SubCategoriesSumAggregateInputType = {
    id?: true
    category_id?: true
    nr?: true
  }

  export type SubCategoriesMinAggregateInputType = {
    id?: true
    category_id?: true
    title?: true
    nr?: true
  }

  export type SubCategoriesMaxAggregateInputType = {
    id?: true
    category_id?: true
    title?: true
    nr?: true
  }

  export type SubCategoriesCountAggregateInputType = {
    id?: true
    category_id?: true
    title?: true
    nr?: true
    _all?: true
  }

  export type SubCategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubCategories to aggregate.
     */
    where?: SubCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategories to fetch.
     */
    orderBy?: SubCategoriesOrderByWithRelationInput | SubCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubCategories
    **/
    _count?: true | SubCategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubCategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubCategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubCategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubCategoriesMaxAggregateInputType
  }

  export type GetSubCategoriesAggregateType<T extends SubCategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateSubCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubCategories[P]>
      : GetScalarType<T[P], AggregateSubCategories[P]>
  }




  export type SubCategoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubCategoriesWhereInput
    orderBy?: SubCategoriesOrderByWithAggregationInput | SubCategoriesOrderByWithAggregationInput[]
    by: SubCategoriesScalarFieldEnum[] | SubCategoriesScalarFieldEnum
    having?: SubCategoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubCategoriesCountAggregateInputType | true
    _avg?: SubCategoriesAvgAggregateInputType
    _sum?: SubCategoriesSumAggregateInputType
    _min?: SubCategoriesMinAggregateInputType
    _max?: SubCategoriesMaxAggregateInputType
  }

  export type SubCategoriesGroupByOutputType = {
    id: number
    category_id: number
    title: string
    nr: number | null
    _count: SubCategoriesCountAggregateOutputType | null
    _avg: SubCategoriesAvgAggregateOutputType | null
    _sum: SubCategoriesSumAggregateOutputType | null
    _min: SubCategoriesMinAggregateOutputType | null
    _max: SubCategoriesMaxAggregateOutputType | null
  }

  type GetSubCategoriesGroupByPayload<T extends SubCategoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubCategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubCategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubCategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], SubCategoriesGroupByOutputType[P]>
        }
      >
    >


  export type SubCategoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category_id?: boolean
    title?: boolean
    nr?: boolean
    Category?: boolean | CategoriesDefaultArgs<ExtArgs>
    Items?: boolean | SubCategories$ItemsArgs<ExtArgs>
    ExchangeTo?: boolean | SubCategories$ExchangeToArgs<ExtArgs>
    _count?: boolean | SubCategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subCategories"]>

  export type SubCategoriesSelectScalar = {
    id?: boolean
    category_id?: boolean
    title?: boolean
    nr?: boolean
  }

  export type SubCategoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Category?: boolean | CategoriesDefaultArgs<ExtArgs>
    Items?: boolean | SubCategories$ItemsArgs<ExtArgs>
    ExchangeTo?: boolean | SubCategories$ExchangeToArgs<ExtArgs>
    _count?: boolean | SubCategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SubCategoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubCategories"
    objects: {
      Category: Prisma.$CategoriesPayload<ExtArgs>
      Items: Prisma.$ItemsPayload<ExtArgs>[]
      ExchangeTo: Prisma.$ExchangeToPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      category_id: number
      title: string
      nr: number | null
    }, ExtArgs["result"]["subCategories"]>
    composites: {}
  }


  type SubCategoriesGetPayload<S extends boolean | null | undefined | SubCategoriesDefaultArgs> = $Result.GetResult<Prisma.$SubCategoriesPayload, S>

  type SubCategoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubCategoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubCategoriesCountAggregateInputType | true
    }

  export interface SubCategoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubCategories'], meta: { name: 'SubCategories' } }
    /**
     * Find zero or one SubCategories that matches the filter.
     * @param {SubCategoriesFindUniqueArgs} args - Arguments to find a SubCategories
     * @example
     * // Get one SubCategories
     * const subCategories = await prisma.subCategories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubCategoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubCategoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SubCategories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubCategoriesFindUniqueOrThrowArgs} args - Arguments to find a SubCategories
     * @example
     * // Get one SubCategories
     * const subCategories = await prisma.subCategories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubCategoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubCategoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SubCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoriesFindFirstArgs} args - Arguments to find a SubCategories
     * @example
     * // Get one SubCategories
     * const subCategories = await prisma.subCategories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubCategoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubCategoriesFindFirstArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SubCategories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoriesFindFirstOrThrowArgs} args - Arguments to find a SubCategories
     * @example
     * // Get one SubCategories
     * const subCategories = await prisma.subCategories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubCategoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubCategoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SubCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubCategories
     * const subCategories = await prisma.subCategories.findMany()
     * 
     * // Get first 10 SubCategories
     * const subCategories = await prisma.subCategories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subCategoriesWithIdOnly = await prisma.subCategories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubCategoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubCategoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SubCategories.
     * @param {SubCategoriesCreateArgs} args - Arguments to create a SubCategories.
     * @example
     * // Create one SubCategories
     * const SubCategories = await prisma.subCategories.create({
     *   data: {
     *     // ... data to create a SubCategories
     *   }
     * })
     * 
    **/
    create<T extends SubCategoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubCategoriesCreateArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SubCategories.
     *     @param {SubCategoriesCreateManyArgs} args - Arguments to create many SubCategories.
     *     @example
     *     // Create many SubCategories
     *     const subCategories = await prisma.subCategories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubCategoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubCategoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SubCategories.
     * @param {SubCategoriesDeleteArgs} args - Arguments to delete one SubCategories.
     * @example
     * // Delete one SubCategories
     * const SubCategories = await prisma.subCategories.delete({
     *   where: {
     *     // ... filter to delete one SubCategories
     *   }
     * })
     * 
    **/
    delete<T extends SubCategoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubCategoriesDeleteArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SubCategories.
     * @param {SubCategoriesUpdateArgs} args - Arguments to update one SubCategories.
     * @example
     * // Update one SubCategories
     * const subCategories = await prisma.subCategories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubCategoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubCategoriesUpdateArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SubCategories.
     * @param {SubCategoriesDeleteManyArgs} args - Arguments to filter SubCategories to delete.
     * @example
     * // Delete a few SubCategories
     * const { count } = await prisma.subCategories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubCategoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubCategoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubCategories
     * const subCategories = await prisma.subCategories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubCategoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubCategoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubCategories.
     * @param {SubCategoriesUpsertArgs} args - Arguments to update or create a SubCategories.
     * @example
     * // Update or create a SubCategories
     * const subCategories = await prisma.subCategories.upsert({
     *   create: {
     *     // ... data to create a SubCategories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubCategories we want to update
     *   }
     * })
    **/
    upsert<T extends SubCategoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubCategoriesUpsertArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoriesCountArgs} args - Arguments to filter SubCategories to count.
     * @example
     * // Count the number of SubCategories
     * const count = await prisma.subCategories.count({
     *   where: {
     *     // ... the filter for the SubCategories we want to count
     *   }
     * })
    **/
    count<T extends SubCategoriesCountArgs>(
      args?: Subset<T, SubCategoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubCategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubCategoriesAggregateArgs>(args: Subset<T, SubCategoriesAggregateArgs>): Prisma.PrismaPromise<GetSubCategoriesAggregateType<T>>

    /**
     * Group by SubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubCategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubCategoriesGroupByArgs['orderBy'] }
        : { orderBy?: SubCategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubCategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubCategories model
   */
  readonly fields: SubCategoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubCategories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubCategoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Category<T extends CategoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoriesDefaultArgs<ExtArgs>>): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Items<T extends SubCategories$ItemsArgs<ExtArgs> = {}>(args?: Subset<T, SubCategories$ItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    ExchangeTo<T extends SubCategories$ExchangeToArgs<ExtArgs> = {}>(args?: Subset<T, SubCategories$ExchangeToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExchangeToPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SubCategories model
   */ 
  interface SubCategoriesFieldRefs {
    readonly id: FieldRef<"SubCategories", 'Int'>
    readonly category_id: FieldRef<"SubCategories", 'Int'>
    readonly title: FieldRef<"SubCategories", 'String'>
    readonly nr: FieldRef<"SubCategories", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * SubCategories findUnique
   */
  export type SubCategoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SubCategories to fetch.
     */
    where: SubCategoriesWhereUniqueInput
  }


  /**
   * SubCategories findUniqueOrThrow
   */
  export type SubCategoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SubCategories to fetch.
     */
    where: SubCategoriesWhereUniqueInput
  }


  /**
   * SubCategories findFirst
   */
  export type SubCategoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SubCategories to fetch.
     */
    where?: SubCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategories to fetch.
     */
    orderBy?: SubCategoriesOrderByWithRelationInput | SubCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubCategories.
     */
    cursor?: SubCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubCategories.
     */
    distinct?: SubCategoriesScalarFieldEnum | SubCategoriesScalarFieldEnum[]
  }


  /**
   * SubCategories findFirstOrThrow
   */
  export type SubCategoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SubCategories to fetch.
     */
    where?: SubCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategories to fetch.
     */
    orderBy?: SubCategoriesOrderByWithRelationInput | SubCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubCategories.
     */
    cursor?: SubCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubCategories.
     */
    distinct?: SubCategoriesScalarFieldEnum | SubCategoriesScalarFieldEnum[]
  }


  /**
   * SubCategories findMany
   */
  export type SubCategoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SubCategories to fetch.
     */
    where?: SubCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategories to fetch.
     */
    orderBy?: SubCategoriesOrderByWithRelationInput | SubCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubCategories.
     */
    cursor?: SubCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategories.
     */
    skip?: number
    distinct?: SubCategoriesScalarFieldEnum | SubCategoriesScalarFieldEnum[]
  }


  /**
   * SubCategories create
   */
  export type SubCategoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a SubCategories.
     */
    data: XOR<SubCategoriesCreateInput, SubCategoriesUncheckedCreateInput>
  }


  /**
   * SubCategories createMany
   */
  export type SubCategoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubCategories.
     */
    data: SubCategoriesCreateManyInput | SubCategoriesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SubCategories update
   */
  export type SubCategoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a SubCategories.
     */
    data: XOR<SubCategoriesUpdateInput, SubCategoriesUncheckedUpdateInput>
    /**
     * Choose, which SubCategories to update.
     */
    where: SubCategoriesWhereUniqueInput
  }


  /**
   * SubCategories updateMany
   */
  export type SubCategoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubCategories.
     */
    data: XOR<SubCategoriesUpdateManyMutationInput, SubCategoriesUncheckedUpdateManyInput>
    /**
     * Filter which SubCategories to update
     */
    where?: SubCategoriesWhereInput
  }


  /**
   * SubCategories upsert
   */
  export type SubCategoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the SubCategories to update in case it exists.
     */
    where: SubCategoriesWhereUniqueInput
    /**
     * In case the SubCategories found by the `where` argument doesn't exist, create a new SubCategories with this data.
     */
    create: XOR<SubCategoriesCreateInput, SubCategoriesUncheckedCreateInput>
    /**
     * In case the SubCategories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubCategoriesUpdateInput, SubCategoriesUncheckedUpdateInput>
  }


  /**
   * SubCategories delete
   */
  export type SubCategoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * Filter which SubCategories to delete.
     */
    where: SubCategoriesWhereUniqueInput
  }


  /**
   * SubCategories deleteMany
   */
  export type SubCategoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubCategories to delete
     */
    where?: SubCategoriesWhereInput
  }


  /**
   * SubCategories.Items
   */
  export type SubCategories$ItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    where?: ItemsWhereInput
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    cursor?: ItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }


  /**
   * SubCategories.ExchangeTo
   */
  export type SubCategories$ExchangeToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeTo
     */
    select?: ExchangeToSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExchangeToInclude<ExtArgs> | null
    where?: ExchangeToWhereInput
    orderBy?: ExchangeToOrderByWithRelationInput | ExchangeToOrderByWithRelationInput[]
    cursor?: ExchangeToWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExchangeToScalarFieldEnum | ExchangeToScalarFieldEnum[]
  }


  /**
   * SubCategories without action
   */
  export type SubCategoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
  }



  /**
   * Model Categories
   */

  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    id: number | null
    nr: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    id: number | null
    nr: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    id: number | null
    title: string | null
    nr: number | null
  }

  export type CategoriesMaxAggregateOutputType = {
    id: number | null
    title: string | null
    nr: number | null
  }

  export type CategoriesCountAggregateOutputType = {
    id: number
    title: number
    nr: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    id?: true
    nr?: true
  }

  export type CategoriesSumAggregateInputType = {
    id?: true
    nr?: true
  }

  export type CategoriesMinAggregateInputType = {
    id?: true
    title?: true
    nr?: true
  }

  export type CategoriesMaxAggregateInputType = {
    id?: true
    title?: true
    nr?: true
  }

  export type CategoriesCountAggregateInputType = {
    id?: true
    title?: true
    nr?: true
    _all?: true
  }

  export type CategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to aggregate.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type CategoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriesWhereInput
    orderBy?: CategoriesOrderByWithAggregationInput | CategoriesOrderByWithAggregationInput[]
    by: CategoriesScalarFieldEnum[] | CategoriesScalarFieldEnum
    having?: CategoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }

  export type CategoriesGroupByOutputType = {
    id: number
    title: string
    nr: number
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends CategoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type CategoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    nr?: boolean
    SubCategories?: boolean | Categories$SubCategoriesArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categories"]>

  export type CategoriesSelectScalar = {
    id?: boolean
    title?: boolean
    nr?: boolean
  }

  export type CategoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SubCategories?: boolean | Categories$SubCategoriesArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categories"
    objects: {
      SubCategories: Prisma.$SubCategoriesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      nr: number
    }, ExtArgs["result"]["categories"]>
    composites: {}
  }


  type CategoriesGetPayload<S extends boolean | null | undefined | CategoriesDefaultArgs> = $Result.GetResult<Prisma.$CategoriesPayload, S>

  type CategoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriesCountAggregateInputType | true
    }

  export interface CategoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categories'], meta: { name: 'Categories' } }
    /**
     * Find zero or one Categories that matches the filter.
     * @param {CategoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesFindFirstArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categories.
     * @param {CategoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
    **/
    create<T extends CategoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesCreateArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {CategoriesCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categories = await prisma.categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {CategoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
    **/
    delete<T extends CategoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesDeleteArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categories.
     * @param {CategoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesUpdateArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {CategoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesUpsertArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoriesCountArgs>(
      args?: Subset<T, CategoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): Prisma.PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriesGroupByArgs['orderBy'] }
        : { orderBy?: CategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categories model
   */
  readonly fields: CategoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    SubCategories<T extends Categories$SubCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Categories$SubCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Categories model
   */ 
  interface CategoriesFieldRefs {
    readonly id: FieldRef<"Categories", 'Int'>
    readonly title: FieldRef<"Categories", 'String'>
    readonly nr: FieldRef<"Categories", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Categories findUnique
   */
  export type CategoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories findUniqueOrThrow
   */
  export type CategoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories findFirst
   */
  export type CategoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * Categories findFirstOrThrow
   */
  export type CategoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * Categories findMany
   */
  export type CategoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * Categories create
   */
  export type CategoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a Categories.
     */
    data: XOR<CategoriesCreateInput, CategoriesUncheckedCreateInput>
  }


  /**
   * Categories createMany
   */
  export type CategoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoriesCreateManyInput | CategoriesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Categories update
   */
  export type CategoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a Categories.
     */
    data: XOR<CategoriesUpdateInput, CategoriesUncheckedUpdateInput>
    /**
     * Choose, which Categories to update.
     */
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories updateMany
   */
  export type CategoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoriesUpdateManyMutationInput, CategoriesUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoriesWhereInput
  }


  /**
   * Categories upsert
   */
  export type CategoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the Categories to update in case it exists.
     */
    where: CategoriesWhereUniqueInput
    /**
     * In case the Categories found by the `where` argument doesn't exist, create a new Categories with this data.
     */
    create: XOR<CategoriesCreateInput, CategoriesUncheckedCreateInput>
    /**
     * In case the Categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriesUpdateInput, CategoriesUncheckedUpdateInput>
  }


  /**
   * Categories delete
   */
  export type CategoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter which Categories to delete.
     */
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories deleteMany
   */
  export type CategoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoriesWhereInput
  }


  /**
   * Categories.SubCategories
   */
  export type Categories$SubCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    where?: SubCategoriesWhereInput
    orderBy?: SubCategoriesOrderByWithRelationInput | SubCategoriesOrderByWithRelationInput[]
    cursor?: SubCategoriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubCategoriesScalarFieldEnum | SubCategoriesScalarFieldEnum[]
  }


  /**
   * Categories without action
   */
  export type CategoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
  }



  /**
   * Model ExchangeTo
   */

  export type AggregateExchangeTo = {
    _count: ExchangeToCountAggregateOutputType | null
    _avg: ExchangeToAvgAggregateOutputType | null
    _sum: ExchangeToSumAggregateOutputType | null
    _min: ExchangeToMinAggregateOutputType | null
    _max: ExchangeToMaxAggregateOutputType | null
  }

  export type ExchangeToAvgAggregateOutputType = {
    id: number | null
    items_id: number | null
    subCategories_id: number | null
  }

  export type ExchangeToSumAggregateOutputType = {
    id: number | null
    items_id: number | null
    subCategories_id: number | null
  }

  export type ExchangeToMinAggregateOutputType = {
    id: number | null
    items_id: number | null
    subCategories_id: number | null
  }

  export type ExchangeToMaxAggregateOutputType = {
    id: number | null
    items_id: number | null
    subCategories_id: number | null
  }

  export type ExchangeToCountAggregateOutputType = {
    id: number
    items_id: number
    subCategories_id: number
    _all: number
  }


  export type ExchangeToAvgAggregateInputType = {
    id?: true
    items_id?: true
    subCategories_id?: true
  }

  export type ExchangeToSumAggregateInputType = {
    id?: true
    items_id?: true
    subCategories_id?: true
  }

  export type ExchangeToMinAggregateInputType = {
    id?: true
    items_id?: true
    subCategories_id?: true
  }

  export type ExchangeToMaxAggregateInputType = {
    id?: true
    items_id?: true
    subCategories_id?: true
  }

  export type ExchangeToCountAggregateInputType = {
    id?: true
    items_id?: true
    subCategories_id?: true
    _all?: true
  }

  export type ExchangeToAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExchangeTo to aggregate.
     */
    where?: ExchangeToWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeTos to fetch.
     */
    orderBy?: ExchangeToOrderByWithRelationInput | ExchangeToOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExchangeToWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeTos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeTos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExchangeTos
    **/
    _count?: true | ExchangeToCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExchangeToAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExchangeToSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExchangeToMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExchangeToMaxAggregateInputType
  }

  export type GetExchangeToAggregateType<T extends ExchangeToAggregateArgs> = {
        [P in keyof T & keyof AggregateExchangeTo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExchangeTo[P]>
      : GetScalarType<T[P], AggregateExchangeTo[P]>
  }




  export type ExchangeToGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExchangeToWhereInput
    orderBy?: ExchangeToOrderByWithAggregationInput | ExchangeToOrderByWithAggregationInput[]
    by: ExchangeToScalarFieldEnum[] | ExchangeToScalarFieldEnum
    having?: ExchangeToScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExchangeToCountAggregateInputType | true
    _avg?: ExchangeToAvgAggregateInputType
    _sum?: ExchangeToSumAggregateInputType
    _min?: ExchangeToMinAggregateInputType
    _max?: ExchangeToMaxAggregateInputType
  }

  export type ExchangeToGroupByOutputType = {
    id: number
    items_id: number
    subCategories_id: number
    _count: ExchangeToCountAggregateOutputType | null
    _avg: ExchangeToAvgAggregateOutputType | null
    _sum: ExchangeToSumAggregateOutputType | null
    _min: ExchangeToMinAggregateOutputType | null
    _max: ExchangeToMaxAggregateOutputType | null
  }

  type GetExchangeToGroupByPayload<T extends ExchangeToGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExchangeToGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExchangeToGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExchangeToGroupByOutputType[P]>
            : GetScalarType<T[P], ExchangeToGroupByOutputType[P]>
        }
      >
    >


  export type ExchangeToSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    items_id?: boolean
    subCategories_id?: boolean
    Item?: boolean | ItemsDefaultArgs<ExtArgs>
    SubCategories?: boolean | SubCategoriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exchangeTo"]>

  export type ExchangeToSelectScalar = {
    id?: boolean
    items_id?: boolean
    subCategories_id?: boolean
  }

  export type ExchangeToInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Item?: boolean | ItemsDefaultArgs<ExtArgs>
    SubCategories?: boolean | SubCategoriesDefaultArgs<ExtArgs>
  }


  export type $ExchangeToPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExchangeTo"
    objects: {
      Item: Prisma.$ItemsPayload<ExtArgs>
      SubCategories: Prisma.$SubCategoriesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      items_id: number
      subCategories_id: number
    }, ExtArgs["result"]["exchangeTo"]>
    composites: {}
  }


  type ExchangeToGetPayload<S extends boolean | null | undefined | ExchangeToDefaultArgs> = $Result.GetResult<Prisma.$ExchangeToPayload, S>

  type ExchangeToCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExchangeToFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExchangeToCountAggregateInputType | true
    }

  export interface ExchangeToDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExchangeTo'], meta: { name: 'ExchangeTo' } }
    /**
     * Find zero or one ExchangeTo that matches the filter.
     * @param {ExchangeToFindUniqueArgs} args - Arguments to find a ExchangeTo
     * @example
     * // Get one ExchangeTo
     * const exchangeTo = await prisma.exchangeTo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExchangeToFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExchangeToFindUniqueArgs<ExtArgs>>
    ): Prisma__ExchangeToClient<$Result.GetResult<Prisma.$ExchangeToPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ExchangeTo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExchangeToFindUniqueOrThrowArgs} args - Arguments to find a ExchangeTo
     * @example
     * // Get one ExchangeTo
     * const exchangeTo = await prisma.exchangeTo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExchangeToFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExchangeToFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExchangeToClient<$Result.GetResult<Prisma.$ExchangeToPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ExchangeTo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeToFindFirstArgs} args - Arguments to find a ExchangeTo
     * @example
     * // Get one ExchangeTo
     * const exchangeTo = await prisma.exchangeTo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExchangeToFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExchangeToFindFirstArgs<ExtArgs>>
    ): Prisma__ExchangeToClient<$Result.GetResult<Prisma.$ExchangeToPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ExchangeTo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeToFindFirstOrThrowArgs} args - Arguments to find a ExchangeTo
     * @example
     * // Get one ExchangeTo
     * const exchangeTo = await prisma.exchangeTo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExchangeToFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExchangeToFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExchangeToClient<$Result.GetResult<Prisma.$ExchangeToPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ExchangeTos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeToFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExchangeTos
     * const exchangeTos = await prisma.exchangeTo.findMany()
     * 
     * // Get first 10 ExchangeTos
     * const exchangeTos = await prisma.exchangeTo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exchangeToWithIdOnly = await prisma.exchangeTo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExchangeToFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExchangeToFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExchangeToPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ExchangeTo.
     * @param {ExchangeToCreateArgs} args - Arguments to create a ExchangeTo.
     * @example
     * // Create one ExchangeTo
     * const ExchangeTo = await prisma.exchangeTo.create({
     *   data: {
     *     // ... data to create a ExchangeTo
     *   }
     * })
     * 
    **/
    create<T extends ExchangeToCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExchangeToCreateArgs<ExtArgs>>
    ): Prisma__ExchangeToClient<$Result.GetResult<Prisma.$ExchangeToPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ExchangeTos.
     *     @param {ExchangeToCreateManyArgs} args - Arguments to create many ExchangeTos.
     *     @example
     *     // Create many ExchangeTos
     *     const exchangeTo = await prisma.exchangeTo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExchangeToCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExchangeToCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ExchangeTo.
     * @param {ExchangeToDeleteArgs} args - Arguments to delete one ExchangeTo.
     * @example
     * // Delete one ExchangeTo
     * const ExchangeTo = await prisma.exchangeTo.delete({
     *   where: {
     *     // ... filter to delete one ExchangeTo
     *   }
     * })
     * 
    **/
    delete<T extends ExchangeToDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExchangeToDeleteArgs<ExtArgs>>
    ): Prisma__ExchangeToClient<$Result.GetResult<Prisma.$ExchangeToPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ExchangeTo.
     * @param {ExchangeToUpdateArgs} args - Arguments to update one ExchangeTo.
     * @example
     * // Update one ExchangeTo
     * const exchangeTo = await prisma.exchangeTo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExchangeToUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExchangeToUpdateArgs<ExtArgs>>
    ): Prisma__ExchangeToClient<$Result.GetResult<Prisma.$ExchangeToPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ExchangeTos.
     * @param {ExchangeToDeleteManyArgs} args - Arguments to filter ExchangeTos to delete.
     * @example
     * // Delete a few ExchangeTos
     * const { count } = await prisma.exchangeTo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExchangeToDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExchangeToDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExchangeTos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeToUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExchangeTos
     * const exchangeTo = await prisma.exchangeTo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExchangeToUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExchangeToUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExchangeTo.
     * @param {ExchangeToUpsertArgs} args - Arguments to update or create a ExchangeTo.
     * @example
     * // Update or create a ExchangeTo
     * const exchangeTo = await prisma.exchangeTo.upsert({
     *   create: {
     *     // ... data to create a ExchangeTo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExchangeTo we want to update
     *   }
     * })
    **/
    upsert<T extends ExchangeToUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExchangeToUpsertArgs<ExtArgs>>
    ): Prisma__ExchangeToClient<$Result.GetResult<Prisma.$ExchangeToPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ExchangeTos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeToCountArgs} args - Arguments to filter ExchangeTos to count.
     * @example
     * // Count the number of ExchangeTos
     * const count = await prisma.exchangeTo.count({
     *   where: {
     *     // ... the filter for the ExchangeTos we want to count
     *   }
     * })
    **/
    count<T extends ExchangeToCountArgs>(
      args?: Subset<T, ExchangeToCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExchangeToCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExchangeTo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeToAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExchangeToAggregateArgs>(args: Subset<T, ExchangeToAggregateArgs>): Prisma.PrismaPromise<GetExchangeToAggregateType<T>>

    /**
     * Group by ExchangeTo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeToGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExchangeToGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExchangeToGroupByArgs['orderBy'] }
        : { orderBy?: ExchangeToGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExchangeToGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExchangeToGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExchangeTo model
   */
  readonly fields: ExchangeToFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExchangeTo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExchangeToClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Item<T extends ItemsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemsDefaultArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    SubCategories<T extends SubCategoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubCategoriesDefaultArgs<ExtArgs>>): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ExchangeTo model
   */ 
  interface ExchangeToFieldRefs {
    readonly id: FieldRef<"ExchangeTo", 'Int'>
    readonly items_id: FieldRef<"ExchangeTo", 'Int'>
    readonly subCategories_id: FieldRef<"ExchangeTo", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * ExchangeTo findUnique
   */
  export type ExchangeToFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeTo
     */
    select?: ExchangeToSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExchangeToInclude<ExtArgs> | null
    /**
     * Filter, which ExchangeTo to fetch.
     */
    where: ExchangeToWhereUniqueInput
  }


  /**
   * ExchangeTo findUniqueOrThrow
   */
  export type ExchangeToFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeTo
     */
    select?: ExchangeToSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExchangeToInclude<ExtArgs> | null
    /**
     * Filter, which ExchangeTo to fetch.
     */
    where: ExchangeToWhereUniqueInput
  }


  /**
   * ExchangeTo findFirst
   */
  export type ExchangeToFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeTo
     */
    select?: ExchangeToSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExchangeToInclude<ExtArgs> | null
    /**
     * Filter, which ExchangeTo to fetch.
     */
    where?: ExchangeToWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeTos to fetch.
     */
    orderBy?: ExchangeToOrderByWithRelationInput | ExchangeToOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExchangeTos.
     */
    cursor?: ExchangeToWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeTos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeTos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExchangeTos.
     */
    distinct?: ExchangeToScalarFieldEnum | ExchangeToScalarFieldEnum[]
  }


  /**
   * ExchangeTo findFirstOrThrow
   */
  export type ExchangeToFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeTo
     */
    select?: ExchangeToSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExchangeToInclude<ExtArgs> | null
    /**
     * Filter, which ExchangeTo to fetch.
     */
    where?: ExchangeToWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeTos to fetch.
     */
    orderBy?: ExchangeToOrderByWithRelationInput | ExchangeToOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExchangeTos.
     */
    cursor?: ExchangeToWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeTos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeTos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExchangeTos.
     */
    distinct?: ExchangeToScalarFieldEnum | ExchangeToScalarFieldEnum[]
  }


  /**
   * ExchangeTo findMany
   */
  export type ExchangeToFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeTo
     */
    select?: ExchangeToSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExchangeToInclude<ExtArgs> | null
    /**
     * Filter, which ExchangeTos to fetch.
     */
    where?: ExchangeToWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeTos to fetch.
     */
    orderBy?: ExchangeToOrderByWithRelationInput | ExchangeToOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExchangeTos.
     */
    cursor?: ExchangeToWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeTos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeTos.
     */
    skip?: number
    distinct?: ExchangeToScalarFieldEnum | ExchangeToScalarFieldEnum[]
  }


  /**
   * ExchangeTo create
   */
  export type ExchangeToCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeTo
     */
    select?: ExchangeToSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExchangeToInclude<ExtArgs> | null
    /**
     * The data needed to create a ExchangeTo.
     */
    data: XOR<ExchangeToCreateInput, ExchangeToUncheckedCreateInput>
  }


  /**
   * ExchangeTo createMany
   */
  export type ExchangeToCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExchangeTos.
     */
    data: ExchangeToCreateManyInput | ExchangeToCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ExchangeTo update
   */
  export type ExchangeToUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeTo
     */
    select?: ExchangeToSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExchangeToInclude<ExtArgs> | null
    /**
     * The data needed to update a ExchangeTo.
     */
    data: XOR<ExchangeToUpdateInput, ExchangeToUncheckedUpdateInput>
    /**
     * Choose, which ExchangeTo to update.
     */
    where: ExchangeToWhereUniqueInput
  }


  /**
   * ExchangeTo updateMany
   */
  export type ExchangeToUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExchangeTos.
     */
    data: XOR<ExchangeToUpdateManyMutationInput, ExchangeToUncheckedUpdateManyInput>
    /**
     * Filter which ExchangeTos to update
     */
    where?: ExchangeToWhereInput
  }


  /**
   * ExchangeTo upsert
   */
  export type ExchangeToUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeTo
     */
    select?: ExchangeToSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExchangeToInclude<ExtArgs> | null
    /**
     * The filter to search for the ExchangeTo to update in case it exists.
     */
    where: ExchangeToWhereUniqueInput
    /**
     * In case the ExchangeTo found by the `where` argument doesn't exist, create a new ExchangeTo with this data.
     */
    create: XOR<ExchangeToCreateInput, ExchangeToUncheckedCreateInput>
    /**
     * In case the ExchangeTo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExchangeToUpdateInput, ExchangeToUncheckedUpdateInput>
  }


  /**
   * ExchangeTo delete
   */
  export type ExchangeToDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeTo
     */
    select?: ExchangeToSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExchangeToInclude<ExtArgs> | null
    /**
     * Filter which ExchangeTo to delete.
     */
    where: ExchangeToWhereUniqueInput
  }


  /**
   * ExchangeTo deleteMany
   */
  export type ExchangeToDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExchangeTos to delete
     */
    where?: ExchangeToWhereInput
  }


  /**
   * ExchangeTo without action
   */
  export type ExchangeToDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeTo
     */
    select?: ExchangeToSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExchangeToInclude<ExtArgs> | null
  }



  /**
   * Model Notifications
   */

  export type AggregateNotifications = {
    _count: NotificationsCountAggregateOutputType | null
    _avg: NotificationsAvgAggregateOutputType | null
    _sum: NotificationsSumAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  export type NotificationsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    item_id: number | null
  }

  export type NotificationsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    item_id: number | null
  }

  export type NotificationsMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    item_id: number | null
    data: string | null
    seen: boolean | null
    created_at: Date | null
  }

  export type NotificationsMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    item_id: number | null
    data: string | null
    seen: boolean | null
    created_at: Date | null
  }

  export type NotificationsCountAggregateOutputType = {
    id: number
    user_id: number
    item_id: number
    data: number
    seen: number
    created_at: number
    _all: number
  }


  export type NotificationsAvgAggregateInputType = {
    id?: true
    user_id?: true
    item_id?: true
  }

  export type NotificationsSumAggregateInputType = {
    id?: true
    user_id?: true
    item_id?: true
  }

  export type NotificationsMinAggregateInputType = {
    id?: true
    user_id?: true
    item_id?: true
    data?: true
    seen?: true
    created_at?: true
  }

  export type NotificationsMaxAggregateInputType = {
    id?: true
    user_id?: true
    item_id?: true
    data?: true
    seen?: true
    created_at?: true
  }

  export type NotificationsCountAggregateInputType = {
    id?: true
    user_id?: true
    item_id?: true
    data?: true
    seen?: true
    created_at?: true
    _all?: true
  }

  export type NotificationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to aggregate.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationsMaxAggregateInputType
  }

  export type GetNotificationsAggregateType<T extends NotificationsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotifications]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotifications[P]>
      : GetScalarType<T[P], AggregateNotifications[P]>
  }




  export type NotificationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationsWhereInput
    orderBy?: NotificationsOrderByWithAggregationInput | NotificationsOrderByWithAggregationInput[]
    by: NotificationsScalarFieldEnum[] | NotificationsScalarFieldEnum
    having?: NotificationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationsCountAggregateInputType | true
    _avg?: NotificationsAvgAggregateInputType
    _sum?: NotificationsSumAggregateInputType
    _min?: NotificationsMinAggregateInputType
    _max?: NotificationsMaxAggregateInputType
  }

  export type NotificationsGroupByOutputType = {
    id: number
    user_id: number
    item_id: number | null
    data: string
    seen: boolean
    created_at: Date
    _count: NotificationsCountAggregateOutputType | null
    _avg: NotificationsAvgAggregateOutputType | null
    _sum: NotificationsSumAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  type GetNotificationsGroupByPayload<T extends NotificationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
        }
      >
    >


  export type NotificationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    item_id?: boolean
    data?: boolean
    seen?: boolean
    created_at?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Item?: boolean | Notifications$ItemArgs<ExtArgs>
  }, ExtArgs["result"]["notifications"]>

  export type NotificationsSelectScalar = {
    id?: boolean
    user_id?: boolean
    item_id?: boolean
    data?: boolean
    seen?: boolean
    created_at?: boolean
  }

  export type NotificationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Item?: boolean | Notifications$ItemArgs<ExtArgs>
  }


  export type $NotificationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notifications"
    objects: {
      User: Prisma.$UsersPayload<ExtArgs>
      Item: Prisma.$ItemsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      item_id: number | null
      data: string
      seen: boolean
      created_at: Date
    }, ExtArgs["result"]["notifications"]>
    composites: {}
  }


  type NotificationsGetPayload<S extends boolean | null | undefined | NotificationsDefaultArgs> = $Result.GetResult<Prisma.$NotificationsPayload, S>

  type NotificationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationsCountAggregateInputType | true
    }

  export interface NotificationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notifications'], meta: { name: 'Notifications' } }
    /**
     * Find zero or one Notifications that matches the filter.
     * @param {NotificationsFindUniqueArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notifications that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationsFindUniqueOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindFirstArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notifications that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindFirstOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notifications.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notifications.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationsWithIdOnly = await prisma.notifications.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notifications.
     * @param {NotificationsCreateArgs} args - Arguments to create a Notifications.
     * @example
     * // Create one Notifications
     * const Notifications = await prisma.notifications.create({
     *   data: {
     *     // ... data to create a Notifications
     *   }
     * })
     * 
    **/
    create<T extends NotificationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsCreateArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {NotificationsCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notifications = await prisma.notifications.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notifications.
     * @param {NotificationsDeleteArgs} args - Arguments to delete one Notifications.
     * @example
     * // Delete one Notifications
     * const Notifications = await prisma.notifications.delete({
     *   where: {
     *     // ... filter to delete one Notifications
     *   }
     * })
     * 
    **/
    delete<T extends NotificationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsDeleteArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notifications.
     * @param {NotificationsUpdateArgs} args - Arguments to update one Notifications.
     * @example
     * // Update one Notifications
     * const notifications = await prisma.notifications.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsUpdateArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationsDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notifications.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notifications = await prisma.notifications.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notifications.
     * @param {NotificationsUpsertArgs} args - Arguments to update or create a Notifications.
     * @example
     * // Update or create a Notifications
     * const notifications = await prisma.notifications.upsert({
     *   create: {
     *     // ... data to create a Notifications
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notifications we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsUpsertArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notifications.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationsCountArgs>(
      args?: Subset<T, NotificationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationsAggregateArgs>(args: Subset<T, NotificationsAggregateArgs>): Prisma.PrismaPromise<GetNotificationsAggregateType<T>>

    /**
     * Group by Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationsGroupByArgs['orderBy'] }
        : { orderBy?: NotificationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notifications model
   */
  readonly fields: NotificationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notifications.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Item<T extends Notifications$ItemArgs<ExtArgs> = {}>(args?: Subset<T, Notifications$ItemArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Notifications model
   */ 
  interface NotificationsFieldRefs {
    readonly id: FieldRef<"Notifications", 'Int'>
    readonly user_id: FieldRef<"Notifications", 'Int'>
    readonly item_id: FieldRef<"Notifications", 'Int'>
    readonly data: FieldRef<"Notifications", 'String'>
    readonly seen: FieldRef<"Notifications", 'Boolean'>
    readonly created_at: FieldRef<"Notifications", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Notifications findUnique
   */
  export type NotificationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications findUniqueOrThrow
   */
  export type NotificationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications findFirst
   */
  export type NotificationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Notifications findFirstOrThrow
   */
  export type NotificationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Notifications findMany
   */
  export type NotificationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Notifications create
   */
  export type NotificationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * The data needed to create a Notifications.
     */
    data: XOR<NotificationsCreateInput, NotificationsUncheckedCreateInput>
  }


  /**
   * Notifications createMany
   */
  export type NotificationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationsCreateManyInput | NotificationsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Notifications update
   */
  export type NotificationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * The data needed to update a Notifications.
     */
    data: XOR<NotificationsUpdateInput, NotificationsUncheckedUpdateInput>
    /**
     * Choose, which Notifications to update.
     */
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications updateMany
   */
  export type NotificationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationsUpdateManyMutationInput, NotificationsUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationsWhereInput
  }


  /**
   * Notifications upsert
   */
  export type NotificationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * The filter to search for the Notifications to update in case it exists.
     */
    where: NotificationsWhereUniqueInput
    /**
     * In case the Notifications found by the `where` argument doesn't exist, create a new Notifications with this data.
     */
    create: XOR<NotificationsCreateInput, NotificationsUncheckedCreateInput>
    /**
     * In case the Notifications was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationsUpdateInput, NotificationsUncheckedUpdateInput>
  }


  /**
   * Notifications delete
   */
  export type NotificationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter which Notifications to delete.
     */
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications deleteMany
   */
  export type NotificationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationsWhereInput
  }


  /**
   * Notifications.Item
   */
  export type Notifications$ItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    where?: ItemsWhereInput
  }


  /**
   * Notifications without action
   */
  export type NotificationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
  }



  /**
   * Model Tokens
   */

  export type AggregateTokens = {
    _count: TokensCountAggregateOutputType | null
    _avg: TokensAvgAggregateOutputType | null
    _sum: TokensSumAggregateOutputType | null
    _min: TokensMinAggregateOutputType | null
    _max: TokensMaxAggregateOutputType | null
  }

  export type TokensAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type TokensSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type TokensMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    token: string | null
  }

  export type TokensMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    token: string | null
  }

  export type TokensCountAggregateOutputType = {
    id: number
    user_id: number
    token: number
    _all: number
  }


  export type TokensAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type TokensSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type TokensMinAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
  }

  export type TokensMaxAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
  }

  export type TokensCountAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    _all?: true
  }

  export type TokensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to aggregate.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokensOrderByWithRelationInput | TokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokensMaxAggregateInputType
  }

  export type GetTokensAggregateType<T extends TokensAggregateArgs> = {
        [P in keyof T & keyof AggregateTokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTokens[P]>
      : GetScalarType<T[P], AggregateTokens[P]>
  }




  export type TokensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokensWhereInput
    orderBy?: TokensOrderByWithAggregationInput | TokensOrderByWithAggregationInput[]
    by: TokensScalarFieldEnum[] | TokensScalarFieldEnum
    having?: TokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokensCountAggregateInputType | true
    _avg?: TokensAvgAggregateInputType
    _sum?: TokensSumAggregateInputType
    _min?: TokensMinAggregateInputType
    _max?: TokensMaxAggregateInputType
  }

  export type TokensGroupByOutputType = {
    id: number
    user_id: number
    token: string
    _count: TokensCountAggregateOutputType | null
    _avg: TokensAvgAggregateOutputType | null
    _sum: TokensSumAggregateOutputType | null
    _min: TokensMinAggregateOutputType | null
    _max: TokensMaxAggregateOutputType | null
  }

  type GetTokensGroupByPayload<T extends TokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokensGroupByOutputType[P]>
            : GetScalarType<T[P], TokensGroupByOutputType[P]>
        }
      >
    >


  export type TokensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    token?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tokens"]>

  export type TokensSelectScalar = {
    id?: boolean
    user_id?: boolean
    token?: boolean
  }

  export type TokensInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $TokensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tokens"
    objects: {
      User: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      token: string
    }, ExtArgs["result"]["tokens"]>
    composites: {}
  }


  type TokensGetPayload<S extends boolean | null | undefined | TokensDefaultArgs> = $Result.GetResult<Prisma.$TokensPayload, S>

  type TokensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TokensFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TokensCountAggregateInputType | true
    }

  export interface TokensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tokens'], meta: { name: 'Tokens' } }
    /**
     * Find zero or one Tokens that matches the filter.
     * @param {TokensFindUniqueArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TokensFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TokensFindUniqueArgs<ExtArgs>>
    ): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tokens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TokensFindUniqueOrThrowArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TokensFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TokensFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensFindFirstArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TokensFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TokensFindFirstArgs<ExtArgs>>
    ): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tokens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensFindFirstOrThrowArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TokensFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TokensFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.tokens.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokensWithIdOnly = await prisma.tokens.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TokensFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TokensFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tokens.
     * @param {TokensCreateArgs} args - Arguments to create a Tokens.
     * @example
     * // Create one Tokens
     * const Tokens = await prisma.tokens.create({
     *   data: {
     *     // ... data to create a Tokens
     *   }
     * })
     * 
    **/
    create<T extends TokensCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TokensCreateArgs<ExtArgs>>
    ): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tokens.
     *     @param {TokensCreateManyArgs} args - Arguments to create many Tokens.
     *     @example
     *     // Create many Tokens
     *     const tokens = await prisma.tokens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TokensCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TokensCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tokens.
     * @param {TokensDeleteArgs} args - Arguments to delete one Tokens.
     * @example
     * // Delete one Tokens
     * const Tokens = await prisma.tokens.delete({
     *   where: {
     *     // ... filter to delete one Tokens
     *   }
     * })
     * 
    **/
    delete<T extends TokensDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TokensDeleteArgs<ExtArgs>>
    ): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tokens.
     * @param {TokensUpdateArgs} args - Arguments to update one Tokens.
     * @example
     * // Update one Tokens
     * const tokens = await prisma.tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TokensUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TokensUpdateArgs<ExtArgs>>
    ): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tokens.
     * @param {TokensDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TokensDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TokensDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const tokens = await prisma.tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TokensUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TokensUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tokens.
     * @param {TokensUpsertArgs} args - Arguments to update or create a Tokens.
     * @example
     * // Update or create a Tokens
     * const tokens = await prisma.tokens.upsert({
     *   create: {
     *     // ... data to create a Tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tokens we want to update
     *   }
     * })
    **/
    upsert<T extends TokensUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TokensUpsertArgs<ExtArgs>>
    ): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.tokens.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokensCountArgs>(
      args?: Subset<T, TokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokensAggregateArgs>(args: Subset<T, TokensAggregateArgs>): Prisma.PrismaPromise<GetTokensAggregateType<T>>

    /**
     * Group by Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokensGroupByArgs['orderBy'] }
        : { orderBy?: TokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tokens model
   */
  readonly fields: TokensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Tokens model
   */ 
  interface TokensFieldRefs {
    readonly id: FieldRef<"Tokens", 'Int'>
    readonly user_id: FieldRef<"Tokens", 'Int'>
    readonly token: FieldRef<"Tokens", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Tokens findUnique
   */
  export type TokensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where: TokensWhereUniqueInput
  }


  /**
   * Tokens findUniqueOrThrow
   */
  export type TokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where: TokensWhereUniqueInput
  }


  /**
   * Tokens findFirst
   */
  export type TokensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokensOrderByWithRelationInput | TokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }


  /**
   * Tokens findFirstOrThrow
   */
  export type TokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokensOrderByWithRelationInput | TokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }


  /**
   * Tokens findMany
   */
  export type TokensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokensOrderByWithRelationInput | TokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }


  /**
   * Tokens create
   */
  export type TokensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * The data needed to create a Tokens.
     */
    data: XOR<TokensCreateInput, TokensUncheckedCreateInput>
  }


  /**
   * Tokens createMany
   */
  export type TokensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tokens.
     */
    data: TokensCreateManyInput | TokensCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Tokens update
   */
  export type TokensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * The data needed to update a Tokens.
     */
    data: XOR<TokensUpdateInput, TokensUncheckedUpdateInput>
    /**
     * Choose, which Tokens to update.
     */
    where: TokensWhereUniqueInput
  }


  /**
   * Tokens updateMany
   */
  export type TokensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokensUpdateManyMutationInput, TokensUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokensWhereInput
  }


  /**
   * Tokens upsert
   */
  export type TokensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * The filter to search for the Tokens to update in case it exists.
     */
    where: TokensWhereUniqueInput
    /**
     * In case the Tokens found by the `where` argument doesn't exist, create a new Tokens with this data.
     */
    create: XOR<TokensCreateInput, TokensUncheckedCreateInput>
    /**
     * In case the Tokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokensUpdateInput, TokensUncheckedUpdateInput>
  }


  /**
   * Tokens delete
   */
  export type TokensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter which Tokens to delete.
     */
    where: TokensWhereUniqueInput
  }


  /**
   * Tokens deleteMany
   */
  export type TokensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to delete
     */
    where?: TokensWhereInput
  }


  /**
   * Tokens without action
   */
  export type TokensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    role_id: 'role_id',
    createdAt: 'createdAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const RolesScalarFieldEnum: {
    id: 'id',
    title: 'title'
  };

  export type RolesScalarFieldEnum = (typeof RolesScalarFieldEnum)[keyof typeof RolesScalarFieldEnum]


  export const LocationsScalarFieldEnum: {
    user_id: 'user_id',
    longtitude: 'longtitude',
    latitude: 'latitude'
  };

  export type LocationsScalarFieldEnum = (typeof LocationsScalarFieldEnum)[keyof typeof LocationsScalarFieldEnum]


  export const FavouriteItemsScalarFieldEnum: {
    user_id: 'user_id',
    items_id: 'items_id'
  };

  export type FavouriteItemsScalarFieldEnum = (typeof FavouriteItemsScalarFieldEnum)[keyof typeof FavouriteItemsScalarFieldEnum]


  export const ItemsScalarFieldEnum: {
    id: 'id',
    users_id: 'users_id',
    subCategories_id: 'subCategories_id',
    name: 'name',
    description: 'description',
    photo: 'photo',
    price: 'price',
    for_sale: 'for_sale',
    exchange: 'exchange',
    visibility: 'visibility',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ItemsScalarFieldEnum = (typeof ItemsScalarFieldEnum)[keyof typeof ItemsScalarFieldEnum]


  export const SubCategoriesScalarFieldEnum: {
    id: 'id',
    category_id: 'category_id',
    title: 'title',
    nr: 'nr'
  };

  export type SubCategoriesScalarFieldEnum = (typeof SubCategoriesScalarFieldEnum)[keyof typeof SubCategoriesScalarFieldEnum]


  export const CategoriesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    nr: 'nr'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const ExchangeToScalarFieldEnum: {
    id: 'id',
    items_id: 'items_id',
    subCategories_id: 'subCategories_id'
  };

  export type ExchangeToScalarFieldEnum = (typeof ExchangeToScalarFieldEnum)[keyof typeof ExchangeToScalarFieldEnum]


  export const NotificationsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    item_id: 'item_id',
    data: 'data',
    seen: 'seen',
    created_at: 'created_at'
  };

  export type NotificationsScalarFieldEnum = (typeof NotificationsScalarFieldEnum)[keyof typeof NotificationsScalarFieldEnum]


  export const TokensScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    token: 'token'
  };

  export type TokensScalarFieldEnum = (typeof TokensScalarFieldEnum)[keyof typeof TokensScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: IntFilter<"Users"> | number
    username?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    role_id?: IntFilter<"Users"> | number
    createdAt?: DateTimeFilter<"Users"> | Date | string
    Role?: XOR<RolesRelationFilter, RolesWhereInput>
    FavouriteItems?: FavouriteItemsListRelationFilter
    Items?: ItemsListRelationFilter
    Location?: LocationsListRelationFilter
    Notifications?: NotificationsListRelationFilter
    Tokens?: TokensListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    createdAt?: SortOrder
    Role?: RolesOrderByWithRelationInput
    FavouriteItems?: FavouriteItemsOrderByRelationAggregateInput
    Items?: ItemsOrderByRelationAggregateInput
    Location?: LocationsOrderByRelationAggregateInput
    Notifications?: NotificationsOrderByRelationAggregateInput
    Tokens?: TokensOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    username_email?: UsersUsernameEmailCompoundUniqueInput
    username_password?: UsersUsernamePasswordCompoundUniqueInput
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    username?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    role_id?: IntFilter<"Users"> | number
    createdAt?: DateTimeFilter<"Users"> | Date | string
    Role?: XOR<RolesRelationFilter, RolesWhereInput>
    FavouriteItems?: FavouriteItemsListRelationFilter
    Items?: ItemsListRelationFilter
    Location?: LocationsListRelationFilter
    Notifications?: NotificationsListRelationFilter
    Tokens?: TokensListRelationFilter
  }, "id" | "email" | "username_email" | "username_password">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    createdAt?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Users"> | number
    username?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    role_id?: IntWithAggregatesFilter<"Users"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
  }

  export type RolesWhereInput = {
    AND?: RolesWhereInput | RolesWhereInput[]
    OR?: RolesWhereInput[]
    NOT?: RolesWhereInput | RolesWhereInput[]
    id?: IntFilter<"Roles"> | number
    title?: StringFilter<"Roles"> | string
    Users?: UsersListRelationFilter
  }

  export type RolesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    Users?: UsersOrderByRelationAggregateInput
  }

  export type RolesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RolesWhereInput | RolesWhereInput[]
    OR?: RolesWhereInput[]
    NOT?: RolesWhereInput | RolesWhereInput[]
    title?: StringFilter<"Roles"> | string
    Users?: UsersListRelationFilter
  }, "id">

  export type RolesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    _count?: RolesCountOrderByAggregateInput
    _avg?: RolesAvgOrderByAggregateInput
    _max?: RolesMaxOrderByAggregateInput
    _min?: RolesMinOrderByAggregateInput
    _sum?: RolesSumOrderByAggregateInput
  }

  export type RolesScalarWhereWithAggregatesInput = {
    AND?: RolesScalarWhereWithAggregatesInput | RolesScalarWhereWithAggregatesInput[]
    OR?: RolesScalarWhereWithAggregatesInput[]
    NOT?: RolesScalarWhereWithAggregatesInput | RolesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Roles"> | number
    title?: StringWithAggregatesFilter<"Roles"> | string
  }

  export type LocationsWhereInput = {
    AND?: LocationsWhereInput | LocationsWhereInput[]
    OR?: LocationsWhereInput[]
    NOT?: LocationsWhereInput | LocationsWhereInput[]
    user_id?: IntFilter<"Locations"> | number
    longtitude?: StringFilter<"Locations"> | string
    latitude?: StringFilter<"Locations"> | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type LocationsOrderByWithRelationInput = {
    user_id?: SortOrder
    longtitude?: SortOrder
    latitude?: SortOrder
    User?: UsersOrderByWithRelationInput
  }

  export type LocationsWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    AND?: LocationsWhereInput | LocationsWhereInput[]
    OR?: LocationsWhereInput[]
    NOT?: LocationsWhereInput | LocationsWhereInput[]
    longtitude?: StringFilter<"Locations"> | string
    latitude?: StringFilter<"Locations"> | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "user_id">

  export type LocationsOrderByWithAggregationInput = {
    user_id?: SortOrder
    longtitude?: SortOrder
    latitude?: SortOrder
    _count?: LocationsCountOrderByAggregateInput
    _avg?: LocationsAvgOrderByAggregateInput
    _max?: LocationsMaxOrderByAggregateInput
    _min?: LocationsMinOrderByAggregateInput
    _sum?: LocationsSumOrderByAggregateInput
  }

  export type LocationsScalarWhereWithAggregatesInput = {
    AND?: LocationsScalarWhereWithAggregatesInput | LocationsScalarWhereWithAggregatesInput[]
    OR?: LocationsScalarWhereWithAggregatesInput[]
    NOT?: LocationsScalarWhereWithAggregatesInput | LocationsScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"Locations"> | number
    longtitude?: StringWithAggregatesFilter<"Locations"> | string
    latitude?: StringWithAggregatesFilter<"Locations"> | string
  }

  export type FavouriteItemsWhereInput = {
    AND?: FavouriteItemsWhereInput | FavouriteItemsWhereInput[]
    OR?: FavouriteItemsWhereInput[]
    NOT?: FavouriteItemsWhereInput | FavouriteItemsWhereInput[]
    user_id?: IntFilter<"FavouriteItems"> | number
    items_id?: IntFilter<"FavouriteItems"> | number
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Items?: XOR<ItemsRelationFilter, ItemsWhereInput>
  }

  export type FavouriteItemsOrderByWithRelationInput = {
    user_id?: SortOrder
    items_id?: SortOrder
    User?: UsersOrderByWithRelationInput
    Items?: ItemsOrderByWithRelationInput
  }

  export type FavouriteItemsWhereUniqueInput = Prisma.AtLeast<{
    user_id_items_id?: FavouriteItemsUser_idItems_idCompoundUniqueInput
    AND?: FavouriteItemsWhereInput | FavouriteItemsWhereInput[]
    OR?: FavouriteItemsWhereInput[]
    NOT?: FavouriteItemsWhereInput | FavouriteItemsWhereInput[]
    user_id?: IntFilter<"FavouriteItems"> | number
    items_id?: IntFilter<"FavouriteItems"> | number
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Items?: XOR<ItemsRelationFilter, ItemsWhereInput>
  }, "user_id_items_id">

  export type FavouriteItemsOrderByWithAggregationInput = {
    user_id?: SortOrder
    items_id?: SortOrder
    _count?: FavouriteItemsCountOrderByAggregateInput
    _avg?: FavouriteItemsAvgOrderByAggregateInput
    _max?: FavouriteItemsMaxOrderByAggregateInput
    _min?: FavouriteItemsMinOrderByAggregateInput
    _sum?: FavouriteItemsSumOrderByAggregateInput
  }

  export type FavouriteItemsScalarWhereWithAggregatesInput = {
    AND?: FavouriteItemsScalarWhereWithAggregatesInput | FavouriteItemsScalarWhereWithAggregatesInput[]
    OR?: FavouriteItemsScalarWhereWithAggregatesInput[]
    NOT?: FavouriteItemsScalarWhereWithAggregatesInput | FavouriteItemsScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"FavouriteItems"> | number
    items_id?: IntWithAggregatesFilter<"FavouriteItems"> | number
  }

  export type ItemsWhereInput = {
    AND?: ItemsWhereInput | ItemsWhereInput[]
    OR?: ItemsWhereInput[]
    NOT?: ItemsWhereInput | ItemsWhereInput[]
    id?: IntFilter<"Items"> | number
    users_id?: IntFilter<"Items"> | number
    subCategories_id?: IntFilter<"Items"> | number
    name?: StringFilter<"Items"> | string
    description?: StringFilter<"Items"> | string
    photo?: StringFilter<"Items"> | string
    price?: DecimalFilter<"Items"> | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFilter<"Items"> | boolean
    exchange?: BoolFilter<"Items"> | boolean
    visibility?: BoolFilter<"Items"> | boolean
    created_at?: DateTimeFilter<"Items"> | Date | string
    updated_at?: DateTimeFilter<"Items"> | Date | string
    Users?: XOR<UsersRelationFilter, UsersWhereInput>
    SubCategories?: XOR<SubCategoriesRelationFilter, SubCategoriesWhereInput>
    ExchangeTo?: ExchangeToListRelationFilter
    FavouriteItems?: FavouriteItemsListRelationFilter
    Notifications?: NotificationsListRelationFilter
  }

  export type ItemsOrderByWithRelationInput = {
    id?: SortOrder
    users_id?: SortOrder
    subCategories_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    photo?: SortOrder
    price?: SortOrder
    for_sale?: SortOrder
    exchange?: SortOrder
    visibility?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    Users?: UsersOrderByWithRelationInput
    SubCategories?: SubCategoriesOrderByWithRelationInput
    ExchangeTo?: ExchangeToOrderByRelationAggregateInput
    FavouriteItems?: FavouriteItemsOrderByRelationAggregateInput
    Notifications?: NotificationsOrderByRelationAggregateInput
  }

  export type ItemsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ItemsWhereInput | ItemsWhereInput[]
    OR?: ItemsWhereInput[]
    NOT?: ItemsWhereInput | ItemsWhereInput[]
    users_id?: IntFilter<"Items"> | number
    subCategories_id?: IntFilter<"Items"> | number
    name?: StringFilter<"Items"> | string
    description?: StringFilter<"Items"> | string
    photo?: StringFilter<"Items"> | string
    price?: DecimalFilter<"Items"> | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFilter<"Items"> | boolean
    exchange?: BoolFilter<"Items"> | boolean
    visibility?: BoolFilter<"Items"> | boolean
    created_at?: DateTimeFilter<"Items"> | Date | string
    updated_at?: DateTimeFilter<"Items"> | Date | string
    Users?: XOR<UsersRelationFilter, UsersWhereInput>
    SubCategories?: XOR<SubCategoriesRelationFilter, SubCategoriesWhereInput>
    ExchangeTo?: ExchangeToListRelationFilter
    FavouriteItems?: FavouriteItemsListRelationFilter
    Notifications?: NotificationsListRelationFilter
  }, "id">

  export type ItemsOrderByWithAggregationInput = {
    id?: SortOrder
    users_id?: SortOrder
    subCategories_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    photo?: SortOrder
    price?: SortOrder
    for_sale?: SortOrder
    exchange?: SortOrder
    visibility?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ItemsCountOrderByAggregateInput
    _avg?: ItemsAvgOrderByAggregateInput
    _max?: ItemsMaxOrderByAggregateInput
    _min?: ItemsMinOrderByAggregateInput
    _sum?: ItemsSumOrderByAggregateInput
  }

  export type ItemsScalarWhereWithAggregatesInput = {
    AND?: ItemsScalarWhereWithAggregatesInput | ItemsScalarWhereWithAggregatesInput[]
    OR?: ItemsScalarWhereWithAggregatesInput[]
    NOT?: ItemsScalarWhereWithAggregatesInput | ItemsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Items"> | number
    users_id?: IntWithAggregatesFilter<"Items"> | number
    subCategories_id?: IntWithAggregatesFilter<"Items"> | number
    name?: StringWithAggregatesFilter<"Items"> | string
    description?: StringWithAggregatesFilter<"Items"> | string
    photo?: StringWithAggregatesFilter<"Items"> | string
    price?: DecimalWithAggregatesFilter<"Items"> | Decimal | DecimalJsLike | number | string
    for_sale?: BoolWithAggregatesFilter<"Items"> | boolean
    exchange?: BoolWithAggregatesFilter<"Items"> | boolean
    visibility?: BoolWithAggregatesFilter<"Items"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"Items"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Items"> | Date | string
  }

  export type SubCategoriesWhereInput = {
    AND?: SubCategoriesWhereInput | SubCategoriesWhereInput[]
    OR?: SubCategoriesWhereInput[]
    NOT?: SubCategoriesWhereInput | SubCategoriesWhereInput[]
    id?: IntFilter<"SubCategories"> | number
    category_id?: IntFilter<"SubCategories"> | number
    title?: StringFilter<"SubCategories"> | string
    nr?: IntNullableFilter<"SubCategories"> | number | null
    Category?: XOR<CategoriesRelationFilter, CategoriesWhereInput>
    Items?: ItemsListRelationFilter
    ExchangeTo?: ExchangeToListRelationFilter
  }

  export type SubCategoriesOrderByWithRelationInput = {
    id?: SortOrder
    category_id?: SortOrder
    title?: SortOrder
    nr?: SortOrderInput | SortOrder
    Category?: CategoriesOrderByWithRelationInput
    Items?: ItemsOrderByRelationAggregateInput
    ExchangeTo?: ExchangeToOrderByRelationAggregateInput
  }

  export type SubCategoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubCategoriesWhereInput | SubCategoriesWhereInput[]
    OR?: SubCategoriesWhereInput[]
    NOT?: SubCategoriesWhereInput | SubCategoriesWhereInput[]
    category_id?: IntFilter<"SubCategories"> | number
    title?: StringFilter<"SubCategories"> | string
    nr?: IntNullableFilter<"SubCategories"> | number | null
    Category?: XOR<CategoriesRelationFilter, CategoriesWhereInput>
    Items?: ItemsListRelationFilter
    ExchangeTo?: ExchangeToListRelationFilter
  }, "id">

  export type SubCategoriesOrderByWithAggregationInput = {
    id?: SortOrder
    category_id?: SortOrder
    title?: SortOrder
    nr?: SortOrderInput | SortOrder
    _count?: SubCategoriesCountOrderByAggregateInput
    _avg?: SubCategoriesAvgOrderByAggregateInput
    _max?: SubCategoriesMaxOrderByAggregateInput
    _min?: SubCategoriesMinOrderByAggregateInput
    _sum?: SubCategoriesSumOrderByAggregateInput
  }

  export type SubCategoriesScalarWhereWithAggregatesInput = {
    AND?: SubCategoriesScalarWhereWithAggregatesInput | SubCategoriesScalarWhereWithAggregatesInput[]
    OR?: SubCategoriesScalarWhereWithAggregatesInput[]
    NOT?: SubCategoriesScalarWhereWithAggregatesInput | SubCategoriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SubCategories"> | number
    category_id?: IntWithAggregatesFilter<"SubCategories"> | number
    title?: StringWithAggregatesFilter<"SubCategories"> | string
    nr?: IntNullableWithAggregatesFilter<"SubCategories"> | number | null
  }

  export type CategoriesWhereInput = {
    AND?: CategoriesWhereInput | CategoriesWhereInput[]
    OR?: CategoriesWhereInput[]
    NOT?: CategoriesWhereInput | CategoriesWhereInput[]
    id?: IntFilter<"Categories"> | number
    title?: StringFilter<"Categories"> | string
    nr?: IntFilter<"Categories"> | number
    SubCategories?: SubCategoriesListRelationFilter
  }

  export type CategoriesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    nr?: SortOrder
    SubCategories?: SubCategoriesOrderByRelationAggregateInput
  }

  export type CategoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoriesWhereInput | CategoriesWhereInput[]
    OR?: CategoriesWhereInput[]
    NOT?: CategoriesWhereInput | CategoriesWhereInput[]
    title?: StringFilter<"Categories"> | string
    nr?: IntFilter<"Categories"> | number
    SubCategories?: SubCategoriesListRelationFilter
  }, "id">

  export type CategoriesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    nr?: SortOrder
    _count?: CategoriesCountOrderByAggregateInput
    _avg?: CategoriesAvgOrderByAggregateInput
    _max?: CategoriesMaxOrderByAggregateInput
    _min?: CategoriesMinOrderByAggregateInput
    _sum?: CategoriesSumOrderByAggregateInput
  }

  export type CategoriesScalarWhereWithAggregatesInput = {
    AND?: CategoriesScalarWhereWithAggregatesInput | CategoriesScalarWhereWithAggregatesInput[]
    OR?: CategoriesScalarWhereWithAggregatesInput[]
    NOT?: CategoriesScalarWhereWithAggregatesInput | CategoriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categories"> | number
    title?: StringWithAggregatesFilter<"Categories"> | string
    nr?: IntWithAggregatesFilter<"Categories"> | number
  }

  export type ExchangeToWhereInput = {
    AND?: ExchangeToWhereInput | ExchangeToWhereInput[]
    OR?: ExchangeToWhereInput[]
    NOT?: ExchangeToWhereInput | ExchangeToWhereInput[]
    id?: IntFilter<"ExchangeTo"> | number
    items_id?: IntFilter<"ExchangeTo"> | number
    subCategories_id?: IntFilter<"ExchangeTo"> | number
    Item?: XOR<ItemsRelationFilter, ItemsWhereInput>
    SubCategories?: XOR<SubCategoriesRelationFilter, SubCategoriesWhereInput>
  }

  export type ExchangeToOrderByWithRelationInput = {
    id?: SortOrder
    items_id?: SortOrder
    subCategories_id?: SortOrder
    Item?: ItemsOrderByWithRelationInput
    SubCategories?: SubCategoriesOrderByWithRelationInput
  }

  export type ExchangeToWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExchangeToWhereInput | ExchangeToWhereInput[]
    OR?: ExchangeToWhereInput[]
    NOT?: ExchangeToWhereInput | ExchangeToWhereInput[]
    items_id?: IntFilter<"ExchangeTo"> | number
    subCategories_id?: IntFilter<"ExchangeTo"> | number
    Item?: XOR<ItemsRelationFilter, ItemsWhereInput>
    SubCategories?: XOR<SubCategoriesRelationFilter, SubCategoriesWhereInput>
  }, "id">

  export type ExchangeToOrderByWithAggregationInput = {
    id?: SortOrder
    items_id?: SortOrder
    subCategories_id?: SortOrder
    _count?: ExchangeToCountOrderByAggregateInput
    _avg?: ExchangeToAvgOrderByAggregateInput
    _max?: ExchangeToMaxOrderByAggregateInput
    _min?: ExchangeToMinOrderByAggregateInput
    _sum?: ExchangeToSumOrderByAggregateInput
  }

  export type ExchangeToScalarWhereWithAggregatesInput = {
    AND?: ExchangeToScalarWhereWithAggregatesInput | ExchangeToScalarWhereWithAggregatesInput[]
    OR?: ExchangeToScalarWhereWithAggregatesInput[]
    NOT?: ExchangeToScalarWhereWithAggregatesInput | ExchangeToScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ExchangeTo"> | number
    items_id?: IntWithAggregatesFilter<"ExchangeTo"> | number
    subCategories_id?: IntWithAggregatesFilter<"ExchangeTo"> | number
  }

  export type NotificationsWhereInput = {
    AND?: NotificationsWhereInput | NotificationsWhereInput[]
    OR?: NotificationsWhereInput[]
    NOT?: NotificationsWhereInput | NotificationsWhereInput[]
    id?: IntFilter<"Notifications"> | number
    user_id?: IntFilter<"Notifications"> | number
    item_id?: IntNullableFilter<"Notifications"> | number | null
    data?: StringFilter<"Notifications"> | string
    seen?: BoolFilter<"Notifications"> | boolean
    created_at?: DateTimeFilter<"Notifications"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Item?: XOR<ItemsNullableRelationFilter, ItemsWhereInput> | null
  }

  export type NotificationsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    item_id?: SortOrderInput | SortOrder
    data?: SortOrder
    seen?: SortOrder
    created_at?: SortOrder
    User?: UsersOrderByWithRelationInput
    Item?: ItemsOrderByWithRelationInput
  }

  export type NotificationsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationsWhereInput | NotificationsWhereInput[]
    OR?: NotificationsWhereInput[]
    NOT?: NotificationsWhereInput | NotificationsWhereInput[]
    user_id?: IntFilter<"Notifications"> | number
    item_id?: IntNullableFilter<"Notifications"> | number | null
    data?: StringFilter<"Notifications"> | string
    seen?: BoolFilter<"Notifications"> | boolean
    created_at?: DateTimeFilter<"Notifications"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Item?: XOR<ItemsNullableRelationFilter, ItemsWhereInput> | null
  }, "id">

  export type NotificationsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    item_id?: SortOrderInput | SortOrder
    data?: SortOrder
    seen?: SortOrder
    created_at?: SortOrder
    _count?: NotificationsCountOrderByAggregateInput
    _avg?: NotificationsAvgOrderByAggregateInput
    _max?: NotificationsMaxOrderByAggregateInput
    _min?: NotificationsMinOrderByAggregateInput
    _sum?: NotificationsSumOrderByAggregateInput
  }

  export type NotificationsScalarWhereWithAggregatesInput = {
    AND?: NotificationsScalarWhereWithAggregatesInput | NotificationsScalarWhereWithAggregatesInput[]
    OR?: NotificationsScalarWhereWithAggregatesInput[]
    NOT?: NotificationsScalarWhereWithAggregatesInput | NotificationsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notifications"> | number
    user_id?: IntWithAggregatesFilter<"Notifications"> | number
    item_id?: IntNullableWithAggregatesFilter<"Notifications"> | number | null
    data?: StringWithAggregatesFilter<"Notifications"> | string
    seen?: BoolWithAggregatesFilter<"Notifications"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"Notifications"> | Date | string
  }

  export type TokensWhereInput = {
    AND?: TokensWhereInput | TokensWhereInput[]
    OR?: TokensWhereInput[]
    NOT?: TokensWhereInput | TokensWhereInput[]
    id?: IntFilter<"Tokens"> | number
    user_id?: IntFilter<"Tokens"> | number
    token?: StringFilter<"Tokens"> | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type TokensOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    User?: UsersOrderByWithRelationInput
  }

  export type TokensWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    token?: string
    AND?: TokensWhereInput | TokensWhereInput[]
    OR?: TokensWhereInput[]
    NOT?: TokensWhereInput | TokensWhereInput[]
    user_id?: IntFilter<"Tokens"> | number
    User?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id" | "token">

  export type TokensOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    _count?: TokensCountOrderByAggregateInput
    _avg?: TokensAvgOrderByAggregateInput
    _max?: TokensMaxOrderByAggregateInput
    _min?: TokensMinOrderByAggregateInput
    _sum?: TokensSumOrderByAggregateInput
  }

  export type TokensScalarWhereWithAggregatesInput = {
    AND?: TokensScalarWhereWithAggregatesInput | TokensScalarWhereWithAggregatesInput[]
    OR?: TokensScalarWhereWithAggregatesInput[]
    NOT?: TokensScalarWhereWithAggregatesInput | TokensScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tokens"> | number
    user_id?: IntWithAggregatesFilter<"Tokens"> | number
    token?: StringWithAggregatesFilter<"Tokens"> | string
  }

  export type UsersCreateInput = {
    username: string
    email: string
    password: string
    createdAt?: Date | string
    Role: RolesCreateNestedOneWithoutUsersInput
    FavouriteItems?: FavouriteItemsCreateNestedManyWithoutUserInput
    Items?: ItemsCreateNestedManyWithoutUsersInput
    Location?: LocationsCreateNestedManyWithoutUserInput
    Notifications?: NotificationsCreateNestedManyWithoutUserInput
    Tokens?: TokensCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    password: string
    role_id: number
    createdAt?: Date | string
    FavouriteItems?: FavouriteItemsUncheckedCreateNestedManyWithoutUserInput
    Items?: ItemsUncheckedCreateNestedManyWithoutUsersInput
    Location?: LocationsUncheckedCreateNestedManyWithoutUserInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUserInput
    Tokens?: TokensUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Role?: RolesUpdateOneRequiredWithoutUsersNestedInput
    FavouriteItems?: FavouriteItemsUpdateManyWithoutUserNestedInput
    Items?: ItemsUpdateManyWithoutUsersNestedInput
    Location?: LocationsUpdateManyWithoutUserNestedInput
    Notifications?: NotificationsUpdateManyWithoutUserNestedInput
    Tokens?: TokensUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FavouriteItems?: FavouriteItemsUncheckedUpdateManyWithoutUserNestedInput
    Items?: ItemsUncheckedUpdateManyWithoutUsersNestedInput
    Location?: LocationsUncheckedUpdateManyWithoutUserNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUserNestedInput
    Tokens?: TokensUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    username: string
    email: string
    password: string
    role_id: number
    createdAt?: Date | string
  }

  export type UsersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolesCreateInput = {
    title: string
    Users?: UsersCreateNestedManyWithoutRoleInput
  }

  export type RolesUncheckedCreateInput = {
    id?: number
    title: string
    Users?: UsersUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RolesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    Users?: UsersUpdateManyWithoutRoleNestedInput
  }

  export type RolesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    Users?: UsersUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RolesCreateManyInput = {
    id?: number
    title: string
  }

  export type RolesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type RolesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type LocationsCreateInput = {
    longtitude: string
    latitude: string
    User: UsersCreateNestedOneWithoutLocationInput
  }

  export type LocationsUncheckedCreateInput = {
    user_id: number
    longtitude: string
    latitude: string
  }

  export type LocationsUpdateInput = {
    longtitude?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
    User?: UsersUpdateOneRequiredWithoutLocationNestedInput
  }

  export type LocationsUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    longtitude?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
  }

  export type LocationsCreateManyInput = {
    user_id: number
    longtitude: string
    latitude: string
  }

  export type LocationsUpdateManyMutationInput = {
    longtitude?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
  }

  export type LocationsUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    longtitude?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
  }

  export type FavouriteItemsCreateInput = {
    User: UsersCreateNestedOneWithoutFavouriteItemsInput
    Items: ItemsCreateNestedOneWithoutFavouriteItemsInput
  }

  export type FavouriteItemsUncheckedCreateInput = {
    user_id: number
    items_id: number
  }

  export type FavouriteItemsUpdateInput = {
    User?: UsersUpdateOneRequiredWithoutFavouriteItemsNestedInput
    Items?: ItemsUpdateOneRequiredWithoutFavouriteItemsNestedInput
  }

  export type FavouriteItemsUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    items_id?: IntFieldUpdateOperationsInput | number
  }

  export type FavouriteItemsCreateManyInput = {
    user_id: number
    items_id: number
  }

  export type FavouriteItemsUpdateManyMutationInput = {

  }

  export type FavouriteItemsUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    items_id?: IntFieldUpdateOperationsInput | number
  }

  export type ItemsCreateInput = {
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
    Users: UsersCreateNestedOneWithoutItemsInput
    SubCategories: SubCategoriesCreateNestedOneWithoutItemsInput
    ExchangeTo?: ExchangeToCreateNestedManyWithoutItemInput
    FavouriteItems?: FavouriteItemsCreateNestedManyWithoutItemsInput
    Notifications?: NotificationsCreateNestedManyWithoutItemInput
  }

  export type ItemsUncheckedCreateInput = {
    id?: number
    users_id: number
    subCategories_id: number
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
    ExchangeTo?: ExchangeToUncheckedCreateNestedManyWithoutItemInput
    FavouriteItems?: FavouriteItemsUncheckedCreateNestedManyWithoutItemsInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Users?: UsersUpdateOneRequiredWithoutItemsNestedInput
    SubCategories?: SubCategoriesUpdateOneRequiredWithoutItemsNestedInput
    ExchangeTo?: ExchangeToUpdateManyWithoutItemNestedInput
    FavouriteItems?: FavouriteItemsUpdateManyWithoutItemsNestedInput
    Notifications?: NotificationsUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    users_id?: IntFieldUpdateOperationsInput | number
    subCategories_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ExchangeTo?: ExchangeToUncheckedUpdateManyWithoutItemNestedInput
    FavouriteItems?: FavouriteItemsUncheckedUpdateManyWithoutItemsNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemsCreateManyInput = {
    id?: number
    users_id: number
    subCategories_id: number
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ItemsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    users_id?: IntFieldUpdateOperationsInput | number
    subCategories_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubCategoriesCreateInput = {
    title: string
    nr?: number | null
    Category: CategoriesCreateNestedOneWithoutSubCategoriesInput
    Items?: ItemsCreateNestedManyWithoutSubCategoriesInput
    ExchangeTo?: ExchangeToCreateNestedManyWithoutSubCategoriesInput
  }

  export type SubCategoriesUncheckedCreateInput = {
    id?: number
    category_id: number
    title: string
    nr?: number | null
    Items?: ItemsUncheckedCreateNestedManyWithoutSubCategoriesInput
    ExchangeTo?: ExchangeToUncheckedCreateNestedManyWithoutSubCategoriesInput
  }

  export type SubCategoriesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    nr?: NullableIntFieldUpdateOperationsInput | number | null
    Category?: CategoriesUpdateOneRequiredWithoutSubCategoriesNestedInput
    Items?: ItemsUpdateManyWithoutSubCategoriesNestedInput
    ExchangeTo?: ExchangeToUpdateManyWithoutSubCategoriesNestedInput
  }

  export type SubCategoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    nr?: NullableIntFieldUpdateOperationsInput | number | null
    Items?: ItemsUncheckedUpdateManyWithoutSubCategoriesNestedInput
    ExchangeTo?: ExchangeToUncheckedUpdateManyWithoutSubCategoriesNestedInput
  }

  export type SubCategoriesCreateManyInput = {
    id?: number
    category_id: number
    title: string
    nr?: number | null
  }

  export type SubCategoriesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    nr?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubCategoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    nr?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CategoriesCreateInput = {
    title: string
    nr: number
    SubCategories?: SubCategoriesCreateNestedManyWithoutCategoryInput
  }

  export type CategoriesUncheckedCreateInput = {
    id?: number
    title: string
    nr: number
    SubCategories?: SubCategoriesUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoriesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    nr?: IntFieldUpdateOperationsInput | number
    SubCategories?: SubCategoriesUpdateManyWithoutCategoryNestedInput
  }

  export type CategoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    nr?: IntFieldUpdateOperationsInput | number
    SubCategories?: SubCategoriesUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoriesCreateManyInput = {
    id?: number
    title: string
    nr: number
  }

  export type CategoriesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    nr?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    nr?: IntFieldUpdateOperationsInput | number
  }

  export type ExchangeToCreateInput = {
    Item: ItemsCreateNestedOneWithoutExchangeToInput
    SubCategories: SubCategoriesCreateNestedOneWithoutExchangeToInput
  }

  export type ExchangeToUncheckedCreateInput = {
    id?: number
    items_id: number
    subCategories_id: number
  }

  export type ExchangeToUpdateInput = {
    Item?: ItemsUpdateOneRequiredWithoutExchangeToNestedInput
    SubCategories?: SubCategoriesUpdateOneRequiredWithoutExchangeToNestedInput
  }

  export type ExchangeToUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    items_id?: IntFieldUpdateOperationsInput | number
    subCategories_id?: IntFieldUpdateOperationsInput | number
  }

  export type ExchangeToCreateManyInput = {
    id?: number
    items_id: number
    subCategories_id: number
  }

  export type ExchangeToUpdateManyMutationInput = {

  }

  export type ExchangeToUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    items_id?: IntFieldUpdateOperationsInput | number
    subCategories_id?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationsCreateInput = {
    data: string
    seen: boolean
    created_at?: Date | string
    User: UsersCreateNestedOneWithoutNotificationsInput
    Item?: ItemsCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationsUncheckedCreateInput = {
    id?: number
    user_id: number
    item_id?: number | null
    data: string
    seen: boolean
    created_at?: Date | string
  }

  export type NotificationsUpdateInput = {
    data?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutNotificationsNestedInput
    Item?: ItemsUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    item_id?: NullableIntFieldUpdateOperationsInput | number | null
    data?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsCreateManyInput = {
    id?: number
    user_id: number
    item_id?: number | null
    data: string
    seen: boolean
    created_at?: Date | string
  }

  export type NotificationsUpdateManyMutationInput = {
    data?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    item_id?: NullableIntFieldUpdateOperationsInput | number | null
    data?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokensCreateInput = {
    token: string
    User: UsersCreateNestedOneWithoutTokensInput
  }

  export type TokensUncheckedCreateInput = {
    id?: number
    user_id: number
    token: string
  }

  export type TokensUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    User?: UsersUpdateOneRequiredWithoutTokensNestedInput
  }

  export type TokensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
  }

  export type TokensCreateManyInput = {
    id?: number
    user_id: number
    token: string
  }

  export type TokensUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
  }

  export type TokensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RolesRelationFilter = {
    is?: RolesWhereInput
    isNot?: RolesWhereInput
  }

  export type FavouriteItemsListRelationFilter = {
    every?: FavouriteItemsWhereInput
    some?: FavouriteItemsWhereInput
    none?: FavouriteItemsWhereInput
  }

  export type ItemsListRelationFilter = {
    every?: ItemsWhereInput
    some?: ItemsWhereInput
    none?: ItemsWhereInput
  }

  export type LocationsListRelationFilter = {
    every?: LocationsWhereInput
    some?: LocationsWhereInput
    none?: LocationsWhereInput
  }

  export type NotificationsListRelationFilter = {
    every?: NotificationsWhereInput
    some?: NotificationsWhereInput
    none?: NotificationsWhereInput
  }

  export type TokensListRelationFilter = {
    every?: TokensWhereInput
    some?: TokensWhereInput
    none?: TokensWhereInput
  }

  export type FavouriteItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TokensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersUsernameEmailCompoundUniqueInput = {
    username: string
    email: string
  }

  export type UsersUsernamePasswordCompoundUniqueInput = {
    username: string
    password: string
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    createdAt?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    createdAt?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    createdAt?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type UsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RolesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type RolesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RolesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type RolesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type RolesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type LocationsCountOrderByAggregateInput = {
    user_id?: SortOrder
    longtitude?: SortOrder
    latitude?: SortOrder
  }

  export type LocationsAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type LocationsMaxOrderByAggregateInput = {
    user_id?: SortOrder
    longtitude?: SortOrder
    latitude?: SortOrder
  }

  export type LocationsMinOrderByAggregateInput = {
    user_id?: SortOrder
    longtitude?: SortOrder
    latitude?: SortOrder
  }

  export type LocationsSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type ItemsRelationFilter = {
    is?: ItemsWhereInput
    isNot?: ItemsWhereInput
  }

  export type FavouriteItemsUser_idItems_idCompoundUniqueInput = {
    user_id: number
    items_id: number
  }

  export type FavouriteItemsCountOrderByAggregateInput = {
    user_id?: SortOrder
    items_id?: SortOrder
  }

  export type FavouriteItemsAvgOrderByAggregateInput = {
    user_id?: SortOrder
    items_id?: SortOrder
  }

  export type FavouriteItemsMaxOrderByAggregateInput = {
    user_id?: SortOrder
    items_id?: SortOrder
  }

  export type FavouriteItemsMinOrderByAggregateInput = {
    user_id?: SortOrder
    items_id?: SortOrder
  }

  export type FavouriteItemsSumOrderByAggregateInput = {
    user_id?: SortOrder
    items_id?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type SubCategoriesRelationFilter = {
    is?: SubCategoriesWhereInput
    isNot?: SubCategoriesWhereInput
  }

  export type ExchangeToListRelationFilter = {
    every?: ExchangeToWhereInput
    some?: ExchangeToWhereInput
    none?: ExchangeToWhereInput
  }

  export type ExchangeToOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ItemsCountOrderByAggregateInput = {
    id?: SortOrder
    users_id?: SortOrder
    subCategories_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    photo?: SortOrder
    price?: SortOrder
    for_sale?: SortOrder
    exchange?: SortOrder
    visibility?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ItemsAvgOrderByAggregateInput = {
    id?: SortOrder
    users_id?: SortOrder
    subCategories_id?: SortOrder
    price?: SortOrder
  }

  export type ItemsMaxOrderByAggregateInput = {
    id?: SortOrder
    users_id?: SortOrder
    subCategories_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    photo?: SortOrder
    price?: SortOrder
    for_sale?: SortOrder
    exchange?: SortOrder
    visibility?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ItemsMinOrderByAggregateInput = {
    id?: SortOrder
    users_id?: SortOrder
    subCategories_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    photo?: SortOrder
    price?: SortOrder
    for_sale?: SortOrder
    exchange?: SortOrder
    visibility?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ItemsSumOrderByAggregateInput = {
    id?: SortOrder
    users_id?: SortOrder
    subCategories_id?: SortOrder
    price?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CategoriesRelationFilter = {
    is?: CategoriesWhereInput
    isNot?: CategoriesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SubCategoriesCountOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    title?: SortOrder
    nr?: SortOrder
  }

  export type SubCategoriesAvgOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    nr?: SortOrder
  }

  export type SubCategoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    title?: SortOrder
    nr?: SortOrder
  }

  export type SubCategoriesMinOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    title?: SortOrder
    nr?: SortOrder
  }

  export type SubCategoriesSumOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    nr?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SubCategoriesListRelationFilter = {
    every?: SubCategoriesWhereInput
    some?: SubCategoriesWhereInput
    none?: SubCategoriesWhereInput
  }

  export type SubCategoriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoriesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    nr?: SortOrder
  }

  export type CategoriesAvgOrderByAggregateInput = {
    id?: SortOrder
    nr?: SortOrder
  }

  export type CategoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    nr?: SortOrder
  }

  export type CategoriesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    nr?: SortOrder
  }

  export type CategoriesSumOrderByAggregateInput = {
    id?: SortOrder
    nr?: SortOrder
  }

  export type ExchangeToCountOrderByAggregateInput = {
    id?: SortOrder
    items_id?: SortOrder
    subCategories_id?: SortOrder
  }

  export type ExchangeToAvgOrderByAggregateInput = {
    id?: SortOrder
    items_id?: SortOrder
    subCategories_id?: SortOrder
  }

  export type ExchangeToMaxOrderByAggregateInput = {
    id?: SortOrder
    items_id?: SortOrder
    subCategories_id?: SortOrder
  }

  export type ExchangeToMinOrderByAggregateInput = {
    id?: SortOrder
    items_id?: SortOrder
    subCategories_id?: SortOrder
  }

  export type ExchangeToSumOrderByAggregateInput = {
    id?: SortOrder
    items_id?: SortOrder
    subCategories_id?: SortOrder
  }

  export type ItemsNullableRelationFilter = {
    is?: ItemsWhereInput | null
    isNot?: ItemsWhereInput | null
  }

  export type NotificationsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    item_id?: SortOrder
    data?: SortOrder
    seen?: SortOrder
    created_at?: SortOrder
  }

  export type NotificationsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    item_id?: SortOrder
  }

  export type NotificationsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    item_id?: SortOrder
    data?: SortOrder
    seen?: SortOrder
    created_at?: SortOrder
  }

  export type NotificationsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    item_id?: SortOrder
    data?: SortOrder
    seen?: SortOrder
    created_at?: SortOrder
  }

  export type NotificationsSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    item_id?: SortOrder
  }

  export type TokensCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
  }

  export type TokensAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type TokensMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
  }

  export type TokensMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
  }

  export type TokensSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type RolesCreateNestedOneWithoutUsersInput = {
    create?: XOR<RolesCreateWithoutUsersInput, RolesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RolesCreateOrConnectWithoutUsersInput
    connect?: RolesWhereUniqueInput
  }

  export type FavouriteItemsCreateNestedManyWithoutUserInput = {
    create?: XOR<FavouriteItemsCreateWithoutUserInput, FavouriteItemsUncheckedCreateWithoutUserInput> | FavouriteItemsCreateWithoutUserInput[] | FavouriteItemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavouriteItemsCreateOrConnectWithoutUserInput | FavouriteItemsCreateOrConnectWithoutUserInput[]
    createMany?: FavouriteItemsCreateManyUserInputEnvelope
    connect?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
  }

  export type ItemsCreateNestedManyWithoutUsersInput = {
    create?: XOR<ItemsCreateWithoutUsersInput, ItemsUncheckedCreateWithoutUsersInput> | ItemsCreateWithoutUsersInput[] | ItemsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutUsersInput | ItemsCreateOrConnectWithoutUsersInput[]
    createMany?: ItemsCreateManyUsersInputEnvelope
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
  }

  export type LocationsCreateNestedManyWithoutUserInput = {
    create?: XOR<LocationsCreateWithoutUserInput, LocationsUncheckedCreateWithoutUserInput> | LocationsCreateWithoutUserInput[] | LocationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LocationsCreateOrConnectWithoutUserInput | LocationsCreateOrConnectWithoutUserInput[]
    createMany?: LocationsCreateManyUserInputEnvelope
    connect?: LocationsWhereUniqueInput | LocationsWhereUniqueInput[]
  }

  export type NotificationsCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationsCreateWithoutUserInput, NotificationsUncheckedCreateWithoutUserInput> | NotificationsCreateWithoutUserInput[] | NotificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutUserInput | NotificationsCreateOrConnectWithoutUserInput[]
    createMany?: NotificationsCreateManyUserInputEnvelope
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
  }

  export type TokensCreateNestedManyWithoutUserInput = {
    create?: XOR<TokensCreateWithoutUserInput, TokensUncheckedCreateWithoutUserInput> | TokensCreateWithoutUserInput[] | TokensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokensCreateOrConnectWithoutUserInput | TokensCreateOrConnectWithoutUserInput[]
    createMany?: TokensCreateManyUserInputEnvelope
    connect?: TokensWhereUniqueInput | TokensWhereUniqueInput[]
  }

  export type FavouriteItemsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavouriteItemsCreateWithoutUserInput, FavouriteItemsUncheckedCreateWithoutUserInput> | FavouriteItemsCreateWithoutUserInput[] | FavouriteItemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavouriteItemsCreateOrConnectWithoutUserInput | FavouriteItemsCreateOrConnectWithoutUserInput[]
    createMany?: FavouriteItemsCreateManyUserInputEnvelope
    connect?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
  }

  export type ItemsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ItemsCreateWithoutUsersInput, ItemsUncheckedCreateWithoutUsersInput> | ItemsCreateWithoutUsersInput[] | ItemsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutUsersInput | ItemsCreateOrConnectWithoutUsersInput[]
    createMany?: ItemsCreateManyUsersInputEnvelope
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
  }

  export type LocationsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LocationsCreateWithoutUserInput, LocationsUncheckedCreateWithoutUserInput> | LocationsCreateWithoutUserInput[] | LocationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LocationsCreateOrConnectWithoutUserInput | LocationsCreateOrConnectWithoutUserInput[]
    createMany?: LocationsCreateManyUserInputEnvelope
    connect?: LocationsWhereUniqueInput | LocationsWhereUniqueInput[]
  }

  export type NotificationsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationsCreateWithoutUserInput, NotificationsUncheckedCreateWithoutUserInput> | NotificationsCreateWithoutUserInput[] | NotificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutUserInput | NotificationsCreateOrConnectWithoutUserInput[]
    createMany?: NotificationsCreateManyUserInputEnvelope
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
  }

  export type TokensUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TokensCreateWithoutUserInput, TokensUncheckedCreateWithoutUserInput> | TokensCreateWithoutUserInput[] | TokensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokensCreateOrConnectWithoutUserInput | TokensCreateOrConnectWithoutUserInput[]
    createMany?: TokensCreateManyUserInputEnvelope
    connect?: TokensWhereUniqueInput | TokensWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RolesUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RolesCreateWithoutUsersInput, RolesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RolesCreateOrConnectWithoutUsersInput
    upsert?: RolesUpsertWithoutUsersInput
    connect?: RolesWhereUniqueInput
    update?: XOR<XOR<RolesUpdateToOneWithWhereWithoutUsersInput, RolesUpdateWithoutUsersInput>, RolesUncheckedUpdateWithoutUsersInput>
  }

  export type FavouriteItemsUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavouriteItemsCreateWithoutUserInput, FavouriteItemsUncheckedCreateWithoutUserInput> | FavouriteItemsCreateWithoutUserInput[] | FavouriteItemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavouriteItemsCreateOrConnectWithoutUserInput | FavouriteItemsCreateOrConnectWithoutUserInput[]
    upsert?: FavouriteItemsUpsertWithWhereUniqueWithoutUserInput | FavouriteItemsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavouriteItemsCreateManyUserInputEnvelope
    set?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    disconnect?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    delete?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    connect?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    update?: FavouriteItemsUpdateWithWhereUniqueWithoutUserInput | FavouriteItemsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavouriteItemsUpdateManyWithWhereWithoutUserInput | FavouriteItemsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavouriteItemsScalarWhereInput | FavouriteItemsScalarWhereInput[]
  }

  export type ItemsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ItemsCreateWithoutUsersInput, ItemsUncheckedCreateWithoutUsersInput> | ItemsCreateWithoutUsersInput[] | ItemsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutUsersInput | ItemsCreateOrConnectWithoutUsersInput[]
    upsert?: ItemsUpsertWithWhereUniqueWithoutUsersInput | ItemsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ItemsCreateManyUsersInputEnvelope
    set?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    disconnect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    delete?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    update?: ItemsUpdateWithWhereUniqueWithoutUsersInput | ItemsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ItemsUpdateManyWithWhereWithoutUsersInput | ItemsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ItemsScalarWhereInput | ItemsScalarWhereInput[]
  }

  export type LocationsUpdateManyWithoutUserNestedInput = {
    create?: XOR<LocationsCreateWithoutUserInput, LocationsUncheckedCreateWithoutUserInput> | LocationsCreateWithoutUserInput[] | LocationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LocationsCreateOrConnectWithoutUserInput | LocationsCreateOrConnectWithoutUserInput[]
    upsert?: LocationsUpsertWithWhereUniqueWithoutUserInput | LocationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LocationsCreateManyUserInputEnvelope
    set?: LocationsWhereUniqueInput | LocationsWhereUniqueInput[]
    disconnect?: LocationsWhereUniqueInput | LocationsWhereUniqueInput[]
    delete?: LocationsWhereUniqueInput | LocationsWhereUniqueInput[]
    connect?: LocationsWhereUniqueInput | LocationsWhereUniqueInput[]
    update?: LocationsUpdateWithWhereUniqueWithoutUserInput | LocationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LocationsUpdateManyWithWhereWithoutUserInput | LocationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LocationsScalarWhereInput | LocationsScalarWhereInput[]
  }

  export type NotificationsUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationsCreateWithoutUserInput, NotificationsUncheckedCreateWithoutUserInput> | NotificationsCreateWithoutUserInput[] | NotificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutUserInput | NotificationsCreateOrConnectWithoutUserInput[]
    upsert?: NotificationsUpsertWithWhereUniqueWithoutUserInput | NotificationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationsCreateManyUserInputEnvelope
    set?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    disconnect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    delete?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    update?: NotificationsUpdateWithWhereUniqueWithoutUserInput | NotificationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationsUpdateManyWithWhereWithoutUserInput | NotificationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
  }

  export type TokensUpdateManyWithoutUserNestedInput = {
    create?: XOR<TokensCreateWithoutUserInput, TokensUncheckedCreateWithoutUserInput> | TokensCreateWithoutUserInput[] | TokensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokensCreateOrConnectWithoutUserInput | TokensCreateOrConnectWithoutUserInput[]
    upsert?: TokensUpsertWithWhereUniqueWithoutUserInput | TokensUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TokensCreateManyUserInputEnvelope
    set?: TokensWhereUniqueInput | TokensWhereUniqueInput[]
    disconnect?: TokensWhereUniqueInput | TokensWhereUniqueInput[]
    delete?: TokensWhereUniqueInput | TokensWhereUniqueInput[]
    connect?: TokensWhereUniqueInput | TokensWhereUniqueInput[]
    update?: TokensUpdateWithWhereUniqueWithoutUserInput | TokensUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TokensUpdateManyWithWhereWithoutUserInput | TokensUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TokensScalarWhereInput | TokensScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FavouriteItemsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavouriteItemsCreateWithoutUserInput, FavouriteItemsUncheckedCreateWithoutUserInput> | FavouriteItemsCreateWithoutUserInput[] | FavouriteItemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavouriteItemsCreateOrConnectWithoutUserInput | FavouriteItemsCreateOrConnectWithoutUserInput[]
    upsert?: FavouriteItemsUpsertWithWhereUniqueWithoutUserInput | FavouriteItemsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavouriteItemsCreateManyUserInputEnvelope
    set?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    disconnect?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    delete?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    connect?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    update?: FavouriteItemsUpdateWithWhereUniqueWithoutUserInput | FavouriteItemsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavouriteItemsUpdateManyWithWhereWithoutUserInput | FavouriteItemsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavouriteItemsScalarWhereInput | FavouriteItemsScalarWhereInput[]
  }

  export type ItemsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ItemsCreateWithoutUsersInput, ItemsUncheckedCreateWithoutUsersInput> | ItemsCreateWithoutUsersInput[] | ItemsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutUsersInput | ItemsCreateOrConnectWithoutUsersInput[]
    upsert?: ItemsUpsertWithWhereUniqueWithoutUsersInput | ItemsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ItemsCreateManyUsersInputEnvelope
    set?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    disconnect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    delete?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    update?: ItemsUpdateWithWhereUniqueWithoutUsersInput | ItemsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ItemsUpdateManyWithWhereWithoutUsersInput | ItemsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ItemsScalarWhereInput | ItemsScalarWhereInput[]
  }

  export type LocationsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LocationsCreateWithoutUserInput, LocationsUncheckedCreateWithoutUserInput> | LocationsCreateWithoutUserInput[] | LocationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LocationsCreateOrConnectWithoutUserInput | LocationsCreateOrConnectWithoutUserInput[]
    upsert?: LocationsUpsertWithWhereUniqueWithoutUserInput | LocationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LocationsCreateManyUserInputEnvelope
    set?: LocationsWhereUniqueInput | LocationsWhereUniqueInput[]
    disconnect?: LocationsWhereUniqueInput | LocationsWhereUniqueInput[]
    delete?: LocationsWhereUniqueInput | LocationsWhereUniqueInput[]
    connect?: LocationsWhereUniqueInput | LocationsWhereUniqueInput[]
    update?: LocationsUpdateWithWhereUniqueWithoutUserInput | LocationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LocationsUpdateManyWithWhereWithoutUserInput | LocationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LocationsScalarWhereInput | LocationsScalarWhereInput[]
  }

  export type NotificationsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationsCreateWithoutUserInput, NotificationsUncheckedCreateWithoutUserInput> | NotificationsCreateWithoutUserInput[] | NotificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutUserInput | NotificationsCreateOrConnectWithoutUserInput[]
    upsert?: NotificationsUpsertWithWhereUniqueWithoutUserInput | NotificationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationsCreateManyUserInputEnvelope
    set?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    disconnect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    delete?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    update?: NotificationsUpdateWithWhereUniqueWithoutUserInput | NotificationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationsUpdateManyWithWhereWithoutUserInput | NotificationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
  }

  export type TokensUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TokensCreateWithoutUserInput, TokensUncheckedCreateWithoutUserInput> | TokensCreateWithoutUserInput[] | TokensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokensCreateOrConnectWithoutUserInput | TokensCreateOrConnectWithoutUserInput[]
    upsert?: TokensUpsertWithWhereUniqueWithoutUserInput | TokensUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TokensCreateManyUserInputEnvelope
    set?: TokensWhereUniqueInput | TokensWhereUniqueInput[]
    disconnect?: TokensWhereUniqueInput | TokensWhereUniqueInput[]
    delete?: TokensWhereUniqueInput | TokensWhereUniqueInput[]
    connect?: TokensWhereUniqueInput | TokensWhereUniqueInput[]
    update?: TokensUpdateWithWhereUniqueWithoutUserInput | TokensUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TokensUpdateManyWithWhereWithoutUserInput | TokensUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TokensScalarWhereInput | TokensScalarWhereInput[]
  }

  export type UsersCreateNestedManyWithoutRoleInput = {
    create?: XOR<UsersCreateWithoutRoleInput, UsersUncheckedCreateWithoutRoleInput> | UsersCreateWithoutRoleInput[] | UsersUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutRoleInput | UsersCreateOrConnectWithoutRoleInput[]
    createMany?: UsersCreateManyRoleInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UsersCreateWithoutRoleInput, UsersUncheckedCreateWithoutRoleInput> | UsersCreateWithoutRoleInput[] | UsersUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutRoleInput | UsersCreateOrConnectWithoutRoleInput[]
    createMany?: UsersCreateManyRoleInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UsersCreateWithoutRoleInput, UsersUncheckedCreateWithoutRoleInput> | UsersCreateWithoutRoleInput[] | UsersUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutRoleInput | UsersCreateOrConnectWithoutRoleInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutRoleInput | UsersUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UsersCreateManyRoleInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutRoleInput | UsersUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutRoleInput | UsersUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UsersCreateWithoutRoleInput, UsersUncheckedCreateWithoutRoleInput> | UsersCreateWithoutRoleInput[] | UsersUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutRoleInput | UsersCreateOrConnectWithoutRoleInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutRoleInput | UsersUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UsersCreateManyRoleInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutRoleInput | UsersUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutRoleInput | UsersUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutLocationInput = {
    create?: XOR<UsersCreateWithoutLocationInput, UsersUncheckedCreateWithoutLocationInput>
    connectOrCreate?: UsersCreateOrConnectWithoutLocationInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutLocationNestedInput = {
    create?: XOR<UsersCreateWithoutLocationInput, UsersUncheckedCreateWithoutLocationInput>
    connectOrCreate?: UsersCreateOrConnectWithoutLocationInput
    upsert?: UsersUpsertWithoutLocationInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutLocationInput, UsersUpdateWithoutLocationInput>, UsersUncheckedUpdateWithoutLocationInput>
  }

  export type UsersCreateNestedOneWithoutFavouriteItemsInput = {
    create?: XOR<UsersCreateWithoutFavouriteItemsInput, UsersUncheckedCreateWithoutFavouriteItemsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutFavouriteItemsInput
    connect?: UsersWhereUniqueInput
  }

  export type ItemsCreateNestedOneWithoutFavouriteItemsInput = {
    create?: XOR<ItemsCreateWithoutFavouriteItemsInput, ItemsUncheckedCreateWithoutFavouriteItemsInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutFavouriteItemsInput
    connect?: ItemsWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutFavouriteItemsNestedInput = {
    create?: XOR<UsersCreateWithoutFavouriteItemsInput, UsersUncheckedCreateWithoutFavouriteItemsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutFavouriteItemsInput
    upsert?: UsersUpsertWithoutFavouriteItemsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutFavouriteItemsInput, UsersUpdateWithoutFavouriteItemsInput>, UsersUncheckedUpdateWithoutFavouriteItemsInput>
  }

  export type ItemsUpdateOneRequiredWithoutFavouriteItemsNestedInput = {
    create?: XOR<ItemsCreateWithoutFavouriteItemsInput, ItemsUncheckedCreateWithoutFavouriteItemsInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutFavouriteItemsInput
    upsert?: ItemsUpsertWithoutFavouriteItemsInput
    connect?: ItemsWhereUniqueInput
    update?: XOR<XOR<ItemsUpdateToOneWithWhereWithoutFavouriteItemsInput, ItemsUpdateWithoutFavouriteItemsInput>, ItemsUncheckedUpdateWithoutFavouriteItemsInput>
  }

  export type UsersCreateNestedOneWithoutItemsInput = {
    create?: XOR<UsersCreateWithoutItemsInput, UsersUncheckedCreateWithoutItemsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutItemsInput
    connect?: UsersWhereUniqueInput
  }

  export type SubCategoriesCreateNestedOneWithoutItemsInput = {
    create?: XOR<SubCategoriesCreateWithoutItemsInput, SubCategoriesUncheckedCreateWithoutItemsInput>
    connectOrCreate?: SubCategoriesCreateOrConnectWithoutItemsInput
    connect?: SubCategoriesWhereUniqueInput
  }

  export type ExchangeToCreateNestedManyWithoutItemInput = {
    create?: XOR<ExchangeToCreateWithoutItemInput, ExchangeToUncheckedCreateWithoutItemInput> | ExchangeToCreateWithoutItemInput[] | ExchangeToUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ExchangeToCreateOrConnectWithoutItemInput | ExchangeToCreateOrConnectWithoutItemInput[]
    createMany?: ExchangeToCreateManyItemInputEnvelope
    connect?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
  }

  export type FavouriteItemsCreateNestedManyWithoutItemsInput = {
    create?: XOR<FavouriteItemsCreateWithoutItemsInput, FavouriteItemsUncheckedCreateWithoutItemsInput> | FavouriteItemsCreateWithoutItemsInput[] | FavouriteItemsUncheckedCreateWithoutItemsInput[]
    connectOrCreate?: FavouriteItemsCreateOrConnectWithoutItemsInput | FavouriteItemsCreateOrConnectWithoutItemsInput[]
    createMany?: FavouriteItemsCreateManyItemsInputEnvelope
    connect?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
  }

  export type NotificationsCreateNestedManyWithoutItemInput = {
    create?: XOR<NotificationsCreateWithoutItemInput, NotificationsUncheckedCreateWithoutItemInput> | NotificationsCreateWithoutItemInput[] | NotificationsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutItemInput | NotificationsCreateOrConnectWithoutItemInput[]
    createMany?: NotificationsCreateManyItemInputEnvelope
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
  }

  export type ExchangeToUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<ExchangeToCreateWithoutItemInput, ExchangeToUncheckedCreateWithoutItemInput> | ExchangeToCreateWithoutItemInput[] | ExchangeToUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ExchangeToCreateOrConnectWithoutItemInput | ExchangeToCreateOrConnectWithoutItemInput[]
    createMany?: ExchangeToCreateManyItemInputEnvelope
    connect?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
  }

  export type FavouriteItemsUncheckedCreateNestedManyWithoutItemsInput = {
    create?: XOR<FavouriteItemsCreateWithoutItemsInput, FavouriteItemsUncheckedCreateWithoutItemsInput> | FavouriteItemsCreateWithoutItemsInput[] | FavouriteItemsUncheckedCreateWithoutItemsInput[]
    connectOrCreate?: FavouriteItemsCreateOrConnectWithoutItemsInput | FavouriteItemsCreateOrConnectWithoutItemsInput[]
    createMany?: FavouriteItemsCreateManyItemsInputEnvelope
    connect?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
  }

  export type NotificationsUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<NotificationsCreateWithoutItemInput, NotificationsUncheckedCreateWithoutItemInput> | NotificationsCreateWithoutItemInput[] | NotificationsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutItemInput | NotificationsCreateOrConnectWithoutItemInput[]
    createMany?: NotificationsCreateManyItemInputEnvelope
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UsersUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<UsersCreateWithoutItemsInput, UsersUncheckedCreateWithoutItemsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutItemsInput
    upsert?: UsersUpsertWithoutItemsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutItemsInput, UsersUpdateWithoutItemsInput>, UsersUncheckedUpdateWithoutItemsInput>
  }

  export type SubCategoriesUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<SubCategoriesCreateWithoutItemsInput, SubCategoriesUncheckedCreateWithoutItemsInput>
    connectOrCreate?: SubCategoriesCreateOrConnectWithoutItemsInput
    upsert?: SubCategoriesUpsertWithoutItemsInput
    connect?: SubCategoriesWhereUniqueInput
    update?: XOR<XOR<SubCategoriesUpdateToOneWithWhereWithoutItemsInput, SubCategoriesUpdateWithoutItemsInput>, SubCategoriesUncheckedUpdateWithoutItemsInput>
  }

  export type ExchangeToUpdateManyWithoutItemNestedInput = {
    create?: XOR<ExchangeToCreateWithoutItemInput, ExchangeToUncheckedCreateWithoutItemInput> | ExchangeToCreateWithoutItemInput[] | ExchangeToUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ExchangeToCreateOrConnectWithoutItemInput | ExchangeToCreateOrConnectWithoutItemInput[]
    upsert?: ExchangeToUpsertWithWhereUniqueWithoutItemInput | ExchangeToUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: ExchangeToCreateManyItemInputEnvelope
    set?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    disconnect?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    delete?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    connect?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    update?: ExchangeToUpdateWithWhereUniqueWithoutItemInput | ExchangeToUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: ExchangeToUpdateManyWithWhereWithoutItemInput | ExchangeToUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: ExchangeToScalarWhereInput | ExchangeToScalarWhereInput[]
  }

  export type FavouriteItemsUpdateManyWithoutItemsNestedInput = {
    create?: XOR<FavouriteItemsCreateWithoutItemsInput, FavouriteItemsUncheckedCreateWithoutItemsInput> | FavouriteItemsCreateWithoutItemsInput[] | FavouriteItemsUncheckedCreateWithoutItemsInput[]
    connectOrCreate?: FavouriteItemsCreateOrConnectWithoutItemsInput | FavouriteItemsCreateOrConnectWithoutItemsInput[]
    upsert?: FavouriteItemsUpsertWithWhereUniqueWithoutItemsInput | FavouriteItemsUpsertWithWhereUniqueWithoutItemsInput[]
    createMany?: FavouriteItemsCreateManyItemsInputEnvelope
    set?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    disconnect?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    delete?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    connect?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    update?: FavouriteItemsUpdateWithWhereUniqueWithoutItemsInput | FavouriteItemsUpdateWithWhereUniqueWithoutItemsInput[]
    updateMany?: FavouriteItemsUpdateManyWithWhereWithoutItemsInput | FavouriteItemsUpdateManyWithWhereWithoutItemsInput[]
    deleteMany?: FavouriteItemsScalarWhereInput | FavouriteItemsScalarWhereInput[]
  }

  export type NotificationsUpdateManyWithoutItemNestedInput = {
    create?: XOR<NotificationsCreateWithoutItemInput, NotificationsUncheckedCreateWithoutItemInput> | NotificationsCreateWithoutItemInput[] | NotificationsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutItemInput | NotificationsCreateOrConnectWithoutItemInput[]
    upsert?: NotificationsUpsertWithWhereUniqueWithoutItemInput | NotificationsUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: NotificationsCreateManyItemInputEnvelope
    set?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    disconnect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    delete?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    update?: NotificationsUpdateWithWhereUniqueWithoutItemInput | NotificationsUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: NotificationsUpdateManyWithWhereWithoutItemInput | NotificationsUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
  }

  export type ExchangeToUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<ExchangeToCreateWithoutItemInput, ExchangeToUncheckedCreateWithoutItemInput> | ExchangeToCreateWithoutItemInput[] | ExchangeToUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ExchangeToCreateOrConnectWithoutItemInput | ExchangeToCreateOrConnectWithoutItemInput[]
    upsert?: ExchangeToUpsertWithWhereUniqueWithoutItemInput | ExchangeToUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: ExchangeToCreateManyItemInputEnvelope
    set?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    disconnect?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    delete?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    connect?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    update?: ExchangeToUpdateWithWhereUniqueWithoutItemInput | ExchangeToUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: ExchangeToUpdateManyWithWhereWithoutItemInput | ExchangeToUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: ExchangeToScalarWhereInput | ExchangeToScalarWhereInput[]
  }

  export type FavouriteItemsUncheckedUpdateManyWithoutItemsNestedInput = {
    create?: XOR<FavouriteItemsCreateWithoutItemsInput, FavouriteItemsUncheckedCreateWithoutItemsInput> | FavouriteItemsCreateWithoutItemsInput[] | FavouriteItemsUncheckedCreateWithoutItemsInput[]
    connectOrCreate?: FavouriteItemsCreateOrConnectWithoutItemsInput | FavouriteItemsCreateOrConnectWithoutItemsInput[]
    upsert?: FavouriteItemsUpsertWithWhereUniqueWithoutItemsInput | FavouriteItemsUpsertWithWhereUniqueWithoutItemsInput[]
    createMany?: FavouriteItemsCreateManyItemsInputEnvelope
    set?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    disconnect?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    delete?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    connect?: FavouriteItemsWhereUniqueInput | FavouriteItemsWhereUniqueInput[]
    update?: FavouriteItemsUpdateWithWhereUniqueWithoutItemsInput | FavouriteItemsUpdateWithWhereUniqueWithoutItemsInput[]
    updateMany?: FavouriteItemsUpdateManyWithWhereWithoutItemsInput | FavouriteItemsUpdateManyWithWhereWithoutItemsInput[]
    deleteMany?: FavouriteItemsScalarWhereInput | FavouriteItemsScalarWhereInput[]
  }

  export type NotificationsUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<NotificationsCreateWithoutItemInput, NotificationsUncheckedCreateWithoutItemInput> | NotificationsCreateWithoutItemInput[] | NotificationsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutItemInput | NotificationsCreateOrConnectWithoutItemInput[]
    upsert?: NotificationsUpsertWithWhereUniqueWithoutItemInput | NotificationsUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: NotificationsCreateManyItemInputEnvelope
    set?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    disconnect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    delete?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    update?: NotificationsUpdateWithWhereUniqueWithoutItemInput | NotificationsUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: NotificationsUpdateManyWithWhereWithoutItemInput | NotificationsUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
  }

  export type CategoriesCreateNestedOneWithoutSubCategoriesInput = {
    create?: XOR<CategoriesCreateWithoutSubCategoriesInput, CategoriesUncheckedCreateWithoutSubCategoriesInput>
    connectOrCreate?: CategoriesCreateOrConnectWithoutSubCategoriesInput
    connect?: CategoriesWhereUniqueInput
  }

  export type ItemsCreateNestedManyWithoutSubCategoriesInput = {
    create?: XOR<ItemsCreateWithoutSubCategoriesInput, ItemsUncheckedCreateWithoutSubCategoriesInput> | ItemsCreateWithoutSubCategoriesInput[] | ItemsUncheckedCreateWithoutSubCategoriesInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutSubCategoriesInput | ItemsCreateOrConnectWithoutSubCategoriesInput[]
    createMany?: ItemsCreateManySubCategoriesInputEnvelope
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
  }

  export type ExchangeToCreateNestedManyWithoutSubCategoriesInput = {
    create?: XOR<ExchangeToCreateWithoutSubCategoriesInput, ExchangeToUncheckedCreateWithoutSubCategoriesInput> | ExchangeToCreateWithoutSubCategoriesInput[] | ExchangeToUncheckedCreateWithoutSubCategoriesInput[]
    connectOrCreate?: ExchangeToCreateOrConnectWithoutSubCategoriesInput | ExchangeToCreateOrConnectWithoutSubCategoriesInput[]
    createMany?: ExchangeToCreateManySubCategoriesInputEnvelope
    connect?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
  }

  export type ItemsUncheckedCreateNestedManyWithoutSubCategoriesInput = {
    create?: XOR<ItemsCreateWithoutSubCategoriesInput, ItemsUncheckedCreateWithoutSubCategoriesInput> | ItemsCreateWithoutSubCategoriesInput[] | ItemsUncheckedCreateWithoutSubCategoriesInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutSubCategoriesInput | ItemsCreateOrConnectWithoutSubCategoriesInput[]
    createMany?: ItemsCreateManySubCategoriesInputEnvelope
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
  }

  export type ExchangeToUncheckedCreateNestedManyWithoutSubCategoriesInput = {
    create?: XOR<ExchangeToCreateWithoutSubCategoriesInput, ExchangeToUncheckedCreateWithoutSubCategoriesInput> | ExchangeToCreateWithoutSubCategoriesInput[] | ExchangeToUncheckedCreateWithoutSubCategoriesInput[]
    connectOrCreate?: ExchangeToCreateOrConnectWithoutSubCategoriesInput | ExchangeToCreateOrConnectWithoutSubCategoriesInput[]
    createMany?: ExchangeToCreateManySubCategoriesInputEnvelope
    connect?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoriesUpdateOneRequiredWithoutSubCategoriesNestedInput = {
    create?: XOR<CategoriesCreateWithoutSubCategoriesInput, CategoriesUncheckedCreateWithoutSubCategoriesInput>
    connectOrCreate?: CategoriesCreateOrConnectWithoutSubCategoriesInput
    upsert?: CategoriesUpsertWithoutSubCategoriesInput
    connect?: CategoriesWhereUniqueInput
    update?: XOR<XOR<CategoriesUpdateToOneWithWhereWithoutSubCategoriesInput, CategoriesUpdateWithoutSubCategoriesInput>, CategoriesUncheckedUpdateWithoutSubCategoriesInput>
  }

  export type ItemsUpdateManyWithoutSubCategoriesNestedInput = {
    create?: XOR<ItemsCreateWithoutSubCategoriesInput, ItemsUncheckedCreateWithoutSubCategoriesInput> | ItemsCreateWithoutSubCategoriesInput[] | ItemsUncheckedCreateWithoutSubCategoriesInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutSubCategoriesInput | ItemsCreateOrConnectWithoutSubCategoriesInput[]
    upsert?: ItemsUpsertWithWhereUniqueWithoutSubCategoriesInput | ItemsUpsertWithWhereUniqueWithoutSubCategoriesInput[]
    createMany?: ItemsCreateManySubCategoriesInputEnvelope
    set?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    disconnect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    delete?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    update?: ItemsUpdateWithWhereUniqueWithoutSubCategoriesInput | ItemsUpdateWithWhereUniqueWithoutSubCategoriesInput[]
    updateMany?: ItemsUpdateManyWithWhereWithoutSubCategoriesInput | ItemsUpdateManyWithWhereWithoutSubCategoriesInput[]
    deleteMany?: ItemsScalarWhereInput | ItemsScalarWhereInput[]
  }

  export type ExchangeToUpdateManyWithoutSubCategoriesNestedInput = {
    create?: XOR<ExchangeToCreateWithoutSubCategoriesInput, ExchangeToUncheckedCreateWithoutSubCategoriesInput> | ExchangeToCreateWithoutSubCategoriesInput[] | ExchangeToUncheckedCreateWithoutSubCategoriesInput[]
    connectOrCreate?: ExchangeToCreateOrConnectWithoutSubCategoriesInput | ExchangeToCreateOrConnectWithoutSubCategoriesInput[]
    upsert?: ExchangeToUpsertWithWhereUniqueWithoutSubCategoriesInput | ExchangeToUpsertWithWhereUniqueWithoutSubCategoriesInput[]
    createMany?: ExchangeToCreateManySubCategoriesInputEnvelope
    set?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    disconnect?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    delete?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    connect?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    update?: ExchangeToUpdateWithWhereUniqueWithoutSubCategoriesInput | ExchangeToUpdateWithWhereUniqueWithoutSubCategoriesInput[]
    updateMany?: ExchangeToUpdateManyWithWhereWithoutSubCategoriesInput | ExchangeToUpdateManyWithWhereWithoutSubCategoriesInput[]
    deleteMany?: ExchangeToScalarWhereInput | ExchangeToScalarWhereInput[]
  }

  export type ItemsUncheckedUpdateManyWithoutSubCategoriesNestedInput = {
    create?: XOR<ItemsCreateWithoutSubCategoriesInput, ItemsUncheckedCreateWithoutSubCategoriesInput> | ItemsCreateWithoutSubCategoriesInput[] | ItemsUncheckedCreateWithoutSubCategoriesInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutSubCategoriesInput | ItemsCreateOrConnectWithoutSubCategoriesInput[]
    upsert?: ItemsUpsertWithWhereUniqueWithoutSubCategoriesInput | ItemsUpsertWithWhereUniqueWithoutSubCategoriesInput[]
    createMany?: ItemsCreateManySubCategoriesInputEnvelope
    set?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    disconnect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    delete?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    update?: ItemsUpdateWithWhereUniqueWithoutSubCategoriesInput | ItemsUpdateWithWhereUniqueWithoutSubCategoriesInput[]
    updateMany?: ItemsUpdateManyWithWhereWithoutSubCategoriesInput | ItemsUpdateManyWithWhereWithoutSubCategoriesInput[]
    deleteMany?: ItemsScalarWhereInput | ItemsScalarWhereInput[]
  }

  export type ExchangeToUncheckedUpdateManyWithoutSubCategoriesNestedInput = {
    create?: XOR<ExchangeToCreateWithoutSubCategoriesInput, ExchangeToUncheckedCreateWithoutSubCategoriesInput> | ExchangeToCreateWithoutSubCategoriesInput[] | ExchangeToUncheckedCreateWithoutSubCategoriesInput[]
    connectOrCreate?: ExchangeToCreateOrConnectWithoutSubCategoriesInput | ExchangeToCreateOrConnectWithoutSubCategoriesInput[]
    upsert?: ExchangeToUpsertWithWhereUniqueWithoutSubCategoriesInput | ExchangeToUpsertWithWhereUniqueWithoutSubCategoriesInput[]
    createMany?: ExchangeToCreateManySubCategoriesInputEnvelope
    set?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    disconnect?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    delete?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    connect?: ExchangeToWhereUniqueInput | ExchangeToWhereUniqueInput[]
    update?: ExchangeToUpdateWithWhereUniqueWithoutSubCategoriesInput | ExchangeToUpdateWithWhereUniqueWithoutSubCategoriesInput[]
    updateMany?: ExchangeToUpdateManyWithWhereWithoutSubCategoriesInput | ExchangeToUpdateManyWithWhereWithoutSubCategoriesInput[]
    deleteMany?: ExchangeToScalarWhereInput | ExchangeToScalarWhereInput[]
  }

  export type SubCategoriesCreateNestedManyWithoutCategoryInput = {
    create?: XOR<SubCategoriesCreateWithoutCategoryInput, SubCategoriesUncheckedCreateWithoutCategoryInput> | SubCategoriesCreateWithoutCategoryInput[] | SubCategoriesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SubCategoriesCreateOrConnectWithoutCategoryInput | SubCategoriesCreateOrConnectWithoutCategoryInput[]
    createMany?: SubCategoriesCreateManyCategoryInputEnvelope
    connect?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
  }

  export type SubCategoriesUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<SubCategoriesCreateWithoutCategoryInput, SubCategoriesUncheckedCreateWithoutCategoryInput> | SubCategoriesCreateWithoutCategoryInput[] | SubCategoriesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SubCategoriesCreateOrConnectWithoutCategoryInput | SubCategoriesCreateOrConnectWithoutCategoryInput[]
    createMany?: SubCategoriesCreateManyCategoryInputEnvelope
    connect?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
  }

  export type SubCategoriesUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<SubCategoriesCreateWithoutCategoryInput, SubCategoriesUncheckedCreateWithoutCategoryInput> | SubCategoriesCreateWithoutCategoryInput[] | SubCategoriesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SubCategoriesCreateOrConnectWithoutCategoryInput | SubCategoriesCreateOrConnectWithoutCategoryInput[]
    upsert?: SubCategoriesUpsertWithWhereUniqueWithoutCategoryInput | SubCategoriesUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: SubCategoriesCreateManyCategoryInputEnvelope
    set?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    disconnect?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    delete?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    connect?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    update?: SubCategoriesUpdateWithWhereUniqueWithoutCategoryInput | SubCategoriesUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: SubCategoriesUpdateManyWithWhereWithoutCategoryInput | SubCategoriesUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: SubCategoriesScalarWhereInput | SubCategoriesScalarWhereInput[]
  }

  export type SubCategoriesUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<SubCategoriesCreateWithoutCategoryInput, SubCategoriesUncheckedCreateWithoutCategoryInput> | SubCategoriesCreateWithoutCategoryInput[] | SubCategoriesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SubCategoriesCreateOrConnectWithoutCategoryInput | SubCategoriesCreateOrConnectWithoutCategoryInput[]
    upsert?: SubCategoriesUpsertWithWhereUniqueWithoutCategoryInput | SubCategoriesUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: SubCategoriesCreateManyCategoryInputEnvelope
    set?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    disconnect?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    delete?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    connect?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    update?: SubCategoriesUpdateWithWhereUniqueWithoutCategoryInput | SubCategoriesUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: SubCategoriesUpdateManyWithWhereWithoutCategoryInput | SubCategoriesUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: SubCategoriesScalarWhereInput | SubCategoriesScalarWhereInput[]
  }

  export type ItemsCreateNestedOneWithoutExchangeToInput = {
    create?: XOR<ItemsCreateWithoutExchangeToInput, ItemsUncheckedCreateWithoutExchangeToInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutExchangeToInput
    connect?: ItemsWhereUniqueInput
  }

  export type SubCategoriesCreateNestedOneWithoutExchangeToInput = {
    create?: XOR<SubCategoriesCreateWithoutExchangeToInput, SubCategoriesUncheckedCreateWithoutExchangeToInput>
    connectOrCreate?: SubCategoriesCreateOrConnectWithoutExchangeToInput
    connect?: SubCategoriesWhereUniqueInput
  }

  export type ItemsUpdateOneRequiredWithoutExchangeToNestedInput = {
    create?: XOR<ItemsCreateWithoutExchangeToInput, ItemsUncheckedCreateWithoutExchangeToInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutExchangeToInput
    upsert?: ItemsUpsertWithoutExchangeToInput
    connect?: ItemsWhereUniqueInput
    update?: XOR<XOR<ItemsUpdateToOneWithWhereWithoutExchangeToInput, ItemsUpdateWithoutExchangeToInput>, ItemsUncheckedUpdateWithoutExchangeToInput>
  }

  export type SubCategoriesUpdateOneRequiredWithoutExchangeToNestedInput = {
    create?: XOR<SubCategoriesCreateWithoutExchangeToInput, SubCategoriesUncheckedCreateWithoutExchangeToInput>
    connectOrCreate?: SubCategoriesCreateOrConnectWithoutExchangeToInput
    upsert?: SubCategoriesUpsertWithoutExchangeToInput
    connect?: SubCategoriesWhereUniqueInput
    update?: XOR<XOR<SubCategoriesUpdateToOneWithWhereWithoutExchangeToInput, SubCategoriesUpdateWithoutExchangeToInput>, SubCategoriesUncheckedUpdateWithoutExchangeToInput>
  }

  export type UsersCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutNotificationsInput
    connect?: UsersWhereUniqueInput
  }

  export type ItemsCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<ItemsCreateWithoutNotificationsInput, ItemsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutNotificationsInput
    connect?: ItemsWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutNotificationsInput
    upsert?: UsersUpsertWithoutNotificationsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutNotificationsInput, UsersUpdateWithoutNotificationsInput>, UsersUncheckedUpdateWithoutNotificationsInput>
  }

  export type ItemsUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<ItemsCreateWithoutNotificationsInput, ItemsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutNotificationsInput
    upsert?: ItemsUpsertWithoutNotificationsInput
    disconnect?: ItemsWhereInput | boolean
    delete?: ItemsWhereInput | boolean
    connect?: ItemsWhereUniqueInput
    update?: XOR<XOR<ItemsUpdateToOneWithWhereWithoutNotificationsInput, ItemsUpdateWithoutNotificationsInput>, ItemsUncheckedUpdateWithoutNotificationsInput>
  }

  export type UsersCreateNestedOneWithoutTokensInput = {
    create?: XOR<UsersCreateWithoutTokensInput, UsersUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTokensInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutTokensNestedInput = {
    create?: XOR<UsersCreateWithoutTokensInput, UsersUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTokensInput
    upsert?: UsersUpsertWithoutTokensInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutTokensInput, UsersUpdateWithoutTokensInput>, UsersUncheckedUpdateWithoutTokensInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type RolesCreateWithoutUsersInput = {
    title: string
  }

  export type RolesUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
  }

  export type RolesCreateOrConnectWithoutUsersInput = {
    where: RolesWhereUniqueInput
    create: XOR<RolesCreateWithoutUsersInput, RolesUncheckedCreateWithoutUsersInput>
  }

  export type FavouriteItemsCreateWithoutUserInput = {
    Items: ItemsCreateNestedOneWithoutFavouriteItemsInput
  }

  export type FavouriteItemsUncheckedCreateWithoutUserInput = {
    items_id: number
  }

  export type FavouriteItemsCreateOrConnectWithoutUserInput = {
    where: FavouriteItemsWhereUniqueInput
    create: XOR<FavouriteItemsCreateWithoutUserInput, FavouriteItemsUncheckedCreateWithoutUserInput>
  }

  export type FavouriteItemsCreateManyUserInputEnvelope = {
    data: FavouriteItemsCreateManyUserInput | FavouriteItemsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ItemsCreateWithoutUsersInput = {
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
    SubCategories: SubCategoriesCreateNestedOneWithoutItemsInput
    ExchangeTo?: ExchangeToCreateNestedManyWithoutItemInput
    FavouriteItems?: FavouriteItemsCreateNestedManyWithoutItemsInput
    Notifications?: NotificationsCreateNestedManyWithoutItemInput
  }

  export type ItemsUncheckedCreateWithoutUsersInput = {
    id?: number
    subCategories_id: number
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
    ExchangeTo?: ExchangeToUncheckedCreateNestedManyWithoutItemInput
    FavouriteItems?: FavouriteItemsUncheckedCreateNestedManyWithoutItemsInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemsCreateOrConnectWithoutUsersInput = {
    where: ItemsWhereUniqueInput
    create: XOR<ItemsCreateWithoutUsersInput, ItemsUncheckedCreateWithoutUsersInput>
  }

  export type ItemsCreateManyUsersInputEnvelope = {
    data: ItemsCreateManyUsersInput | ItemsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type LocationsCreateWithoutUserInput = {
    longtitude: string
    latitude: string
  }

  export type LocationsUncheckedCreateWithoutUserInput = {
    longtitude: string
    latitude: string
  }

  export type LocationsCreateOrConnectWithoutUserInput = {
    where: LocationsWhereUniqueInput
    create: XOR<LocationsCreateWithoutUserInput, LocationsUncheckedCreateWithoutUserInput>
  }

  export type LocationsCreateManyUserInputEnvelope = {
    data: LocationsCreateManyUserInput | LocationsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationsCreateWithoutUserInput = {
    data: string
    seen: boolean
    created_at?: Date | string
    Item?: ItemsCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationsUncheckedCreateWithoutUserInput = {
    id?: number
    item_id?: number | null
    data: string
    seen: boolean
    created_at?: Date | string
  }

  export type NotificationsCreateOrConnectWithoutUserInput = {
    where: NotificationsWhereUniqueInput
    create: XOR<NotificationsCreateWithoutUserInput, NotificationsUncheckedCreateWithoutUserInput>
  }

  export type NotificationsCreateManyUserInputEnvelope = {
    data: NotificationsCreateManyUserInput | NotificationsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TokensCreateWithoutUserInput = {
    token: string
  }

  export type TokensUncheckedCreateWithoutUserInput = {
    id?: number
    token: string
  }

  export type TokensCreateOrConnectWithoutUserInput = {
    where: TokensWhereUniqueInput
    create: XOR<TokensCreateWithoutUserInput, TokensUncheckedCreateWithoutUserInput>
  }

  export type TokensCreateManyUserInputEnvelope = {
    data: TokensCreateManyUserInput | TokensCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RolesUpsertWithoutUsersInput = {
    update: XOR<RolesUpdateWithoutUsersInput, RolesUncheckedUpdateWithoutUsersInput>
    create: XOR<RolesCreateWithoutUsersInput, RolesUncheckedCreateWithoutUsersInput>
    where?: RolesWhereInput
  }

  export type RolesUpdateToOneWithWhereWithoutUsersInput = {
    where?: RolesWhereInput
    data: XOR<RolesUpdateWithoutUsersInput, RolesUncheckedUpdateWithoutUsersInput>
  }

  export type RolesUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type RolesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type FavouriteItemsUpsertWithWhereUniqueWithoutUserInput = {
    where: FavouriteItemsWhereUniqueInput
    update: XOR<FavouriteItemsUpdateWithoutUserInput, FavouriteItemsUncheckedUpdateWithoutUserInput>
    create: XOR<FavouriteItemsCreateWithoutUserInput, FavouriteItemsUncheckedCreateWithoutUserInput>
  }

  export type FavouriteItemsUpdateWithWhereUniqueWithoutUserInput = {
    where: FavouriteItemsWhereUniqueInput
    data: XOR<FavouriteItemsUpdateWithoutUserInput, FavouriteItemsUncheckedUpdateWithoutUserInput>
  }

  export type FavouriteItemsUpdateManyWithWhereWithoutUserInput = {
    where: FavouriteItemsScalarWhereInput
    data: XOR<FavouriteItemsUpdateManyMutationInput, FavouriteItemsUncheckedUpdateManyWithoutUserInput>
  }

  export type FavouriteItemsScalarWhereInput = {
    AND?: FavouriteItemsScalarWhereInput | FavouriteItemsScalarWhereInput[]
    OR?: FavouriteItemsScalarWhereInput[]
    NOT?: FavouriteItemsScalarWhereInput | FavouriteItemsScalarWhereInput[]
    user_id?: IntFilter<"FavouriteItems"> | number
    items_id?: IntFilter<"FavouriteItems"> | number
  }

  export type ItemsUpsertWithWhereUniqueWithoutUsersInput = {
    where: ItemsWhereUniqueInput
    update: XOR<ItemsUpdateWithoutUsersInput, ItemsUncheckedUpdateWithoutUsersInput>
    create: XOR<ItemsCreateWithoutUsersInput, ItemsUncheckedCreateWithoutUsersInput>
  }

  export type ItemsUpdateWithWhereUniqueWithoutUsersInput = {
    where: ItemsWhereUniqueInput
    data: XOR<ItemsUpdateWithoutUsersInput, ItemsUncheckedUpdateWithoutUsersInput>
  }

  export type ItemsUpdateManyWithWhereWithoutUsersInput = {
    where: ItemsScalarWhereInput
    data: XOR<ItemsUpdateManyMutationInput, ItemsUncheckedUpdateManyWithoutUsersInput>
  }

  export type ItemsScalarWhereInput = {
    AND?: ItemsScalarWhereInput | ItemsScalarWhereInput[]
    OR?: ItemsScalarWhereInput[]
    NOT?: ItemsScalarWhereInput | ItemsScalarWhereInput[]
    id?: IntFilter<"Items"> | number
    users_id?: IntFilter<"Items"> | number
    subCategories_id?: IntFilter<"Items"> | number
    name?: StringFilter<"Items"> | string
    description?: StringFilter<"Items"> | string
    photo?: StringFilter<"Items"> | string
    price?: DecimalFilter<"Items"> | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFilter<"Items"> | boolean
    exchange?: BoolFilter<"Items"> | boolean
    visibility?: BoolFilter<"Items"> | boolean
    created_at?: DateTimeFilter<"Items"> | Date | string
    updated_at?: DateTimeFilter<"Items"> | Date | string
  }

  export type LocationsUpsertWithWhereUniqueWithoutUserInput = {
    where: LocationsWhereUniqueInput
    update: XOR<LocationsUpdateWithoutUserInput, LocationsUncheckedUpdateWithoutUserInput>
    create: XOR<LocationsCreateWithoutUserInput, LocationsUncheckedCreateWithoutUserInput>
  }

  export type LocationsUpdateWithWhereUniqueWithoutUserInput = {
    where: LocationsWhereUniqueInput
    data: XOR<LocationsUpdateWithoutUserInput, LocationsUncheckedUpdateWithoutUserInput>
  }

  export type LocationsUpdateManyWithWhereWithoutUserInput = {
    where: LocationsScalarWhereInput
    data: XOR<LocationsUpdateManyMutationInput, LocationsUncheckedUpdateManyWithoutUserInput>
  }

  export type LocationsScalarWhereInput = {
    AND?: LocationsScalarWhereInput | LocationsScalarWhereInput[]
    OR?: LocationsScalarWhereInput[]
    NOT?: LocationsScalarWhereInput | LocationsScalarWhereInput[]
    user_id?: IntFilter<"Locations"> | number
    longtitude?: StringFilter<"Locations"> | string
    latitude?: StringFilter<"Locations"> | string
  }

  export type NotificationsUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationsWhereUniqueInput
    update: XOR<NotificationsUpdateWithoutUserInput, NotificationsUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationsCreateWithoutUserInput, NotificationsUncheckedCreateWithoutUserInput>
  }

  export type NotificationsUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationsWhereUniqueInput
    data: XOR<NotificationsUpdateWithoutUserInput, NotificationsUncheckedUpdateWithoutUserInput>
  }

  export type NotificationsUpdateManyWithWhereWithoutUserInput = {
    where: NotificationsScalarWhereInput
    data: XOR<NotificationsUpdateManyMutationInput, NotificationsUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationsScalarWhereInput = {
    AND?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
    OR?: NotificationsScalarWhereInput[]
    NOT?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
    id?: IntFilter<"Notifications"> | number
    user_id?: IntFilter<"Notifications"> | number
    item_id?: IntNullableFilter<"Notifications"> | number | null
    data?: StringFilter<"Notifications"> | string
    seen?: BoolFilter<"Notifications"> | boolean
    created_at?: DateTimeFilter<"Notifications"> | Date | string
  }

  export type TokensUpsertWithWhereUniqueWithoutUserInput = {
    where: TokensWhereUniqueInput
    update: XOR<TokensUpdateWithoutUserInput, TokensUncheckedUpdateWithoutUserInput>
    create: XOR<TokensCreateWithoutUserInput, TokensUncheckedCreateWithoutUserInput>
  }

  export type TokensUpdateWithWhereUniqueWithoutUserInput = {
    where: TokensWhereUniqueInput
    data: XOR<TokensUpdateWithoutUserInput, TokensUncheckedUpdateWithoutUserInput>
  }

  export type TokensUpdateManyWithWhereWithoutUserInput = {
    where: TokensScalarWhereInput
    data: XOR<TokensUpdateManyMutationInput, TokensUncheckedUpdateManyWithoutUserInput>
  }

  export type TokensScalarWhereInput = {
    AND?: TokensScalarWhereInput | TokensScalarWhereInput[]
    OR?: TokensScalarWhereInput[]
    NOT?: TokensScalarWhereInput | TokensScalarWhereInput[]
    id?: IntFilter<"Tokens"> | number
    user_id?: IntFilter<"Tokens"> | number
    token?: StringFilter<"Tokens"> | string
  }

  export type UsersCreateWithoutRoleInput = {
    username: string
    email: string
    password: string
    createdAt?: Date | string
    FavouriteItems?: FavouriteItemsCreateNestedManyWithoutUserInput
    Items?: ItemsCreateNestedManyWithoutUsersInput
    Location?: LocationsCreateNestedManyWithoutUserInput
    Notifications?: NotificationsCreateNestedManyWithoutUserInput
    Tokens?: TokensCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutRoleInput = {
    id?: number
    username: string
    email: string
    password: string
    createdAt?: Date | string
    FavouriteItems?: FavouriteItemsUncheckedCreateNestedManyWithoutUserInput
    Items?: ItemsUncheckedCreateNestedManyWithoutUsersInput
    Location?: LocationsUncheckedCreateNestedManyWithoutUserInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUserInput
    Tokens?: TokensUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutRoleInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutRoleInput, UsersUncheckedCreateWithoutRoleInput>
  }

  export type UsersCreateManyRoleInputEnvelope = {
    data: UsersCreateManyRoleInput | UsersCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithWhereUniqueWithoutRoleInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutRoleInput, UsersUncheckedUpdateWithoutRoleInput>
    create: XOR<UsersCreateWithoutRoleInput, UsersUncheckedCreateWithoutRoleInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutRoleInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutRoleInput, UsersUncheckedUpdateWithoutRoleInput>
  }

  export type UsersUpdateManyWithWhereWithoutRoleInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutRoleInput>
  }

  export type UsersScalarWhereInput = {
    AND?: UsersScalarWhereInput | UsersScalarWhereInput[]
    OR?: UsersScalarWhereInput[]
    NOT?: UsersScalarWhereInput | UsersScalarWhereInput[]
    id?: IntFilter<"Users"> | number
    username?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    role_id?: IntFilter<"Users"> | number
    createdAt?: DateTimeFilter<"Users"> | Date | string
  }

  export type UsersCreateWithoutLocationInput = {
    username: string
    email: string
    password: string
    createdAt?: Date | string
    Role: RolesCreateNestedOneWithoutUsersInput
    FavouriteItems?: FavouriteItemsCreateNestedManyWithoutUserInput
    Items?: ItemsCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsCreateNestedManyWithoutUserInput
    Tokens?: TokensCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutLocationInput = {
    id?: number
    username: string
    email: string
    password: string
    role_id: number
    createdAt?: Date | string
    FavouriteItems?: FavouriteItemsUncheckedCreateNestedManyWithoutUserInput
    Items?: ItemsUncheckedCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUserInput
    Tokens?: TokensUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutLocationInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutLocationInput, UsersUncheckedCreateWithoutLocationInput>
  }

  export type UsersUpsertWithoutLocationInput = {
    update: XOR<UsersUpdateWithoutLocationInput, UsersUncheckedUpdateWithoutLocationInput>
    create: XOR<UsersCreateWithoutLocationInput, UsersUncheckedCreateWithoutLocationInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutLocationInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutLocationInput, UsersUncheckedUpdateWithoutLocationInput>
  }

  export type UsersUpdateWithoutLocationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Role?: RolesUpdateOneRequiredWithoutUsersNestedInput
    FavouriteItems?: FavouriteItemsUpdateManyWithoutUserNestedInput
    Items?: ItemsUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUpdateManyWithoutUserNestedInput
    Tokens?: TokensUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FavouriteItems?: FavouriteItemsUncheckedUpdateManyWithoutUserNestedInput
    Items?: ItemsUncheckedUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUserNestedInput
    Tokens?: TokensUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateWithoutFavouriteItemsInput = {
    username: string
    email: string
    password: string
    createdAt?: Date | string
    Role: RolesCreateNestedOneWithoutUsersInput
    Items?: ItemsCreateNestedManyWithoutUsersInput
    Location?: LocationsCreateNestedManyWithoutUserInput
    Notifications?: NotificationsCreateNestedManyWithoutUserInput
    Tokens?: TokensCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutFavouriteItemsInput = {
    id?: number
    username: string
    email: string
    password: string
    role_id: number
    createdAt?: Date | string
    Items?: ItemsUncheckedCreateNestedManyWithoutUsersInput
    Location?: LocationsUncheckedCreateNestedManyWithoutUserInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUserInput
    Tokens?: TokensUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutFavouriteItemsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutFavouriteItemsInput, UsersUncheckedCreateWithoutFavouriteItemsInput>
  }

  export type ItemsCreateWithoutFavouriteItemsInput = {
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
    Users: UsersCreateNestedOneWithoutItemsInput
    SubCategories: SubCategoriesCreateNestedOneWithoutItemsInput
    ExchangeTo?: ExchangeToCreateNestedManyWithoutItemInput
    Notifications?: NotificationsCreateNestedManyWithoutItemInput
  }

  export type ItemsUncheckedCreateWithoutFavouriteItemsInput = {
    id?: number
    users_id: number
    subCategories_id: number
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
    ExchangeTo?: ExchangeToUncheckedCreateNestedManyWithoutItemInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemsCreateOrConnectWithoutFavouriteItemsInput = {
    where: ItemsWhereUniqueInput
    create: XOR<ItemsCreateWithoutFavouriteItemsInput, ItemsUncheckedCreateWithoutFavouriteItemsInput>
  }

  export type UsersUpsertWithoutFavouriteItemsInput = {
    update: XOR<UsersUpdateWithoutFavouriteItemsInput, UsersUncheckedUpdateWithoutFavouriteItemsInput>
    create: XOR<UsersCreateWithoutFavouriteItemsInput, UsersUncheckedCreateWithoutFavouriteItemsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutFavouriteItemsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutFavouriteItemsInput, UsersUncheckedUpdateWithoutFavouriteItemsInput>
  }

  export type UsersUpdateWithoutFavouriteItemsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Role?: RolesUpdateOneRequiredWithoutUsersNestedInput
    Items?: ItemsUpdateManyWithoutUsersNestedInput
    Location?: LocationsUpdateManyWithoutUserNestedInput
    Notifications?: NotificationsUpdateManyWithoutUserNestedInput
    Tokens?: TokensUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutFavouriteItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Items?: ItemsUncheckedUpdateManyWithoutUsersNestedInput
    Location?: LocationsUncheckedUpdateManyWithoutUserNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUserNestedInput
    Tokens?: TokensUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ItemsUpsertWithoutFavouriteItemsInput = {
    update: XOR<ItemsUpdateWithoutFavouriteItemsInput, ItemsUncheckedUpdateWithoutFavouriteItemsInput>
    create: XOR<ItemsCreateWithoutFavouriteItemsInput, ItemsUncheckedCreateWithoutFavouriteItemsInput>
    where?: ItemsWhereInput
  }

  export type ItemsUpdateToOneWithWhereWithoutFavouriteItemsInput = {
    where?: ItemsWhereInput
    data: XOR<ItemsUpdateWithoutFavouriteItemsInput, ItemsUncheckedUpdateWithoutFavouriteItemsInput>
  }

  export type ItemsUpdateWithoutFavouriteItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Users?: UsersUpdateOneRequiredWithoutItemsNestedInput
    SubCategories?: SubCategoriesUpdateOneRequiredWithoutItemsNestedInput
    ExchangeTo?: ExchangeToUpdateManyWithoutItemNestedInput
    Notifications?: NotificationsUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateWithoutFavouriteItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    users_id?: IntFieldUpdateOperationsInput | number
    subCategories_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ExchangeTo?: ExchangeToUncheckedUpdateManyWithoutItemNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutItemNestedInput
  }

  export type UsersCreateWithoutItemsInput = {
    username: string
    email: string
    password: string
    createdAt?: Date | string
    Role: RolesCreateNestedOneWithoutUsersInput
    FavouriteItems?: FavouriteItemsCreateNestedManyWithoutUserInput
    Location?: LocationsCreateNestedManyWithoutUserInput
    Notifications?: NotificationsCreateNestedManyWithoutUserInput
    Tokens?: TokensCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutItemsInput = {
    id?: number
    username: string
    email: string
    password: string
    role_id: number
    createdAt?: Date | string
    FavouriteItems?: FavouriteItemsUncheckedCreateNestedManyWithoutUserInput
    Location?: LocationsUncheckedCreateNestedManyWithoutUserInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUserInput
    Tokens?: TokensUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutItemsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutItemsInput, UsersUncheckedCreateWithoutItemsInput>
  }

  export type SubCategoriesCreateWithoutItemsInput = {
    title: string
    nr?: number | null
    Category: CategoriesCreateNestedOneWithoutSubCategoriesInput
    ExchangeTo?: ExchangeToCreateNestedManyWithoutSubCategoriesInput
  }

  export type SubCategoriesUncheckedCreateWithoutItemsInput = {
    id?: number
    category_id: number
    title: string
    nr?: number | null
    ExchangeTo?: ExchangeToUncheckedCreateNestedManyWithoutSubCategoriesInput
  }

  export type SubCategoriesCreateOrConnectWithoutItemsInput = {
    where: SubCategoriesWhereUniqueInput
    create: XOR<SubCategoriesCreateWithoutItemsInput, SubCategoriesUncheckedCreateWithoutItemsInput>
  }

  export type ExchangeToCreateWithoutItemInput = {
    SubCategories: SubCategoriesCreateNestedOneWithoutExchangeToInput
  }

  export type ExchangeToUncheckedCreateWithoutItemInput = {
    id?: number
    subCategories_id: number
  }

  export type ExchangeToCreateOrConnectWithoutItemInput = {
    where: ExchangeToWhereUniqueInput
    create: XOR<ExchangeToCreateWithoutItemInput, ExchangeToUncheckedCreateWithoutItemInput>
  }

  export type ExchangeToCreateManyItemInputEnvelope = {
    data: ExchangeToCreateManyItemInput | ExchangeToCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type FavouriteItemsCreateWithoutItemsInput = {
    User: UsersCreateNestedOneWithoutFavouriteItemsInput
  }

  export type FavouriteItemsUncheckedCreateWithoutItemsInput = {
    user_id: number
  }

  export type FavouriteItemsCreateOrConnectWithoutItemsInput = {
    where: FavouriteItemsWhereUniqueInput
    create: XOR<FavouriteItemsCreateWithoutItemsInput, FavouriteItemsUncheckedCreateWithoutItemsInput>
  }

  export type FavouriteItemsCreateManyItemsInputEnvelope = {
    data: FavouriteItemsCreateManyItemsInput | FavouriteItemsCreateManyItemsInput[]
    skipDuplicates?: boolean
  }

  export type NotificationsCreateWithoutItemInput = {
    data: string
    seen: boolean
    created_at?: Date | string
    User: UsersCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationsUncheckedCreateWithoutItemInput = {
    id?: number
    user_id: number
    data: string
    seen: boolean
    created_at?: Date | string
  }

  export type NotificationsCreateOrConnectWithoutItemInput = {
    where: NotificationsWhereUniqueInput
    create: XOR<NotificationsCreateWithoutItemInput, NotificationsUncheckedCreateWithoutItemInput>
  }

  export type NotificationsCreateManyItemInputEnvelope = {
    data: NotificationsCreateManyItemInput | NotificationsCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutItemsInput = {
    update: XOR<UsersUpdateWithoutItemsInput, UsersUncheckedUpdateWithoutItemsInput>
    create: XOR<UsersCreateWithoutItemsInput, UsersUncheckedCreateWithoutItemsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutItemsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutItemsInput, UsersUncheckedUpdateWithoutItemsInput>
  }

  export type UsersUpdateWithoutItemsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Role?: RolesUpdateOneRequiredWithoutUsersNestedInput
    FavouriteItems?: FavouriteItemsUpdateManyWithoutUserNestedInput
    Location?: LocationsUpdateManyWithoutUserNestedInput
    Notifications?: NotificationsUpdateManyWithoutUserNestedInput
    Tokens?: TokensUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FavouriteItems?: FavouriteItemsUncheckedUpdateManyWithoutUserNestedInput
    Location?: LocationsUncheckedUpdateManyWithoutUserNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUserNestedInput
    Tokens?: TokensUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SubCategoriesUpsertWithoutItemsInput = {
    update: XOR<SubCategoriesUpdateWithoutItemsInput, SubCategoriesUncheckedUpdateWithoutItemsInput>
    create: XOR<SubCategoriesCreateWithoutItemsInput, SubCategoriesUncheckedCreateWithoutItemsInput>
    where?: SubCategoriesWhereInput
  }

  export type SubCategoriesUpdateToOneWithWhereWithoutItemsInput = {
    where?: SubCategoriesWhereInput
    data: XOR<SubCategoriesUpdateWithoutItemsInput, SubCategoriesUncheckedUpdateWithoutItemsInput>
  }

  export type SubCategoriesUpdateWithoutItemsInput = {
    title?: StringFieldUpdateOperationsInput | string
    nr?: NullableIntFieldUpdateOperationsInput | number | null
    Category?: CategoriesUpdateOneRequiredWithoutSubCategoriesNestedInput
    ExchangeTo?: ExchangeToUpdateManyWithoutSubCategoriesNestedInput
  }

  export type SubCategoriesUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    nr?: NullableIntFieldUpdateOperationsInput | number | null
    ExchangeTo?: ExchangeToUncheckedUpdateManyWithoutSubCategoriesNestedInput
  }

  export type ExchangeToUpsertWithWhereUniqueWithoutItemInput = {
    where: ExchangeToWhereUniqueInput
    update: XOR<ExchangeToUpdateWithoutItemInput, ExchangeToUncheckedUpdateWithoutItemInput>
    create: XOR<ExchangeToCreateWithoutItemInput, ExchangeToUncheckedCreateWithoutItemInput>
  }

  export type ExchangeToUpdateWithWhereUniqueWithoutItemInput = {
    where: ExchangeToWhereUniqueInput
    data: XOR<ExchangeToUpdateWithoutItemInput, ExchangeToUncheckedUpdateWithoutItemInput>
  }

  export type ExchangeToUpdateManyWithWhereWithoutItemInput = {
    where: ExchangeToScalarWhereInput
    data: XOR<ExchangeToUpdateManyMutationInput, ExchangeToUncheckedUpdateManyWithoutItemInput>
  }

  export type ExchangeToScalarWhereInput = {
    AND?: ExchangeToScalarWhereInput | ExchangeToScalarWhereInput[]
    OR?: ExchangeToScalarWhereInput[]
    NOT?: ExchangeToScalarWhereInput | ExchangeToScalarWhereInput[]
    id?: IntFilter<"ExchangeTo"> | number
    items_id?: IntFilter<"ExchangeTo"> | number
    subCategories_id?: IntFilter<"ExchangeTo"> | number
  }

  export type FavouriteItemsUpsertWithWhereUniqueWithoutItemsInput = {
    where: FavouriteItemsWhereUniqueInput
    update: XOR<FavouriteItemsUpdateWithoutItemsInput, FavouriteItemsUncheckedUpdateWithoutItemsInput>
    create: XOR<FavouriteItemsCreateWithoutItemsInput, FavouriteItemsUncheckedCreateWithoutItemsInput>
  }

  export type FavouriteItemsUpdateWithWhereUniqueWithoutItemsInput = {
    where: FavouriteItemsWhereUniqueInput
    data: XOR<FavouriteItemsUpdateWithoutItemsInput, FavouriteItemsUncheckedUpdateWithoutItemsInput>
  }

  export type FavouriteItemsUpdateManyWithWhereWithoutItemsInput = {
    where: FavouriteItemsScalarWhereInput
    data: XOR<FavouriteItemsUpdateManyMutationInput, FavouriteItemsUncheckedUpdateManyWithoutItemsInput>
  }

  export type NotificationsUpsertWithWhereUniqueWithoutItemInput = {
    where: NotificationsWhereUniqueInput
    update: XOR<NotificationsUpdateWithoutItemInput, NotificationsUncheckedUpdateWithoutItemInput>
    create: XOR<NotificationsCreateWithoutItemInput, NotificationsUncheckedCreateWithoutItemInput>
  }

  export type NotificationsUpdateWithWhereUniqueWithoutItemInput = {
    where: NotificationsWhereUniqueInput
    data: XOR<NotificationsUpdateWithoutItemInput, NotificationsUncheckedUpdateWithoutItemInput>
  }

  export type NotificationsUpdateManyWithWhereWithoutItemInput = {
    where: NotificationsScalarWhereInput
    data: XOR<NotificationsUpdateManyMutationInput, NotificationsUncheckedUpdateManyWithoutItemInput>
  }

  export type CategoriesCreateWithoutSubCategoriesInput = {
    title: string
    nr: number
  }

  export type CategoriesUncheckedCreateWithoutSubCategoriesInput = {
    id?: number
    title: string
    nr: number
  }

  export type CategoriesCreateOrConnectWithoutSubCategoriesInput = {
    where: CategoriesWhereUniqueInput
    create: XOR<CategoriesCreateWithoutSubCategoriesInput, CategoriesUncheckedCreateWithoutSubCategoriesInput>
  }

  export type ItemsCreateWithoutSubCategoriesInput = {
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
    Users: UsersCreateNestedOneWithoutItemsInput
    ExchangeTo?: ExchangeToCreateNestedManyWithoutItemInput
    FavouriteItems?: FavouriteItemsCreateNestedManyWithoutItemsInput
    Notifications?: NotificationsCreateNestedManyWithoutItemInput
  }

  export type ItemsUncheckedCreateWithoutSubCategoriesInput = {
    id?: number
    users_id: number
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
    ExchangeTo?: ExchangeToUncheckedCreateNestedManyWithoutItemInput
    FavouriteItems?: FavouriteItemsUncheckedCreateNestedManyWithoutItemsInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemsCreateOrConnectWithoutSubCategoriesInput = {
    where: ItemsWhereUniqueInput
    create: XOR<ItemsCreateWithoutSubCategoriesInput, ItemsUncheckedCreateWithoutSubCategoriesInput>
  }

  export type ItemsCreateManySubCategoriesInputEnvelope = {
    data: ItemsCreateManySubCategoriesInput | ItemsCreateManySubCategoriesInput[]
    skipDuplicates?: boolean
  }

  export type ExchangeToCreateWithoutSubCategoriesInput = {
    Item: ItemsCreateNestedOneWithoutExchangeToInput
  }

  export type ExchangeToUncheckedCreateWithoutSubCategoriesInput = {
    id?: number
    items_id: number
  }

  export type ExchangeToCreateOrConnectWithoutSubCategoriesInput = {
    where: ExchangeToWhereUniqueInput
    create: XOR<ExchangeToCreateWithoutSubCategoriesInput, ExchangeToUncheckedCreateWithoutSubCategoriesInput>
  }

  export type ExchangeToCreateManySubCategoriesInputEnvelope = {
    data: ExchangeToCreateManySubCategoriesInput | ExchangeToCreateManySubCategoriesInput[]
    skipDuplicates?: boolean
  }

  export type CategoriesUpsertWithoutSubCategoriesInput = {
    update: XOR<CategoriesUpdateWithoutSubCategoriesInput, CategoriesUncheckedUpdateWithoutSubCategoriesInput>
    create: XOR<CategoriesCreateWithoutSubCategoriesInput, CategoriesUncheckedCreateWithoutSubCategoriesInput>
    where?: CategoriesWhereInput
  }

  export type CategoriesUpdateToOneWithWhereWithoutSubCategoriesInput = {
    where?: CategoriesWhereInput
    data: XOR<CategoriesUpdateWithoutSubCategoriesInput, CategoriesUncheckedUpdateWithoutSubCategoriesInput>
  }

  export type CategoriesUpdateWithoutSubCategoriesInput = {
    title?: StringFieldUpdateOperationsInput | string
    nr?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriesUncheckedUpdateWithoutSubCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    nr?: IntFieldUpdateOperationsInput | number
  }

  export type ItemsUpsertWithWhereUniqueWithoutSubCategoriesInput = {
    where: ItemsWhereUniqueInput
    update: XOR<ItemsUpdateWithoutSubCategoriesInput, ItemsUncheckedUpdateWithoutSubCategoriesInput>
    create: XOR<ItemsCreateWithoutSubCategoriesInput, ItemsUncheckedCreateWithoutSubCategoriesInput>
  }

  export type ItemsUpdateWithWhereUniqueWithoutSubCategoriesInput = {
    where: ItemsWhereUniqueInput
    data: XOR<ItemsUpdateWithoutSubCategoriesInput, ItemsUncheckedUpdateWithoutSubCategoriesInput>
  }

  export type ItemsUpdateManyWithWhereWithoutSubCategoriesInput = {
    where: ItemsScalarWhereInput
    data: XOR<ItemsUpdateManyMutationInput, ItemsUncheckedUpdateManyWithoutSubCategoriesInput>
  }

  export type ExchangeToUpsertWithWhereUniqueWithoutSubCategoriesInput = {
    where: ExchangeToWhereUniqueInput
    update: XOR<ExchangeToUpdateWithoutSubCategoriesInput, ExchangeToUncheckedUpdateWithoutSubCategoriesInput>
    create: XOR<ExchangeToCreateWithoutSubCategoriesInput, ExchangeToUncheckedCreateWithoutSubCategoriesInput>
  }

  export type ExchangeToUpdateWithWhereUniqueWithoutSubCategoriesInput = {
    where: ExchangeToWhereUniqueInput
    data: XOR<ExchangeToUpdateWithoutSubCategoriesInput, ExchangeToUncheckedUpdateWithoutSubCategoriesInput>
  }

  export type ExchangeToUpdateManyWithWhereWithoutSubCategoriesInput = {
    where: ExchangeToScalarWhereInput
    data: XOR<ExchangeToUpdateManyMutationInput, ExchangeToUncheckedUpdateManyWithoutSubCategoriesInput>
  }

  export type SubCategoriesCreateWithoutCategoryInput = {
    title: string
    nr?: number | null
    Items?: ItemsCreateNestedManyWithoutSubCategoriesInput
    ExchangeTo?: ExchangeToCreateNestedManyWithoutSubCategoriesInput
  }

  export type SubCategoriesUncheckedCreateWithoutCategoryInput = {
    id?: number
    title: string
    nr?: number | null
    Items?: ItemsUncheckedCreateNestedManyWithoutSubCategoriesInput
    ExchangeTo?: ExchangeToUncheckedCreateNestedManyWithoutSubCategoriesInput
  }

  export type SubCategoriesCreateOrConnectWithoutCategoryInput = {
    where: SubCategoriesWhereUniqueInput
    create: XOR<SubCategoriesCreateWithoutCategoryInput, SubCategoriesUncheckedCreateWithoutCategoryInput>
  }

  export type SubCategoriesCreateManyCategoryInputEnvelope = {
    data: SubCategoriesCreateManyCategoryInput | SubCategoriesCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type SubCategoriesUpsertWithWhereUniqueWithoutCategoryInput = {
    where: SubCategoriesWhereUniqueInput
    update: XOR<SubCategoriesUpdateWithoutCategoryInput, SubCategoriesUncheckedUpdateWithoutCategoryInput>
    create: XOR<SubCategoriesCreateWithoutCategoryInput, SubCategoriesUncheckedCreateWithoutCategoryInput>
  }

  export type SubCategoriesUpdateWithWhereUniqueWithoutCategoryInput = {
    where: SubCategoriesWhereUniqueInput
    data: XOR<SubCategoriesUpdateWithoutCategoryInput, SubCategoriesUncheckedUpdateWithoutCategoryInput>
  }

  export type SubCategoriesUpdateManyWithWhereWithoutCategoryInput = {
    where: SubCategoriesScalarWhereInput
    data: XOR<SubCategoriesUpdateManyMutationInput, SubCategoriesUncheckedUpdateManyWithoutCategoryInput>
  }

  export type SubCategoriesScalarWhereInput = {
    AND?: SubCategoriesScalarWhereInput | SubCategoriesScalarWhereInput[]
    OR?: SubCategoriesScalarWhereInput[]
    NOT?: SubCategoriesScalarWhereInput | SubCategoriesScalarWhereInput[]
    id?: IntFilter<"SubCategories"> | number
    category_id?: IntFilter<"SubCategories"> | number
    title?: StringFilter<"SubCategories"> | string
    nr?: IntNullableFilter<"SubCategories"> | number | null
  }

  export type ItemsCreateWithoutExchangeToInput = {
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
    Users: UsersCreateNestedOneWithoutItemsInput
    SubCategories: SubCategoriesCreateNestedOneWithoutItemsInput
    FavouriteItems?: FavouriteItemsCreateNestedManyWithoutItemsInput
    Notifications?: NotificationsCreateNestedManyWithoutItemInput
  }

  export type ItemsUncheckedCreateWithoutExchangeToInput = {
    id?: number
    users_id: number
    subCategories_id: number
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
    FavouriteItems?: FavouriteItemsUncheckedCreateNestedManyWithoutItemsInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemsCreateOrConnectWithoutExchangeToInput = {
    where: ItemsWhereUniqueInput
    create: XOR<ItemsCreateWithoutExchangeToInput, ItemsUncheckedCreateWithoutExchangeToInput>
  }

  export type SubCategoriesCreateWithoutExchangeToInput = {
    title: string
    nr?: number | null
    Category: CategoriesCreateNestedOneWithoutSubCategoriesInput
    Items?: ItemsCreateNestedManyWithoutSubCategoriesInput
  }

  export type SubCategoriesUncheckedCreateWithoutExchangeToInput = {
    id?: number
    category_id: number
    title: string
    nr?: number | null
    Items?: ItemsUncheckedCreateNestedManyWithoutSubCategoriesInput
  }

  export type SubCategoriesCreateOrConnectWithoutExchangeToInput = {
    where: SubCategoriesWhereUniqueInput
    create: XOR<SubCategoriesCreateWithoutExchangeToInput, SubCategoriesUncheckedCreateWithoutExchangeToInput>
  }

  export type ItemsUpsertWithoutExchangeToInput = {
    update: XOR<ItemsUpdateWithoutExchangeToInput, ItemsUncheckedUpdateWithoutExchangeToInput>
    create: XOR<ItemsCreateWithoutExchangeToInput, ItemsUncheckedCreateWithoutExchangeToInput>
    where?: ItemsWhereInput
  }

  export type ItemsUpdateToOneWithWhereWithoutExchangeToInput = {
    where?: ItemsWhereInput
    data: XOR<ItemsUpdateWithoutExchangeToInput, ItemsUncheckedUpdateWithoutExchangeToInput>
  }

  export type ItemsUpdateWithoutExchangeToInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Users?: UsersUpdateOneRequiredWithoutItemsNestedInput
    SubCategories?: SubCategoriesUpdateOneRequiredWithoutItemsNestedInput
    FavouriteItems?: FavouriteItemsUpdateManyWithoutItemsNestedInput
    Notifications?: NotificationsUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateWithoutExchangeToInput = {
    id?: IntFieldUpdateOperationsInput | number
    users_id?: IntFieldUpdateOperationsInput | number
    subCategories_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FavouriteItems?: FavouriteItemsUncheckedUpdateManyWithoutItemsNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutItemNestedInput
  }

  export type SubCategoriesUpsertWithoutExchangeToInput = {
    update: XOR<SubCategoriesUpdateWithoutExchangeToInput, SubCategoriesUncheckedUpdateWithoutExchangeToInput>
    create: XOR<SubCategoriesCreateWithoutExchangeToInput, SubCategoriesUncheckedCreateWithoutExchangeToInput>
    where?: SubCategoriesWhereInput
  }

  export type SubCategoriesUpdateToOneWithWhereWithoutExchangeToInput = {
    where?: SubCategoriesWhereInput
    data: XOR<SubCategoriesUpdateWithoutExchangeToInput, SubCategoriesUncheckedUpdateWithoutExchangeToInput>
  }

  export type SubCategoriesUpdateWithoutExchangeToInput = {
    title?: StringFieldUpdateOperationsInput | string
    nr?: NullableIntFieldUpdateOperationsInput | number | null
    Category?: CategoriesUpdateOneRequiredWithoutSubCategoriesNestedInput
    Items?: ItemsUpdateManyWithoutSubCategoriesNestedInput
  }

  export type SubCategoriesUncheckedUpdateWithoutExchangeToInput = {
    id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    nr?: NullableIntFieldUpdateOperationsInput | number | null
    Items?: ItemsUncheckedUpdateManyWithoutSubCategoriesNestedInput
  }

  export type UsersCreateWithoutNotificationsInput = {
    username: string
    email: string
    password: string
    createdAt?: Date | string
    Role: RolesCreateNestedOneWithoutUsersInput
    FavouriteItems?: FavouriteItemsCreateNestedManyWithoutUserInput
    Items?: ItemsCreateNestedManyWithoutUsersInput
    Location?: LocationsCreateNestedManyWithoutUserInput
    Tokens?: TokensCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutNotificationsInput = {
    id?: number
    username: string
    email: string
    password: string
    role_id: number
    createdAt?: Date | string
    FavouriteItems?: FavouriteItemsUncheckedCreateNestedManyWithoutUserInput
    Items?: ItemsUncheckedCreateNestedManyWithoutUsersInput
    Location?: LocationsUncheckedCreateNestedManyWithoutUserInput
    Tokens?: TokensUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutNotificationsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
  }

  export type ItemsCreateWithoutNotificationsInput = {
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
    Users: UsersCreateNestedOneWithoutItemsInput
    SubCategories: SubCategoriesCreateNestedOneWithoutItemsInput
    ExchangeTo?: ExchangeToCreateNestedManyWithoutItemInput
    FavouriteItems?: FavouriteItemsCreateNestedManyWithoutItemsInput
  }

  export type ItemsUncheckedCreateWithoutNotificationsInput = {
    id?: number
    users_id: number
    subCategories_id: number
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
    ExchangeTo?: ExchangeToUncheckedCreateNestedManyWithoutItemInput
    FavouriteItems?: FavouriteItemsUncheckedCreateNestedManyWithoutItemsInput
  }

  export type ItemsCreateOrConnectWithoutNotificationsInput = {
    where: ItemsWhereUniqueInput
    create: XOR<ItemsCreateWithoutNotificationsInput, ItemsUncheckedCreateWithoutNotificationsInput>
  }

  export type UsersUpsertWithoutNotificationsInput = {
    update: XOR<UsersUpdateWithoutNotificationsInput, UsersUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutNotificationsInput, UsersUncheckedUpdateWithoutNotificationsInput>
  }

  export type UsersUpdateWithoutNotificationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Role?: RolesUpdateOneRequiredWithoutUsersNestedInput
    FavouriteItems?: FavouriteItemsUpdateManyWithoutUserNestedInput
    Items?: ItemsUpdateManyWithoutUsersNestedInput
    Location?: LocationsUpdateManyWithoutUserNestedInput
    Tokens?: TokensUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FavouriteItems?: FavouriteItemsUncheckedUpdateManyWithoutUserNestedInput
    Items?: ItemsUncheckedUpdateManyWithoutUsersNestedInput
    Location?: LocationsUncheckedUpdateManyWithoutUserNestedInput
    Tokens?: TokensUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ItemsUpsertWithoutNotificationsInput = {
    update: XOR<ItemsUpdateWithoutNotificationsInput, ItemsUncheckedUpdateWithoutNotificationsInput>
    create: XOR<ItemsCreateWithoutNotificationsInput, ItemsUncheckedCreateWithoutNotificationsInput>
    where?: ItemsWhereInput
  }

  export type ItemsUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: ItemsWhereInput
    data: XOR<ItemsUpdateWithoutNotificationsInput, ItemsUncheckedUpdateWithoutNotificationsInput>
  }

  export type ItemsUpdateWithoutNotificationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Users?: UsersUpdateOneRequiredWithoutItemsNestedInput
    SubCategories?: SubCategoriesUpdateOneRequiredWithoutItemsNestedInput
    ExchangeTo?: ExchangeToUpdateManyWithoutItemNestedInput
    FavouriteItems?: FavouriteItemsUpdateManyWithoutItemsNestedInput
  }

  export type ItemsUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    users_id?: IntFieldUpdateOperationsInput | number
    subCategories_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ExchangeTo?: ExchangeToUncheckedUpdateManyWithoutItemNestedInput
    FavouriteItems?: FavouriteItemsUncheckedUpdateManyWithoutItemsNestedInput
  }

  export type UsersCreateWithoutTokensInput = {
    username: string
    email: string
    password: string
    createdAt?: Date | string
    Role: RolesCreateNestedOneWithoutUsersInput
    FavouriteItems?: FavouriteItemsCreateNestedManyWithoutUserInput
    Items?: ItemsCreateNestedManyWithoutUsersInput
    Location?: LocationsCreateNestedManyWithoutUserInput
    Notifications?: NotificationsCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutTokensInput = {
    id?: number
    username: string
    email: string
    password: string
    role_id: number
    createdAt?: Date | string
    FavouriteItems?: FavouriteItemsUncheckedCreateNestedManyWithoutUserInput
    Items?: ItemsUncheckedCreateNestedManyWithoutUsersInput
    Location?: LocationsUncheckedCreateNestedManyWithoutUserInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutTokensInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutTokensInput, UsersUncheckedCreateWithoutTokensInput>
  }

  export type UsersUpsertWithoutTokensInput = {
    update: XOR<UsersUpdateWithoutTokensInput, UsersUncheckedUpdateWithoutTokensInput>
    create: XOR<UsersCreateWithoutTokensInput, UsersUncheckedCreateWithoutTokensInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutTokensInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutTokensInput, UsersUncheckedUpdateWithoutTokensInput>
  }

  export type UsersUpdateWithoutTokensInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Role?: RolesUpdateOneRequiredWithoutUsersNestedInput
    FavouriteItems?: FavouriteItemsUpdateManyWithoutUserNestedInput
    Items?: ItemsUpdateManyWithoutUsersNestedInput
    Location?: LocationsUpdateManyWithoutUserNestedInput
    Notifications?: NotificationsUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FavouriteItems?: FavouriteItemsUncheckedUpdateManyWithoutUserNestedInput
    Items?: ItemsUncheckedUpdateManyWithoutUsersNestedInput
    Location?: LocationsUncheckedUpdateManyWithoutUserNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FavouriteItemsCreateManyUserInput = {
    items_id: number
  }

  export type ItemsCreateManyUsersInput = {
    id?: number
    subCategories_id: number
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LocationsCreateManyUserInput = {
    longtitude: string
    latitude: string
  }

  export type NotificationsCreateManyUserInput = {
    id?: number
    item_id?: number | null
    data: string
    seen: boolean
    created_at?: Date | string
  }

  export type TokensCreateManyUserInput = {
    id?: number
    token: string
  }

  export type FavouriteItemsUpdateWithoutUserInput = {
    Items?: ItemsUpdateOneRequiredWithoutFavouriteItemsNestedInput
  }

  export type FavouriteItemsUncheckedUpdateWithoutUserInput = {
    items_id?: IntFieldUpdateOperationsInput | number
  }

  export type FavouriteItemsUncheckedUpdateManyWithoutUserInput = {
    items_id?: IntFieldUpdateOperationsInput | number
  }

  export type ItemsUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    SubCategories?: SubCategoriesUpdateOneRequiredWithoutItemsNestedInput
    ExchangeTo?: ExchangeToUpdateManyWithoutItemNestedInput
    FavouriteItems?: FavouriteItemsUpdateManyWithoutItemsNestedInput
    Notifications?: NotificationsUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCategories_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ExchangeTo?: ExchangeToUncheckedUpdateManyWithoutItemNestedInput
    FavouriteItems?: FavouriteItemsUncheckedUpdateManyWithoutItemsNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCategories_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationsUpdateWithoutUserInput = {
    longtitude?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
  }

  export type LocationsUncheckedUpdateWithoutUserInput = {
    longtitude?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
  }

  export type LocationsUncheckedUpdateManyWithoutUserInput = {
    longtitude?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationsUpdateWithoutUserInput = {
    data?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Item?: ItemsUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    item_id?: NullableIntFieldUpdateOperationsInput | number | null
    data?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    item_id?: NullableIntFieldUpdateOperationsInput | number | null
    data?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokensUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
  }

  export type TokensUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
  }

  export type TokensUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
  }

  export type UsersCreateManyRoleInput = {
    id?: number
    username: string
    email: string
    password: string
    createdAt?: Date | string
  }

  export type UsersUpdateWithoutRoleInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FavouriteItems?: FavouriteItemsUpdateManyWithoutUserNestedInput
    Items?: ItemsUpdateManyWithoutUsersNestedInput
    Location?: LocationsUpdateManyWithoutUserNestedInput
    Notifications?: NotificationsUpdateManyWithoutUserNestedInput
    Tokens?: TokensUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FavouriteItems?: FavouriteItemsUncheckedUpdateManyWithoutUserNestedInput
    Items?: ItemsUncheckedUpdateManyWithoutUsersNestedInput
    Location?: LocationsUncheckedUpdateManyWithoutUserNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUserNestedInput
    Tokens?: TokensUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExchangeToCreateManyItemInput = {
    id?: number
    subCategories_id: number
  }

  export type FavouriteItemsCreateManyItemsInput = {
    user_id: number
  }

  export type NotificationsCreateManyItemInput = {
    id?: number
    user_id: number
    data: string
    seen: boolean
    created_at?: Date | string
  }

  export type ExchangeToUpdateWithoutItemInput = {
    SubCategories?: SubCategoriesUpdateOneRequiredWithoutExchangeToNestedInput
  }

  export type ExchangeToUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCategories_id?: IntFieldUpdateOperationsInput | number
  }

  export type ExchangeToUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCategories_id?: IntFieldUpdateOperationsInput | number
  }

  export type FavouriteItemsUpdateWithoutItemsInput = {
    User?: UsersUpdateOneRequiredWithoutFavouriteItemsNestedInput
  }

  export type FavouriteItemsUncheckedUpdateWithoutItemsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type FavouriteItemsUncheckedUpdateManyWithoutItemsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationsUpdateWithoutItemInput = {
    data?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationsUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemsCreateManySubCategoriesInput = {
    id?: number
    users_id: number
    name: string
    description: string
    photo: string
    price: Decimal | DecimalJsLike | number | string
    for_sale: boolean
    exchange: boolean
    visibility: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ExchangeToCreateManySubCategoriesInput = {
    id?: number
    items_id: number
  }

  export type ItemsUpdateWithoutSubCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Users?: UsersUpdateOneRequiredWithoutItemsNestedInput
    ExchangeTo?: ExchangeToUpdateManyWithoutItemNestedInput
    FavouriteItems?: FavouriteItemsUpdateManyWithoutItemsNestedInput
    Notifications?: NotificationsUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateWithoutSubCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    users_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ExchangeTo?: ExchangeToUncheckedUpdateManyWithoutItemNestedInput
    FavouriteItems?: FavouriteItemsUncheckedUpdateManyWithoutItemsNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateManyWithoutSubCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    users_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    for_sale?: BoolFieldUpdateOperationsInput | boolean
    exchange?: BoolFieldUpdateOperationsInput | boolean
    visibility?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExchangeToUpdateWithoutSubCategoriesInput = {
    Item?: ItemsUpdateOneRequiredWithoutExchangeToNestedInput
  }

  export type ExchangeToUncheckedUpdateWithoutSubCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    items_id?: IntFieldUpdateOperationsInput | number
  }

  export type ExchangeToUncheckedUpdateManyWithoutSubCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    items_id?: IntFieldUpdateOperationsInput | number
  }

  export type SubCategoriesCreateManyCategoryInput = {
    id?: number
    title: string
    nr?: number | null
  }

  export type SubCategoriesUpdateWithoutCategoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    nr?: NullableIntFieldUpdateOperationsInput | number | null
    Items?: ItemsUpdateManyWithoutSubCategoriesNestedInput
    ExchangeTo?: ExchangeToUpdateManyWithoutSubCategoriesNestedInput
  }

  export type SubCategoriesUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    nr?: NullableIntFieldUpdateOperationsInput | number | null
    Items?: ItemsUncheckedUpdateManyWithoutSubCategoriesNestedInput
    ExchangeTo?: ExchangeToUncheckedUpdateManyWithoutSubCategoriesNestedInput
  }

  export type SubCategoriesUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    nr?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RolesCountOutputTypeDefaultArgs instead
     */
    export type RolesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RolesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemsCountOutputTypeDefaultArgs instead
     */
    export type ItemsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubCategoriesCountOutputTypeDefaultArgs instead
     */
    export type SubCategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubCategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriesCountOutputTypeDefaultArgs instead
     */
    export type CategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RolesDefaultArgs instead
     */
    export type RolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RolesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationsDefaultArgs instead
     */
    export type LocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavouriteItemsDefaultArgs instead
     */
    export type FavouriteItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FavouriteItemsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemsDefaultArgs instead
     */
    export type ItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubCategoriesDefaultArgs instead
     */
    export type SubCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubCategoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriesDefaultArgs instead
     */
    export type CategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExchangeToDefaultArgs instead
     */
    export type ExchangeToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExchangeToDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationsDefaultArgs instead
     */
    export type NotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TokensDefaultArgs instead
     */
    export type TokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TokensDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}